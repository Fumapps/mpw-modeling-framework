import helpers.AnnotationHelpers;
import helpers.EmfHelpers;

modeltype Ecore uses ecore('http://www.eclipse.org/emf/2002/Ecore');

modeltype CommandModel uses 'http://www.mpw.uni-stuttgart.de/behavior/command';
modeltype QueryModel uses 'http://www.mpw.uni-stuttgart.de/behavior/query';
modeltype GenerationAnnotations uses 'http://www.mpw.uni-stuttgart.de/generation/annotations';

transformation RoleTransformation(inout ecore: Ecore);

configuration property Queries: List(QueryModel::Module);
configuration property Commands: List(CommandModel::Transformation);

main() {
    ecore.rootObjects()[EPackage]->map transformClasses();
}

mapping Ecore::EPackage::transformClasses() {
  var classes := self.eClassifiers[EClass];
  classes[isRelevantType()]->map transformToRoles();
}

helper Ecore::EClass::isRelevantType() : Boolean {
  return self.eAllSuperTypes->exists(t|t.name = "Actor" or t.name = "Stage");
}

mapping inout Ecore::EClass::transformToRoles() {
    var baseName := self.name;
    self.name := "Concrete" + baseName;
    eAnnotations += toAnnotation("role", "concrete");
    eAnnotations += toAnnotation("baseName", baseName);
  
    var readOnlyRole := createReadOnlyRole(baseName);
    
    var gameRole := self.createCommandRole(baseName, "game");
    gameRole.eSuperTypes += readOnlyRole;
    self.eSuperTypes += gameRole;
    
    var editorRole := self.createCommandRole(baseName, "editor");
    editorRole.eSuperTypes += readOnlyRole;
    self.eSuperTypes += editorRole;
  
    var actorFields := self.eReferences->select(r|r.eType.isInstanceOf("Actor"));
    actorFields->forEach(r) {
        readOnlyRole.eAnnotations += r.createRoleGetterDeclarationAnnotation("ReadOnly");
        gameRole.eAnnotations += r.createRoleGetterDeclarationAnnotation("Game");
        editorRole.eAnnotations += r.createRoleGetterDeclarationAnnotation("Editor");
    };
}

query Ecore::EStructuralFeature::createRoleGetterDeclarationAnnotation(roleName: String) : EAnnotation {
    var baseName := self.eType.getAnnotationValue("baseName");
    return object GetPropertyDeclarationAnnotation {
        fieldTypeName := roleName + baseName;
        getterName := "get" + self.name.firstToUpper();
    };
}

helper Ecore::EClass::createReadOnlyRole(baseName: String) : Ecore::EClass {
  var readOnlyRole := object EClass {
    name := "ReadOnly" + baseName;
    _abstract := true;
    interface := true;
    eAnnotations += toAnnotation("role", "readonly");
    eAnnotations += toAnnotation("baseName", baseName);
    eSuperTypes += findClassForName("Entity");
  };
  readOnlyRole.eOperations += self.eAllStructuralFeatures->select(f|f.changeable)
                                                         ->map transformFeatureToGetterOperation();
  
  var queryModule := Queries->first();
  var queriesForThisType := self.getQueriesForThisType();
  
  readOnlyRole.eOperations += queriesForThisType->reject(q|readOnlyRole.eAllOperations
                                                           ->exists(o|o.isPropertyGetter() and o.getSimplePropertyGetterName() = q.name))
                                                           ->map transformQueryToOperation();
  
  readOnlyRole.embedQueriesInOperations(queriesForThisType);
  
  self.ePackage.eClassifiers += readOnlyRole;
  return readOnlyRole;
}

mapping QueryModel::Query::transformQueryToOperation() : EOperation {
    name := self.name;
    eType := self.eType;
    if (self.isCollection) {
        upperBound := -1; 
    };
}

helper ecore::EClass::embedQueriesInOperations(queries: Set(QueryModel::Query)) {
  self.eAllOperations->forEach(o) {
      var queryForThisOperation := queries->any(q|q.name = o.name or o.isPropertyGetter() and o.getSimplePropertyGetterName() = q.name);
      if (queryForThisOperation != null) {
          var annotation := "query".toMarkerAnnotation();
          annotation.contents += queryForThisOperation.oclAsType(ecore::EObject).deepclone();
          o.eAnnotations += annotation;
          
          var documentationAnnotation := queryForThisOperation.createDocumentationAnnotation();
          if (documentationAnnotation != null) {
              o.eAnnotations += documentationAnnotation;
          };
      };
  };
}

helper QueryModel::Query::createDocumentationAnnotation() : EAnnotation {
    if (self.documentation.length() > 0) {
        return toAnnotation("documentation", self.documentation);
    };
    return null;
}

query ecore::EClass::getQueriesForThisType() : Set(QueryModel::Query) {
    var queryModule := Queries->first();
    return queryModule.elements->selectByType(QueryModel::Query)
                               ->select(q|q.contextClass = self);
}

helper Ecore::EClass::createCommandRole(baseName: String, roleName: String) : Ecore::EClass {
    var roleClass := object EClass {
      name := roleName.firstToUpper() + baseName;
      _abstract := true;
      interface := true;
      eAnnotations += toAnnotation("role", roleName);
      eAnnotations += toAnnotation("baseName", baseName);
    };
    roleClass.eOperations += Commands->select(c|c.roleName = roleName and c.targetClass.name = baseName)->map transformCommandToOperation();
    self.ePackage.eClassifiers += roleClass;
  
    return roleClass;
}

mapping CommandModel::Transformation::transformCommandToOperation() : EOperation {
    name := self.name;
    
    var annotation := "command".toMarkerAnnotation();
    eAnnotations += annotation;
    
    annotation.contents += self.oclAsType(ecore::EObject).deepclone();
}

mapping EStructuralFeature::transformFeatureToGetterOperation() : EOperation {
    name := self.name;
    eType := self.eType;
    upperBound := self.upperBound;
    eAnnotations += "isPropertyGetter".toMarkerAnnotation();
}

query EOperation::isPropertyGetter() : Boolean {
    return self.isMarkedWithAnnotation("isPropertyGetter");
}

query EOperation::getSimplePropertyGetterName() : String {
    return "get" + self.name.firstToUpper();
}
