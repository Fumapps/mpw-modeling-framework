modeltype Ecore uses ecore('http://www.eclipse.org/emf/2002/Ecore');

modeltype CommandModel uses 'http://www.mpw.uni-stuttgart.de/behavior/command';
modeltype QueryModel uses 'http://www.mpw.uni-stuttgart.de/behavior/query';

transformation RoleTransformation(inout ecore: Ecore);

configuration property Queries: List(QueryModel::Module);
configuration property Commands: List(CommandModel::Transformation);

main() {
    ecore.rootObjects()[EPackage]->map transformClasses();
}

mapping Ecore::EPackage::transformClasses() {
  var classes := self.eClassifiers[EClass];
  classes[isRelevantType()]->map transformToRoles();
}

helper Ecore::EClass::isRelevantType() : Boolean {
  return self.eAllSuperTypes->exists(t|t.name = "Actor" or t.name = "Stage");
}

mapping inout Ecore::EClass::transformToRoles() {
  var baseName := self.name;
  self.name := "Concrete" + baseName;
  
  var readOnlyRole := createReadOnlyRole(baseName);
  
  var gameRole := self.createCommandRole(baseName, "game");
  gameRole.eSuperTypes += readOnlyRole;
  self.eSuperTypes += gameRole;
  
  var editorRole := self.createCommandRole(baseName, "editor");
  editorRole.eSuperTypes += readOnlyRole;
  self.eSuperTypes += editorRole;
}

helper Ecore::EClass::createReadOnlyRole(baseName: String) : Ecore::EClass {
  var readOnlyRole := object EClass {
  	name := "ReadOnly" + baseName;
  	_abstract := true;
  	interface := true;
  };
  readOnlyRole.eOperations += self.eAllStructuralFeatures->select(f|f.changeable)
            											 ->map transformFeatureToGetterOperation();
  
  var queryModule := Queries->first();
  var queriesForThisType := self.getQueriesForThisType();
  
  readOnlyRole.eOperations += queriesForThisType->reject(q|readOnlyRole.eAllOperations
                                                           ->exists(o|o.name = q.name))
  									 			->map transformQueryToOperation();
  
  readOnlyRole.embedQueriesInOperations(queriesForThisType);
  
  self.ePackage.eClassifiers += readOnlyRole;
  return readOnlyRole;
}

mapping QueryModel::Query::transformQueryToOperation() : EOperation {
	name := self.name;
	eType := self.eType;
	if (self.isCollection) {
        upperBound := -1; 
	};
}

helper ecore::EClass::embedQueriesInOperations(queries: Set(QueryModel::Query)) {
  self.eAllOperations->forEach(o) {
      var queryForThisOperation := queries->any(q|q.name = o.name);
      if (queryForThisOperation != null) {
          var annotation := "query".toMarkerAnnotation();
          annotation.contents += queryForThisOperation.oclAsType(ecore::EObject).deepclone();
          o.eAnnotations += annotation;
      };
  };
}

query ecore::EClass::getQueriesForThisType() : Set(QueryModel::Query) {
    var queryModule := Queries->first();
    return queryModule.elements->selectByType(QueryModel::Query)
                               ->select(q|q.contextClass = self);
}

helper Ecore::EClass::createCommandRole(baseName: String, roleName: String) : Ecore::EClass {
  var roleClass := object EClass {
  	name := roleName.firstToUpper() + baseName;
  	_abstract := true;
  	interface := true;
  };
  roleClass.eOperations += Commands->select(c|c.roleName = roleName and c.targetClass.name = baseName)->map transformCommandToOperation();
  self.ePackage.eClassifiers += roleClass;
  return roleClass;
}

mapping CommandModel::Transformation::transformCommandToOperation() : EOperation {
	name := self.name;
	eAnnotations += "command".toMarkerAnnotation();
}

mapping EStructuralFeature::transformFeatureToGetterOperation() : EOperation {
	name := self.name;
	eType := self.eType;
	upperBound := self.upperBound;
	eAnnotations += "isPropertyGetter".toMarkerAnnotation();
}

helper String::toMarkerAnnotation() : EAnnotation {
	return object EAnnotation {
	    source := self;
	};
}
