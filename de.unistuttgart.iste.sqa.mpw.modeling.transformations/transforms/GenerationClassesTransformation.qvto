import facade.GameFacadeElementsLibrary;
import facade.StageBuilderLibrary;

modeltype Ecore uses ecore('http://www.eclipse.org/emf/2002/Ecore');

modeltype CommandModel uses 'http://www.mpw.uni-stuttgart.de/behavior/command';
modeltype QueryModel uses 'http://www.mpw.uni-stuttgart.de/behavior/query';
modeltype GenerationAnnotations uses 'http://www.mpw.uni-stuttgart.de/generation/annotations';

/**
  *  Transformation which transforms Ecore models by inserting facade classes for Actors and Stages.
  *
  *  It embeds GenerationAnnotations into the created EClasses which includes simple behavior and statements. The generation
  *  then simply can make use of this annotations to generate code.
  *
  *  The transformation is splitted into libraries 'facade.GameFacadeElementsLibrary' and 'facade.StageBuilderLibrary'.
  *
  *  Note: later this transformation shall also be used to copy also all other EClassifiers and insert GenerationAnnotations
  *        to move much more logic from the generator to the transformation stage. This pattern may later also be used for the
  *        QueryTransformation.qvto and CommandTransformation.qvto.
  */
transformation GenerationClassesTransformation(inout inEcore: Ecore);

main() {
    inEcore.rootObjects()[EPackage]->map transformPackage();
}

mapping inout EPackage::transformPackage() {
    var facadeClasses := self.eClassifiers[EClass][hasAnnotationValue("role", "game")]->map toGameFacadeClass();
    eClassifiers += facadeClasses;
    
    // generate elements of facade after classes are created, since they may rely on other facade types
    facadeClasses->map createGameFacadeFields();
    facadeClasses->map createElements();
    
    eClassifiers += self.eClassifiers[EClass][hasAnnotationValue("role", "editor")]->map createBuilderClass();
    
    self.eClassifiers[EClass][isInstanceOf("MiniProgrammingWorld")]->map useFacades();
    findClassForName("MiniProgrammingWorld").map removeDerivedStageReference();
}

mapping EClass::toGameFacadeClass() : EClass {
    var baseName := self.getAnnotationValue("baseName");
    name := baseName;
    eAnnotations += "facade".toMarkerAnnotation();
}

// MiniProgrammingWorld classes have to use facade classes
mapping inout EClass::useFacades() {
    eReferences->forEach(f) {
    	if (f.eType.isMarkedWithAnnotation("role")) {
    	    var baseName := f.eType.getAnnotationValue("baseName");
    		f.eType := findClassForName(baseName);
    		f.eAnnotations += object InlineSimpleFieldInitializationAnnotation {
    			field := f;
    			parameterInputVariableExpressions += createSelfExpression("this", self);
    		};
    	}
    };
}

mapping inout EClass::removeDerivedStageReference() {
    self.eStructuralFeatures := self.eStructuralFeatures->reject(f|f._derived and f.eType.name = "Stage");
}
