import helpers.AnnotationHelpers;
import helpers.EmfHelpers;

modeltype Ecore uses ecore('http://www.eclipse.org/emf/2002/Ecore');

modeltype CommandModel uses 'http://www.mpw.uni-stuttgart.de/behavior/command';
modeltype QueryModel uses 'http://www.mpw.uni-stuttgart.de/behavior/query';

transformation GenerationClassesTransformation(in inEcore: Ecore, out outEcore: Ecore);

configuration property Queries: List(QueryModel::Module);
configuration property Commands: List(CommandModel::Transformation);

main() {
    inEcore.rootObjects()[EPackage]->map transformPackage();
}

mapping EPackage::transformPackage() : EPackage {
    name := self.name;
    nsURI := self.nsURI + "/generation";
    nsPrefix := self.nsPrefix;
    // eClassifiers := self.eClassifiers->map toClassifier();
    // eClassifiers += self.eClassifiers[EClass]->map toImplClass();
    
    eClassifiers += self.eClassifiers[EClass][hasAnnotationValue("role", "game")]->map toGameFacadeClass();
}

mapping EClassifier::toClassifier() : EClassifier
    disjuncts EClass::toClassifier,
              EEnum::toClassifier {}

mapping EClass::toClassifier() : EClass {
    name := self.name;
}

mapping EEnum::toClassifier() : EEnum {
    name := self.name;
}

mapping EClass::toImplClass() : EClass {
    name := self.name + "Impl";
}

abstract mapping EClass::toGameFacadeClassBase() : EClass {
    var baseName := self.getAnnotationValue("baseName");
    name := baseName;
    eStructuralFeatures += object EReference {
        name := "game";
        eType := findInstanceOfMetaClass("MiniProgrammingWorld");	
    };
    
    eStructuralFeatures += object EReference {
        name := "internal" + baseName;
        eType := findClassifierForName("Game" + baseName); 
    };
}

mapping EClass::toGameFacadeClass() : EClass
    disjuncts EClass::toActorGameFacadeClass,
              EClass::toStageGameFacadeClass { }

abstract mapping EClass::toActorGameFacadeClass() : EClass inherits EClass::toGameFacadeClassBase
    when { self.getConcreteClass().eAllSuperTypes->exists(t|t.name = "Actor") } {
    
}

abstract mapping EClass::toStageGameFacadeClass() : EClass inherits EClass::toGameFacadeClassBase
    when { self.getConcreteClass().eAllSuperTypes->exists(t|t.name = "Stage") } {
    
    var constructorOperation := object EOperation {
    	name := result.name;
    	eParameters += object EParameter {
    	    name := "game";
    	    eType := findInstanceOfMetaClass("MiniProgrammingWorld");
    	};
    	eAnnotations += "constructor".toMarkerAnnotation();
    };
    eOperations += constructorOperation;
    
    constructorOperation.eAnnotations += constructorOperation.toAssignParameterToFieldAnnotation("game", "game");
}

helper EOperation::toAssignParameterToFieldAnnotation(parameterName: String, fieldName: String) : EAnnotation {
    var parameter := self.eParameters->any(p|p.name = parameterName);
    var field := self.eContainingClass.eAllStructuralFeatures->any(f|f.name = fieldName);
	return object EAnnotation {
            source := "body";
            eAnnotations += object EAnnotation {
                source := "assign";
                _references += field.oclAsType(EObject);
                _references += parameter.oclAsType(EObject);
            };
        };
}


query EClass::getConcreteClass() : EClass {
	var baseName := self.getAnnotationValue("baseName");
	return findClassifierForName("Concrete" + baseName).oclAsType(EClass);
}
