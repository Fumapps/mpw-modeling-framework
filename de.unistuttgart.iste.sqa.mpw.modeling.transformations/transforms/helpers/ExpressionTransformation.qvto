import helpers.StatementTransformation;

modeltype ecore uses ecore('http://www.eclipse.org/emf/2002/Ecore');
	
modeltype Input uses "http://www.mpw.uni-stuttgart.de/querydsl";
modeltype QueryModel uses "http://www.mpw.uni-stuttgart.de/behavior/query";

library ExpressionTransformation;

mapping Input::Expression::toExpression() : QueryModel::Expression
    disjuncts Input::Not::toImpliesExpression,
              Input::ImpliesExpression::toImpliesExpression,
              Input::OrExpression::toOrExpression,
              Input::AndExpression::toAndExpression,
              Input::EqualityExpression::toEqualityExpression,
              Input::Expression::toStatementExpression {}

mapping Input::Not::toImpliesExpression() : QueryModel::NotExpression {
    inner := self.expression.map toExpression();
}

mapping Input::ImpliesExpression::toImpliesExpression() : QueryModel::ImpliesExpression {
    lhs := self.left.map toExpression();
    rhs := self.right.map toExpression();
}

mapping Input::OrExpression::toOrExpression() : QueryModel::OrExpression {
    lhs := self.left.map toExpression();
    rhs := self.right.map toExpression();
}

mapping Input::AndExpression::toAndExpression() : QueryModel::AndExpression {
    lhs := self.left.map toExpression();
    rhs := self.right.map toExpression();
}

mapping Input::EqualityExpression::toEqualityExpression() : QueryModel::CompareExpression {
    lhs := self.left.map toExpression();
    rhs := self.right.map toExpression();
    operator := self.operation.toOperator();
}

query String::toOperator() : QueryModel::CompareOperator {
    switch {
        case (self = "=") return QueryModel::CompareOperator::EQUAL;
        case (self = "<>") return QueryModel::CompareOperator::NOT_EQUAL;
    };
    assert (false) with log('invalid operator ' + self);
    return null;
}

mapping Input::Expression::toStatementExpression() : QueryModel::StatementsExpression
    when { self.statements->notEmpty(); } {
    statements += self.statements->map toStatement();
}
