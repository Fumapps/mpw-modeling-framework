import helpers.ExpressionTransformation;

modeltype ecore uses ecore('http://www.eclipse.org/emf/2002/Ecore');
	
modeltype Input uses "http://www.mpw.uni-stuttgart.de/transformation/inputs";
modeltype QueryInput uses "http://www.mpw.uni-stuttgart.de/querydsl";
modeltype QueryModel uses "http://www.mpw.uni-stuttgart.de/behavior/query";

transformation TransformQueryDsl2Query(in inModel: QueryInput, out outModel: QueryModel);

main() {
    inModel.rootObjects()[Input::QueryInputs]->map toQueryModel();
}

mapping Input::QueryInputs::toQueryModel() : QueryModel::Module {
    name := "queries";
    elements := self.models->collect(subobjectsOfKind(QueryInput::Element))->flatten()->sortElements()->map toElement();
}

helper Sequence(QueryInput::Element)::sortElements(): Sequence(Element) {
	return self->sortedBy(e|e.toSortPriority());
}

query QueryInput::Element::toSortPriority() : Integer {
	if (self.allSubobjectsOfType(QueryInput::Statement)->select(s|s.isBasedOnQuery())->isEmpty()) {
	    return 0;
	};
	return 1;
}

abstract mapping QueryInput::Element::toElement() : QueryModel::ExpressionalElement;

abstract mapping QueryInput::Element::toElementBase() : QueryModel::ExpressionalElement {
    init {
        result.documentation := self.documentation.trimMarkers();
        result.contextClass := self.context().className.map toContextClass();
        result.mainExpression := self.expressions->first().map toExpression();
    }
}

helper String::trimMarkers() : String {
    if (self.size() >= 5 and self.startsWith("/**") and self.endsWith("*/")) {
    	return self.substring(4, self.size()-2).trim();
    };
    return self;
}

mapping QueryInput::Query::toElement() : QueryModel::Query inherits QueryInput::Element::toElementBase {
    name := self.name;
	eType := result.mainExpression.eType;
	internal := self.internal;
	defaultValueLiteral := result.eType.defaultValue.toString();
	if (self.parameterList != null) {
		parameters := self.parameterList.parameters->map toParameter();
	};
}

mapping QueryInput::Parameter::toParameter() : QueryModel::Parameter {
    name := self.variableName;
    eType := findClassifierForName(self.typeName);
}

mapping QueryInput::CommandConstraint::toCommandConstraintBase() : QueryModel::CommandConstraint inherits QueryInput::Element::toElementBase {
    if (self.name != null) {
        result.name := self.name;
    } else {
        var commandContext := self.commandContext();
        result.name := commandContext.className + "_" + commandContext.commandName + "_" + self.metaClassName();
    }
}

mapping QueryInput::Precondition::toElement() : QueryModel::Precondition inherits QueryInput::CommandConstraint::toCommandConstraintBase {
    commandName := self.commandContext().commandName;
}

mapping QueryInput::Postcondition::toElement() : QueryModel::Postcondition merges QueryInput::CommandConstraint::toCommandConstraintBase {
    oldValueVariableExpressions := self.allSubobjectsOfType(OldValueExpression).map toVariableExpression();
    commandName := self.commandContext().commandName;
}

mapping QueryInput::Invariant::toElement() : QueryModel::ClassInvariant inherits QueryInput::Element::toElementBase {
    if (self.name != null) {
        result.name := self.name;
    } else {
        result.name := self.context().className + "_Invariant";
    }
}

mapping String::toContextClass() : ecore::EClass {
	init { result := findClassifierForName(self).oclAsType(ecore::EClass); }
}

query QueryInput::Element::context() : QueryInput::Context {
    return self.container().oclAsType(QueryInput::Context);
}

query QueryInput::Element::commandContext() : QueryInput::CommandContext {
    return self.container().oclAsType(QueryInput::CommandContext);
}
