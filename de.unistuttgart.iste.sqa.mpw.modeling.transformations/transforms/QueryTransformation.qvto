import helpers.ExpressionTransformation;

modeltype ecore uses ecore('http://www.eclipse.org/emf/2002/Ecore');
	
modeltype Input uses "http://www.mpw.uni-stuttgart.de/querydsl";
modeltype QueryModel uses "http://www.mpw.uni-stuttgart.de/behavior/query";

transformation TransformQueryDsl2Query(in inModel:Input, out outModel:QueryModel);

configuration property EntityModels: List(EPackage);

main() {
    var elements := inModel.rootObjects()[Input::Model]->map toElement();
}

mapping Input::Model::toElement() : QueryModel::ExpressionalElement
    disjuncts Input::Model::toQuery, Input::Model::toPrecondition, Input::Model::toPostcondition { }

abstract mapping Input::Model::toElementBase() : QueryModel::ExpressionalElement {
    name := self.context.name;
    mainExpression := self.expressions->first().map toExpression();
}

mapping Input::Model::toQuery() : QueryModel::Query inherits Input::Model::toElementBase
	when { self.context.kind = ContextKind::QUERY; } {
	contextClass := self.context.className.toContextClass();
}

mapping Input::Model::toPrecondition() : QueryModel::Precondition inherits Input::Model::toElementBase
    when { self.context.kind = ContextKind::PRE; } {
}

mapping Input::Model::toPostcondition() : QueryModel::Postcondition inherits Input::Model::toElementBase
    when { self.context.kind = ContextKind::POST; } {
}

helper String::toContextClass() : ecore::EClass {
	return EntityModels->collect(p|p.getEClassifier(self))->selectOne(c|c != null).oclAsType(ecore::EClass);
}
