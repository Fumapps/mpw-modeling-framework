import types.MetaModelHelpers;
import types.AnnotationHelpers;
import types.EmfHelpers;

import util.ExpressionHelperLibrary;

modeltype Ecore uses ecore('http://www.eclipse.org/emf/2002/Ecore');
modeltype BaseTypes uses "http://www.mpw.uni-stuttgart.de/behavior/basetypes";
modeltype CommandModel uses 'http://www.mpw.uni-stuttgart.de/behavior/command';
modeltype QueryModel uses 'http://www.mpw.uni-stuttgart.de/behavior/query';
modeltype GenerationAnnotations uses 'http://www.mpw.uni-stuttgart.de/generation/annotations';

/**
  *  Library used to share code between ActorGameFacadeElementsLibrary and StageGameFacadeElementsLibrary.
  */
library GameFacadeElementsBaseLibrary;

property baseName: String;

/**
  * Mapping: add common fields of a facade class
  */
abstract mapping inout EClass::createFieldsBase() {
    baseName := self.name;
    
    self.eStructuralFeatures += object EReference {
        name := "game";
        eType := findInstanceOfMetaClass("MiniProgrammingWorld");	
    };
    
    self.eStructuralFeatures += self.map createInternalGameRoleField();
}

/**
  *  Mapping: base logic for creating a facade class
  */
abstract mapping inout EClass::createElementsBase() {
    baseName := self.name;
    var concreteClass := self.getConcreteClass();
    
    self.eAnnotations += object ImportTypeAnnotation {
        relativeQualifiedTypeName := "commands." + baseName.toLowerCase() + ".*";
    };
    
    var internalGameRoleField := self.getEStructuralFeature("internal" + baseName);
    self.eAnnotations += internalGameRoleField.createInternalGameRoleGetterAnnotation();
    self.eAnnotations += internalGameRoleField.createInternalEditorRoleGetterAnnotation();
}

mapping EClass::createInternalGameRoleField() : EReference {
    name := "internal" + baseName;
    eType := findClassifierForName("Concrete" + baseName);
}

helper EStructuralFeature::createInternalGameRoleGetterAnnotation() : GetPropertyAnnotation {
    return object GetPropertyAnnotation {
        field := self;
        getterTypeName := "Game" + baseName;
        getterOperationName := "getInternal" + baseName;
        eAnnotations += toAnnotation("documentation", "Get the internal game representation of the " + baseName + ".");
    };
}

helper EStructuralFeature::createInternalEditorRoleGetterAnnotation() : GetPropertyAnnotation {
    return object GetPropertyAnnotation {
        field := self;
        getterTypeName := "Editor" + baseName;
        getterOperationName := "getInternalEditor" + baseName;
        eAnnotations += toAnnotation("documentation", "Get the internal editor representation of the " + baseName + ".");
    };
}

query getCommandForOperation(operation: EOperation) : Transformation {
    return operation.eAnnotations
                   ->selectOne(a|a.source = "command")
                    .contents
                   ->first()
                    .oclAsType(Transformation);
}

query getQueryForOperation(operation: EOperation) : Query {
    return operation.eAnnotations
                   ->selectOne(a|a.source = "query")
                    .contents
                   ->first()
                    .oclAsType(Query);
}

/**
 * Mapping: create delegates for commands belonging to the facade class
 */
mapping inout EClass::createCommands() {
    var gameRole := findClassForName("Game" + self.name);
    self.eOperations += gameRole.eAllOperations[isMarkedWithAnnotation("command")]
                               ->collect(o|getCommandForOperation(o))
                               ->map toCommandOperation(self);
}

mapping Transformation::toCommandOperation(facadeClass: EClass) : EOperation {
    name := self.getOperationName();
    eParameters := self.mainUnit.parameters->map toOperationParameter();
    if (self.isInit) {
        result.map createInitGameByStageParameterAssignment(facadeClass);
    };
    
    result.map createGameVariablesForFacadeParameters();

    eAnnotations += object CommandParameterCreationAnnotation { 
        command := self;
        parameterMappings := self.mainUnit.parameters->map toCommandCallParameterMapping();
    };
    eAnnotations += object CommandCallAnnotation { 
        command := self;
        targetRoleVariableName := "internal" + facadeClass.name;
    };
    eAnnotations += toAnnotation("documentation", self.documentation);
}

mapping inout EOperation::createGameVariablesForFacadeParameters() {
	self.eAnnotations += self.eParameters->select(p|p.isStageParameter())
	                                     ->map stageFacadeParameterToGameVariable();
}

query EParameter::isStageParameter() : Boolean {
	return self.eType.isMarkedWithAnnotation("facade") and self.eType.getConcreteClass().isInstanceOf("Stage");
}

mapping EParameter::stageFacadeParameterToGameVariable() : VariableDefinitionAnnotation {
    variableName := "game" + self.name.firstToUpper();
    
    var stageBaseName := self.eType.name;
    
    var parameterStatement := object ParameterUsageStatement {
        parameterName := self.name;
        type := self.eType;
    };
    var getInternalGameStatement := object GetPropertyStatement {
        propertyGetterName := "internal".getter() + stageBaseName;
        type := findClassForName("Game" + stageBaseName);
    };
    
    rhs := object ExpressionAnnotation {
    	expression := createStatementsExpression(List{parameterStatement, getInternalGameStatement});
    }
}

query Transformation::getOperationName() : String {
	if (self.isInit) {
        return "init";
    } else {
        return self.name;
    };
}

mapping inout EOperation::createInitGameByStageParameterAssignment(facadeClass: EClass) {
    var stageParameter := eParameters->any(p|p.eType.getConcreteClass().isInstanceOf("Stage"));
    if (stageParameter != null) {
        eAnnotations += object ExpressionFieldAssignmentAnnotation {
            field := facadeClass.getEStructuralFeature("game");
            expression := createPathExpression(stageParameter, "game");
        };
    }
}

abstract mapping BaseTypes::Parameter::toOperationParameterBase() : EParameter {
    name := self.name;
    eType := self.type;
    
    // facades do rely on other facade types, e.g. Hamster -> Territory instead of GameTerritory
    if (eType.isMarkedWithAnnotation("role")) {
        eType := eType.findFacadeForRoleType();
    }
}

mapping BaseTypes::Parameter::toCommandCallParameterMapping() : EStringToStringMapEntry {
    key := self.name;
    value := self.name;
    var eType := self.type;
    if (eType.isMarkedWithAnnotation("role")) {
        var baseName := eType.getBaseName();
        value := "game" + self.name.firstToUpper();
    }
}

mapping BaseTypes::Parameter::toOperationParameter() : EParameter merges BaseTypes::Parameter::toOperationParameterBase {}
mapping BaseTypes::Parameter::toConstructorParameter() : EParameter merges BaseTypes::Parameter::toOperationParameterBase {}

/**
 * Mapping: create delegates for queries belonging to the facade class
 */
mapping inout EClass::createQueries() {
    var readOnlyRole := findClassForName("ReadOnly" + self.name);
    self.eOperations += readOnlyRole.eAllOperations[isMarkedWithAnnotation("query")]
                                   ->collect(o|getQueryForOperation(o))
                                   ->reject(q|q.internal)
                                   ->map toQueryOperation(self);
}

mapping Query::toQueryOperation(facadeClass: EClass) : EOperation {
    name := self.name;
    eType := self.type;
    eParameters := self.parameters->map toEParameter();
    eAnnotations += object QueryCallAnnotation { 
        _query := self;
        internalRoleField := facadeClass.getEStructuralFeature("internal" + facadeClass.name).oclAsType(EReference);
    };
    eAnnotations += toAnnotation("documentation", self.documentation);
}

mapping BaseTypes::Parameter::toEParameter() : EParameter {
    name := self.name;
    eType := self.type;
}

query EClassifier::findFacadeForRoleType() : EClass {
	var baseName := self.getBaseName();
    return findClassForName(baseName);
};
