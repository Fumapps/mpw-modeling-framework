import facade.gamefacade.GameFacadeElementsBaseLibrary;

modeltype Ecore uses ecore('http://www.eclipse.org/emf/2002/Ecore');
modeltype GenerationAnnotations uses 'http://www.mpw.uni-stuttgart.de/generation/annotations';

/**
  *  Library used for the GameFacadeElementsLibrary which handles the creation of the game role facade classes for Actors.
  *
  *  E.g. for the Hamstersimulator this creates the 'Hamster' client API class which provide a method for each game command
  *  and each query. It then simply delegates to its internal role instance, e.g. the ConcreteHamster which implements the
  *  GameHamster role interface.
  */
library ActorGameFacadeElementsLibrary;

property intType = EInt.oclAsType(EClassifier);
property stringType = EString.oclAsType(EClassifier);

property baseName: String;
property concreteClass: EClass;

/**
 * Mapping: create actor game facade elements
 */
mapping inout EClass::createActorGameFacadeElements() inherits EClass::createElementsBase
    when { self.getConcreteClass().isInstanceOf("Actor") } {
    
    baseName := self.name;
    concreteClass := self.getConcreteClass();
    
    eOperations += createConstructorOperation();
    
    var initCommand := concreteClass.findInitCommandOperation();
    if (initCommand != null) {
	    eOperations += createConstructorWithParamsOperation(initCommand);
    };
    
    eOperations += createInternalStageConstructorOperation();
    
    self.map createCommands();
    self.map createQueries();
    
    self.map addWriteOperation();
    self.map addInputInterfaceOperation();
}

helper EClass::createConstructorOperation() : EOperation {
	return object EOperation {
    	name := self.name;
    	eAnnotations += "constructor".toMarkerAnnotation();
    	
    	eAnnotations += object ConstructorSimpleFieldInitializationAnnotation {
    		field := self.getEStructuralFeature("internal" + baseName);
    		constructorTypeName := concreteClass.name;
    	};
    	
    	eAnnotations += toAnnotation("documentation", "Create a new " + baseName + " object without initializing it.");
    };
}

query EClass::findInitCommandOperation() : EOperation {
	return self.eAllOperations->any(o|o.isMarkedWithAnnotation("command") and getCommandForOperation(o).isInit);
}

helper EClass::createConstructorWithParamsOperation(initCommand: EOperation) : EOperation {
	return object EOperation {
    	name := self.name;
    	eParameters += getCommandForOperation(initCommand).mainUnit.parameters->map toConstructorParameter();
    	eAnnotations += "constructor".toMarkerAnnotation();
    	
        eAnnotations += object ConstructorSimpleFieldInitializationAnnotation {
            field := self.getEStructuralFeature("internal" + baseName);
            constructorTypeName := concreteClass.name;
        };
    
    	eAnnotations += object MethodCallAnnotation {
    	    variableName := "this";
    		methodName := "init";
    		parameterInputVariablePropertyPaths += eParameters->collect(p|p.name);
    	};
    	
    	eAnnotations += toAnnotation("documentation", "Create a new " + baseName + " object by initializing it with the relating init() method.");
    };
}

helper EClass::createInternalStageConstructorOperation() : EOperation {
    var mpwClass := findInstanceOfMetaClass("MiniProgrammingWorld");
	return object EOperation {
        name := self.name;
        eAnnotations += "constructor".toMarkerAnnotation();
        
        var mpwParameter := object EParameter {
            name := "game";
            eType := mpwClass;
        };
        eParameters += mpwParameter;
        
        var internalActorParameter := object EParameter {
            name := "internal" + baseName;
            eType := findClassifierForName("Concrete" + baseName);
        };
        eParameters += internalActorParameter;
        
        eAnnotations += object ParameterToFieldAssignmentAnnotation {
            field := self.getEStructuralFeature("internal" + baseName);
            parameter := internalActorParameter;
        };
        eAnnotations += object ParameterToFieldAssignmentAnnotation {
            field := self.getEStructuralFeature("game");
            parameter := mpwParameter;
        };
        
        eAnnotations += toAnnotation("documentation", "Internal constructor.");
    };
}

/**
 * Mapping: create write operation
 */
mapping inout EClass::addWriteOperation() {
	var writeOperation := createWriteOperation();
    writeOperation.eAnnotations += createGameLogVariableAnnotation();
    writeOperation.eAnnotations += createCallWriteAnnotation();
	eOperations += writeOperation;
}

helper EClass::createWriteOperation() : EOperation {
	return object EOperation {
	    name := "write";
        eParameters += object EParameter {
            name := "message";
            eType := EString.oclAsType(EClassifier);    
        };
	};
}

helper EClass::createGameLogVariableAnnotation() : VariableDefinitionAnnotation {
	return object VariableDefinitionAnnotation {
        variableName := "gameLog";
        variableTypeName := "GameLog";
        rhs := object PropertyPathAnnotation {
            propertyPath := "game.gameLog";
        };
    };
}

helper EClass::createCallWriteAnnotation() : MethodCallAnnotation {
	return object MethodCallAnnotation {
        variableName := "gameLog";
        methodName := "write";
        parameterInputVariablePropertyPaths += "message";
    };
}

/**
 * Mapping: create input interfaces
 */
mapping inout EClass::addInputInterfaceOperation() {
    eOperations += createReadIntOperation();
    eOperations += createReadStringOperation();
}

helper EClass::createReadIntOperation() : EOperation {
	return object EOperation {
        name := "readNumber";
        eParameters += object EParameter {
            name := "message";
            eType := stringType;	
        };
        eType := intType;
        
        eAnnotations += self.createGameInterfaceVariableAnnotation();
        
        eAnnotations += object VariableDefinitionAnnotation {
        	variableName := "result";
        	variableTypeName := intType.name;
        	rhs := object MethodCallAnnotation {
        	    variableName := "gameInterface";
        		methodName := "readInteger";
        		parameterInputVariablePropertyPaths += "message";
        	};
        };
        eAnnotations += object PropertyPathReturnAnnotation {
        	propertyPath := "result";
        };
    };
}

helper EClass::createReadStringOperation() : EOperation {
	return object EOperation {
        name := "readString";
        eParameters += object EParameter {
            name := "message";
            eType := stringType;    
        };
        eType := stringType;
        
        eAnnotations += self.createGameInterfaceVariableAnnotation();
        
        eAnnotations += object VariableDefinitionAnnotation {
            variableName := "result";
            variableTypeName := intType.name;
            rhs := object MethodCallAnnotation {
                variableName := "gameInterface";
                methodName := "readString";
                parameterInputVariablePropertyPaths += "message";
            };
        };
        eAnnotations += object PropertyPathReturnAnnotation {
            propertyPath := "result";
        };
    };
}

helper EClass::createGameInterfaceVariableAnnotation() : VariableDefinitionAnnotation {
	return object VariableDefinitionAnnotation {
        variableName := "gameInterface";
        variableTypeName := "UserInputInferface";
        rhs := object PropertyPathAnnotation {
            propertyPath := "game.userInputInterface";
        };
    };
}

