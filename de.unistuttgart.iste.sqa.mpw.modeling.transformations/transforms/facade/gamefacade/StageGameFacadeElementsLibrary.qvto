import facade.gamefacade.GameFacadeElementsBaseLibrary;

modeltype Ecore uses ecore('http://www.eclipse.org/emf/2002/Ecore');
modeltype GenerationAnnotations uses 'http://www.mpw.uni-stuttgart.de/generation/annotations';

/**
  *  Library used for the GameFacadeElementsLibrary which handles the creation of the game role facade classes for Stages.
  *
  *  E.g. for the Hamstersimulator this creates the 'Territory' client API class which provide a method for each game command
  *  and each query. It usually also defines default elements of an Actor like the 'defaultHamster' and provides the game
  *  object for the actor classes.
  */
library StageGameFacadeElementsLibrary;

property baseName: String;
property concreteClass: EClass;

/**
 * Mapping: create stage game facade fields
 */
mapping inout EClass::createStageGameFacadeFields() inherits EClass::createFieldsBase
    when { self.getConcreteClass().isInstanceOf("Stage") } {
    
    concreteClass := self.getConcreteClass();
    
    var actorFields := concreteClass.getActorFields();
    eStructuralFeatures += actorFields->map toFacadeActorFieldReference();
}

/**
 * Mapping: create elements for stage game facade
 */
mapping inout EClass::createStageGameFacadeElements() inherits EClass::createElementsBase
    when { self.getConcreteClass().isInstanceOf("Stage") } {
    
    baseName := self.name;
    concreteClass := self.getConcreteClass();
    eAnnotations += toAnnotation("metaTypeName", "Stage");
    
    var actorFields := concreteClass.getActorFields();
    eAnnotations += actorFields->map toGetPropertyAnnotation();
    self.map createConstructorOperation(actorFields);
    
    self.map createCommands();
    self.map createQueries();
    
    self.eAnnotations += object GetPropertyAnnotation {
        field := self.getEStructuralFeature("game");
        getterType := findInstanceOfMetaClass("MiniProgrammingWorld");
        getterOperationName := "getGame";
        eAnnotations += toAnnotation("documentation", "Gets the game associated to this " + baseName + " object.");
    };
}

mapping EReference::toFacadeActorFieldReference(): EReference {
    name := self.name;
    eType := self.eType.findFacadeForRoleType();
    containment := true;
}

mapping EReference::toGetPropertyAnnotation(): GetPropertyAnnotation {
    field := self.resolveoneIn(EReference::toFacadeActorFieldReference);
    getterType := field.eType;
    getterOperationName := "get" + field.name.firstToUpper();
}

query EClass::getActorFields() : OrderedSet(EReference) {
    return self.eReferences->select(r|r.eType.isInstanceOf("Actor"));
}

/**
 * Mapping: create the constructor and initialize all actor fields
 */
mapping inout EClass::createConstructorOperation(actorFields: OrderedSet(EReference)) {
	var constructorOperation := object EOperation {
        name := self.name;
        eParameters += object EParameter {
            name := "game";
            eType := findInstanceOfMetaClass("MiniProgrammingWorld");
        };
        eAnnotations += "constructor".toMarkerAnnotation();
        
        eAnnotations += object ConstructorSimpleFieldInitializationAnnotation {
            field := self.getEStructuralFeature("internal" + baseName);
            constructorTypeName := concreteClass.name;
        };
        
        eAnnotations += toAnnotation("documentation", "Initialize a new " + baseName + " and link it to its game object.");
    };
    
    eOperations += constructorOperation;
    
    constructorOperation.eAnnotations += constructorOperation.map toAssignParameterToFieldAnnotation("game", "game");
    constructorOperation.eAnnotations += actorFields->map toConstructorFieldInitialization(self);
}

mapping EOperation::toAssignParameterToFieldAnnotation(parameterName: String, fieldName: String) : ParameterToFieldAssignmentAnnotation {
    parameter := self.eParameters->any(p|p.name = parameterName);
    field := self.eContainingClass.eAllStructuralFeatures->any(f|f.name = fieldName);
}

mapping EReference::toConstructorFieldInitialization(facadeClass: EClass): ConstructorSimpleFieldInitializationAnnotation {
    field := facadeClass.getEStructuralFeature(self.name);
    parameterInputVariableExpressions += createPathExpression("game", findClassForName("MiniProgrammingWorld"));
    parameterInputVariableExpressions += createPathExpression(facadeClass.getEStructuralFeature("internal" + baseName), self.name);
    constructorTypeName := field.eType.name;
}
