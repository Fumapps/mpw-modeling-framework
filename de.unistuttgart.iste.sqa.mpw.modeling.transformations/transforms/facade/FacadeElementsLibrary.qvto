import helpers.AnnotationHelpers;
import helpers.EmfHelpers;
import helpers.BasicHelpers;

modeltype Ecore uses ecore('http://www.eclipse.org/emf/2002/Ecore');

modeltype CommandModel uses 'http://www.mpw.uni-stuttgart.de/behavior/command';
modeltype QueryModel uses 'http://www.mpw.uni-stuttgart.de/behavior/query';
modeltype GenerationAnnotations uses 'http://www.mpw.uni-stuttgart.de/generation/annotations';

library FacadeElementsLibrary;

mapping inout EClass::createElements()
    disjuncts EClass::createActorGameFacadeElements,
              EClass::createStageGameFacadeElements {}

abstract mapping inout EClass::createElementsBase() {
    var baseName := self.name;
    self.eStructuralFeatures += object EReference {
        name := "game";
        eType := findInstanceOfMetaClass("MiniProgrammingWorld");	
    };
    
    var internalGameRoleField := object EReference {
        name := "internal" + baseName;
        eType := findClassifierForName("Concrete" + baseName);
    };
    self.eStructuralFeatures += internalGameRoleField;
    
    self.eAnnotations += object GetPropertyAnnotation {
    	field := internalGameRoleField;
    	getterTypeName := "Game" + baseName;
    	getterOperationName := "getInternal" + baseName;
    	eAnnotations += toAnnotation("documentation", "Get the internal game representation of the " + baseName + ".");
    };
    
    self.eAnnotations += object GetPropertyAnnotation {
    	field := internalGameRoleField;
    	getterTypeName := "Editor" + baseName;
    	getterOperationName := "getInternalEditor" + baseName;
    	eAnnotations += toAnnotation("documentation", "Get the internal editor representation of the " + baseName + ".");
    };
}

mapping inout EClass::createActorGameFacadeElements() inherits EClass::createElementsBase
    when { self.getConcreteClass().eAllSuperTypes->exists(t|t.name = "Actor") } {
    
    var baseName := self.name;
    var concreteClass := self.getConcreteClass();
    
    var constructorOperation := object EOperation {
    	name := self.name;
    	eAnnotations += "constructor".toMarkerAnnotation();
    	
    	eAnnotations += object ConstructorSimpleFieldInitializationAnnotation {
    		field := self.getEStructuralFeature("internal" + baseName);
    		constructorTypeName := concreteClass.name;
    	};
    	
    	eAnnotations += toAnnotation("documentation", "Create a new " + baseName + " object without initializing it.");
    };
    eOperations += constructorOperation;
    
    var initCommand := concreteClass.eAllOperations->any(o|o.isMarkedWithAnnotation("command") and getCommandForOperation(o).isInit);
    if (initCommand != null) {
	    var constructorWithParamsOperation := object EOperation {
	    	name := self.name;
	    	eParameters += getCommandForOperation(initCommand).mainUnit.parameters->map toConstructorParameter();
	    	eAnnotations += "constructor".toMarkerAnnotation();
	    	
	    	eAnnotations += object MethodCallAnnotation {
	    	    variableName := "this";
	    		methodName := "init";
	    		parameterInputVariablePropertyPaths += eParameters->collect(p|p.name);
	    	};
	    	
	    	eAnnotations += toAnnotation("documentation", "Create a new Hamster object by initializing it with the relating init() method.");
	    };
	    eOperations += constructorWithParamsOperation;
    };
    
    var mpwClass := findInstanceOfMetaClass("MiniProgrammingWorld");
    var internalStageConstructorOperation := object EOperation {
        name := self.name;
        eAnnotations += "constructor".toMarkerAnnotation();
        
        var mpwParameter := object EParameter {
            name := "game";
            eType := mpwClass;
        };
        eParameters += mpwParameter;
        
        var internalActorParameter := object EParameter {
            name := "internal" + baseName;
            eType := findClassifierForName("Concrete" + baseName);
        };
        eParameters += internalActorParameter;
        
        eAnnotations += object ParameterToFieldAssignmentAnnotation {
            targetFeature := self.getEStructuralFeature("internal" + baseName);
            parameter := internalActorParameter;
        };
        eAnnotations += object ParameterToFieldAssignmentAnnotation {
            targetFeature := self.getEStructuralFeature("game");
            parameter := mpwParameter;
        };
        
        eAnnotations += toAnnotation("documentation", "Internal constructor.");
    };
    eOperations += internalStageConstructorOperation;
    
    self.map createCommands();
    self.map createQueries();
}

mapping inout EClass::createStageGameFacadeElements() inherits EClass::createElementsBase
    when { self.getConcreteClass().eAllSuperTypes->exists(t|t.name = "Stage") } {
    
    var baseName := self.name;
    var concreteClass := self.getConcreteClass();
    
    var actorFields := concreteClass.eReferences->select(r|r.eType.isInstanceOf("Actor"));
    actorFields->forEach(r) {
    	var reference := object EReference {
            name := r.name;
            eType := r.eType.findFacadeForRoleType();    
        };
        eStructuralFeatures += reference;
        self.eAnnotations += object GetPropertyAnnotation {
        	field := reference;
    	    getterTypeName := field.eType.name;
    	    getterOperationName := "get" + field.name.firstToUpper();
        };
    };
    
    var constructorOperation := object EOperation {
    	name := self.name;
    	eParameters += object EParameter {
    	    name := "game";
    	    eType := findInstanceOfMetaClass("MiniProgrammingWorld");
    	};
    	eAnnotations += "constructor".toMarkerAnnotation();
    	
    	eAnnotations += object ConstructorSimpleFieldInitializationAnnotation {
    		field := self.getEStructuralFeature("internal" + baseName);
    		constructorTypeName := concreteClass.name;
    	};
    	
    	eAnnotations += toAnnotation("documentation", "Initialize a new " + baseName + " and link it to its game object.");
    };
    eOperations += constructorOperation;
    
    constructorOperation.eAnnotations += constructorOperation.map toAssignParameterToFieldAnnotation("game", "game");
    
    actorFields->forEach(r) {
        constructorOperation.eAnnotations += object ConstructorSimpleFieldInitializationAnnotation {
        	field := self.getEStructuralFeature(r.name);
        	parameterInputVariablePropertyPaths += "game";
        	parameterInputVariablePropertyPaths += "internal" + baseName + "." + r.name;
        	constructorTypeName := field.eType.name;
        };
    };
    
    self.map createCommands();
    self.map createQueries();
}

mapping EOperation::toAssignParameterToFieldAnnotation(parameterName: String, fieldName: String) : ParameterToFieldAssignmentAnnotation {
    parameter := self.eParameters->any(p|p.name = parameterName);
    targetFeature := self.eContainingClass.eAllStructuralFeatures->any(f|f.name = fieldName);
}

query getCommandForOperation(operation: EOperation) : Transformation {
    return operation.eAnnotations
                   ->selectOne(a|a.source = "command")
                    .contents
                   ->first()
                    .oclAsType(Transformation);
}

query getQueryForOperation(operation: EOperation) : Query {
    return operation.eAnnotations
                   ->selectOne(a|a.source = "query")
                    .contents
                   ->first()
                    .oclAsType(Query);
}


mapping inout EClass::createCommands() {
    var gameRole := findClassForName("Game" + self.name);
    gameRole.eAllOperations[isMarkedWithAnnotation("command")]
           ->collect(o|getCommandForOperation(o))
           ->forEach(c) {
	    self.eOperations += object EOperation {
	        if (c.isInit) {
	            name := "init";
	        } else {
  	            name := c.name;
	        };
            eParameters := c.mainUnit.parameters->map toOperationParameter();
	        eAnnotations += object CommandParameterCreationAnnotation { 
	            command := c;
	            parameterMappings := c.mainUnit.parameters->map toCommandCallParameterMapping();
            };
	        eAnnotations += object CommandCallAnnotation { 
	            command := c;
	            targetRoleVariableName := "internal" + self.name;
            };
	        eAnnotations += toAnnotation("documentation", c.documentation);
	    };
    };
}

abstract mapping CommandModel::Parameter::toOperationParameterBase() : EParameter {
    name := self.name;
    eType := findClassifierForName(self.type);
    
    // facades do rely on other facade types, e.g. Hamster -> Territory instead of GameTerritory
    if (eType.isMarkedWithAnnotation("role")) {
        eType := eType.findFacadeForRoleType();
    }
}

mapping CommandModel::Parameter::toCommandCallParameterMapping() : EStringToStringMapEntry {
    key := self.name;
    value := self.name;
    var eType := findClassifierForName(self.type);
    if (eType.isMarkedWithAnnotation("role")) {
        var baseName := eType.getBaseName();
        value := value + ".internal" + baseName;
    }
}

mapping CommandModel::Parameter::toOperationParameter() : EParameter merges CommandModel::Parameter::toOperationParameterBase {}
mapping CommandModel::Parameter::toConstructorParameter() : EParameter merges CommandModel::Parameter::toOperationParameterBase {}

mapping inout EClass::createQueries() {
    var readOnlyRole := findClassForName("ReadOnly" + self.name);
    readOnlyRole.eAllOperations[isMarkedWithAnnotation("query")]
               ->collect(o|getQueryForOperation(o))
               ->forEach(q) {
	    self.eOperations += object EOperation {
	        name := q.name;
	        eType := q.eType;
            eParameters := q.parameters->map toEParameter();
            eAnnotations += object QueryCallAnnotation { 
                _query := q;
                internalRoleField := self.getEStructuralFeature("internal" + self.name).oclAsType(EReference);
            };
	        eAnnotations += toAnnotation("documentation", q.documentation);
	    };
    };
}

mapping QueryModel::Parameter::toEParameter() : EParameter {
    name := self.name;
    eType := self.eType;
}

query EClass::getConcreteClass() : EClass {
    var baseName := self.name;
    if (self.isMarkedWithAnnotation("baseName")) {
    	baseName := self.getBaseName();
    };
    return findClassifierForName("Concrete" + baseName).oclAsType(EClass);
}

query EClassifier::findFacadeForRoleType() : EClass {
	var baseName := self.getBaseName();
    return findClassForName(baseName);
};

query EClassifier::getBaseName() : String {
	return self.getAnnotationValue("baseName");
}
