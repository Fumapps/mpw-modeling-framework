import types.EmfHelpers;

modeltype ecore uses ecore('http://www.eclipse.org/emf/2002/Ecore');
	
modeltype QueryModel uses "http://www.mpw.uni-stuttgart.de/behavior/query";

/**
  *  Library used to check if a given StatementsExpression needs a helper method. It also provides a mechanism to generate a name.
  */
library StatementHelperMethodLibrary;

query StatementsExpression::needsHelperMethod() : Boolean {
    return self.statements->exists(s|s.oclIsTypeOf(IntermediaryResultStatement));
}

query Statement::hasNext() : Boolean {
    return self.next != null;
}

query StatementsExpression::getHelperMethodName() : String {
    var name := "helper";
    
    if (self.module() <> null) {
    	name := name + "_" + self.module().name;
    };
    
    self.statements[IntermediaryResultStatement]->collect(s|s.internalStatementsExpression.statements)
                                                ->flatten()
                                                ->forEach (s) {
    	switch {
    		case (s.oclIsTypeOf(ParameterUsageStatement)) {
    			name := name + "_" + s.oclAsType(ParameterUsageStatement).parameterName;
    		};
            case (s.oclIsTypeOf(FeatureStatement)) {
                name := name + "_" + s.oclAsType(FeatureStatement).feature.name;
            };
            case (s.oclIsTypeOf(GetPropertyStatement)) {
                name := name + "_" + s.oclAsType(GetPropertyStatement).propertyGetterName;
            };
            case (s.oclIsTypeOf(QueryStatement)) {
                name := name + "_" + s.oclAsType(QueryStatement)._query.name;
            };
            case (s.oclIsTypeOf(CollectionMethodStatement)) {
                name := name + "_" + s.oclAsType(CollectionMethodStatement).methodType.toString().toLower();
            };
            case (s.oclIsTypeOf(EnumLiteralStatement)) {
                name := name + "_" + s.oclAsType(EnumLiteralStatement).enumLiteral.name;
            };
            case (s.oclIsTypeOf(VariableUsageStatement)) {
                name := name + "_" + s.oclAsType(VariableUsageStatement).variableReference.variableName;
            };
    	};
    };
    return name;
}

query QueryModel::StatementsExpression::module() : QueryModel::Module {
    return self.root().oclAsType(QueryModel::Module);
}
