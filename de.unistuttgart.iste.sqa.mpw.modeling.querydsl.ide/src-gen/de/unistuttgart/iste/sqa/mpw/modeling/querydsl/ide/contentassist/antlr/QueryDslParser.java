/*
 * generated by Xtext 2.23.0
 */
package de.unistuttgart.iste.sqa.mpw.modeling.querydsl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import de.unistuttgart.iste.sqa.mpw.modeling.querydsl.ide.contentassist.antlr.internal.InternalQueryDslParser;
import de.unistuttgart.iste.sqa.mpw.modeling.querydsl.services.QueryDslGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class QueryDslParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(QueryDslGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, QueryDslGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getContextAccess().getAlternatives(), "rule__Context__Alternatives");
			builder.put(grammarAccess.getElementAccess().getAlternatives(), "rule__Element__Alternatives");
			builder.put(grammarAccess.getCommandConstraintAccess().getAlternatives(), "rule__CommandConstraint__Alternatives");
			builder.put(grammarAccess.getEqualityExpressionAccess().getOperationAlternatives_1_1_0(), "rule__EqualityExpression__OperationAlternatives_1_1_0");
			builder.put(grammarAccess.getComparisonExpressionAccess().getOpAlternatives_1_1_0(), "rule__ComparisonExpression__OpAlternatives_1_1_0");
			builder.put(grammarAccess.getPlusOrMinusExpressionAccess().getAlternatives_1_0(), "rule__PlusOrMinusExpression__Alternatives_1_0");
			builder.put(grammarAccess.getMultiplicationOrDivisionExpressionAccess().getAlternatives_1_0(), "rule__MultiplicationOrDivisionExpression__Alternatives_1_0");
			builder.put(grammarAccess.getPrimaryExpressionAccess().getAlternatives(), "rule__PrimaryExpression__Alternatives");
			builder.put(grammarAccess.getConstantExpressionAccess().getAlternatives(), "rule__ConstantExpression__Alternatives");
			builder.put(grammarAccess.getConstantExpressionAccess().getValueAlternatives_2_1_0(), "rule__ConstantExpression__ValueAlternatives_2_1_0");
			builder.put(grammarAccess.getStatementAccess().getAlternatives(), "rule__Statement__Alternatives");
			builder.put(grammarAccess.getNavigatedStatementAccess().getAlternatives(), "rule__NavigatedStatement__Alternatives");
			builder.put(grammarAccess.getMethodCallAccess().getAlternatives_1(), "rule__MethodCall__Alternatives_1");
			builder.put(grammarAccess.getCollectionMethodAccess().getAlternatives(), "rule__CollectionMethod__Alternatives");
			builder.put(grammarAccess.getSimpleCollectionMethodAccess().getMethodAlternatives_0_0(), "rule__SimpleCollectionMethod__MethodAlternatives_0_0");
			builder.put(grammarAccess.getParametrizedCollectionMethodAccess().getAlternatives(), "rule__ParametrizedCollectionMethod__Alternatives");
			builder.put(grammarAccess.getDirectionAccess().getAlternatives(), "rule__Direction__Alternatives");
			builder.put(grammarAccess.getClassContextAccess().getGroup(), "rule__ClassContext__Group__0");
			builder.put(grammarAccess.getCommandContextAccess().getGroup(), "rule__CommandContext__Group__0");
			builder.put(grammarAccess.getCommandContextAccess().getGroup_4(), "rule__CommandContext__Group_4__0");
			builder.put(grammarAccess.getQueryAccess().getGroup(), "rule__Query__Group__0");
			builder.put(grammarAccess.getQueryAccess().getGroup_4(), "rule__Query__Group_4__0");
			builder.put(grammarAccess.getQueryAccess().getGroup_6(), "rule__Query__Group_6__0");
			builder.put(grammarAccess.getPreconditionAccess().getGroup(), "rule__Precondition__Group__0");
			builder.put(grammarAccess.getPreconditionAccess().getGroup_4(), "rule__Precondition__Group_4__0");
			builder.put(grammarAccess.getPostconditionAccess().getGroup(), "rule__Postcondition__Group__0");
			builder.put(grammarAccess.getPostconditionAccess().getGroup_4(), "rule__Postcondition__Group_4__0");
			builder.put(grammarAccess.getParameterListAccess().getGroup(), "rule__ParameterList__Group__0");
			builder.put(grammarAccess.getParameterListAccess().getGroup_1(), "rule__ParameterList__Group_1__0");
			builder.put(grammarAccess.getParameterAccess().getGroup(), "rule__Parameter__Group__0");
			builder.put(grammarAccess.getInvariantAccess().getGroup(), "rule__Invariant__Group__0");
			builder.put(grammarAccess.getInvariantAccess().getGroup_4(), "rule__Invariant__Group_4__0");
			builder.put(grammarAccess.getImpliesExpressionAccess().getGroup(), "rule__ImpliesExpression__Group__0");
			builder.put(grammarAccess.getImpliesExpressionAccess().getGroup_1(), "rule__ImpliesExpression__Group_1__0");
			builder.put(grammarAccess.getOrExpressionAccess().getGroup(), "rule__OrExpression__Group__0");
			builder.put(grammarAccess.getOrExpressionAccess().getGroup_1(), "rule__OrExpression__Group_1__0");
			builder.put(grammarAccess.getAndExpressionAccess().getGroup(), "rule__AndExpression__Group__0");
			builder.put(grammarAccess.getAndExpressionAccess().getGroup_1(), "rule__AndExpression__Group_1__0");
			builder.put(grammarAccess.getEqualityExpressionAccess().getGroup(), "rule__EqualityExpression__Group__0");
			builder.put(grammarAccess.getEqualityExpressionAccess().getGroup_1(), "rule__EqualityExpression__Group_1__0");
			builder.put(grammarAccess.getComparisonExpressionAccess().getGroup(), "rule__ComparisonExpression__Group__0");
			builder.put(grammarAccess.getComparisonExpressionAccess().getGroup_1(), "rule__ComparisonExpression__Group_1__0");
			builder.put(grammarAccess.getPlusOrMinusExpressionAccess().getGroup(), "rule__PlusOrMinusExpression__Group__0");
			builder.put(grammarAccess.getPlusOrMinusExpressionAccess().getGroup_1(), "rule__PlusOrMinusExpression__Group_1__0");
			builder.put(grammarAccess.getPlusOrMinusExpressionAccess().getGroup_1_0_0(), "rule__PlusOrMinusExpression__Group_1_0_0__0");
			builder.put(grammarAccess.getPlusOrMinusExpressionAccess().getGroup_1_0_1(), "rule__PlusOrMinusExpression__Group_1_0_1__0");
			builder.put(grammarAccess.getMultiplicationOrDivisionExpressionAccess().getGroup(), "rule__MultiplicationOrDivisionExpression__Group__0");
			builder.put(grammarAccess.getMultiplicationOrDivisionExpressionAccess().getGroup_1(), "rule__MultiplicationOrDivisionExpression__Group_1__0");
			builder.put(grammarAccess.getMultiplicationOrDivisionExpressionAccess().getGroup_1_0_0(), "rule__MultiplicationOrDivisionExpression__Group_1_0_0__0");
			builder.put(grammarAccess.getMultiplicationOrDivisionExpressionAccess().getGroup_1_0_1(), "rule__MultiplicationOrDivisionExpression__Group_1_0_1__0");
			builder.put(grammarAccess.getPrimaryExpressionAccess().getGroup_0(), "rule__PrimaryExpression__Group_0__0");
			builder.put(grammarAccess.getPrimaryExpressionAccess().getGroup_1(), "rule__PrimaryExpression__Group_1__0");
			builder.put(grammarAccess.getConstantExpressionAccess().getGroup_0(), "rule__ConstantExpression__Group_0__0");
			builder.put(grammarAccess.getConstantExpressionAccess().getGroup_1(), "rule__ConstantExpression__Group_1__0");
			builder.put(grammarAccess.getConstantExpressionAccess().getGroup_2(), "rule__ConstantExpression__Group_2__0");
			builder.put(grammarAccess.getConstantExpressionAccess().getGroup_3(), "rule__ConstantExpression__Group_3__0");
			builder.put(grammarAccess.getOldValueExpressionAccess().getGroup(), "rule__OldValueExpression__Group__0");
			builder.put(grammarAccess.getPropertyPathExpressionAccess().getGroup(), "rule__PropertyPathExpression__Group__0");
			builder.put(grammarAccess.getNavigatedStatementAccess().getGroup_0(), "rule__NavigatedStatement__Group_0__0");
			builder.put(grammarAccess.getNavigatedStatementAccess().getGroup_1(), "rule__NavigatedStatement__Group_1__0");
			builder.put(grammarAccess.getNavigatedStatementAccess().getGroup_2(), "rule__NavigatedStatement__Group_2__0");
			builder.put(grammarAccess.getMethodCallAccess().getGroup(), "rule__MethodCall__Group__0");
			builder.put(grammarAccess.getMethodCallAccess().getGroup_1_0(), "rule__MethodCall__Group_1_0__0");
			builder.put(grammarAccess.getSimpleCollectionMethodAccess().getGroup(), "rule__SimpleCollectionMethod__Group__0");
			builder.put(grammarAccess.getParametrizedCollectionMethodAccess().getGroup_0(), "rule__ParametrizedCollectionMethod__Group_0__0");
			builder.put(grammarAccess.getParametrizedCollectionMethodAccess().getGroup_1(), "rule__ParametrizedCollectionMethod__Group_1__0");
			builder.put(grammarAccess.getClassContextAccess().getClassNameAssignment_1(), "rule__ClassContext__ClassNameAssignment_1");
			builder.put(grammarAccess.getClassContextAccess().getElementsAssignment_2(), "rule__ClassContext__ElementsAssignment_2");
			builder.put(grammarAccess.getCommandContextAccess().getClassNameAssignment_1(), "rule__CommandContext__ClassNameAssignment_1");
			builder.put(grammarAccess.getCommandContextAccess().getCommandNameAssignment_3(), "rule__CommandContext__CommandNameAssignment_3");
			builder.put(grammarAccess.getCommandContextAccess().getParameterListAssignment_4_1(), "rule__CommandContext__ParameterListAssignment_4_1");
			builder.put(grammarAccess.getCommandContextAccess().getElementsAssignment_5(), "rule__CommandContext__ElementsAssignment_5");
			builder.put(grammarAccess.getQueryAccess().getDocumentationAssignment_0(), "rule__Query__DocumentationAssignment_0");
			builder.put(grammarAccess.getQueryAccess().getInternalAssignment_1(), "rule__Query__InternalAssignment_1");
			builder.put(grammarAccess.getQueryAccess().getNameAssignment_3(), "rule__Query__NameAssignment_3");
			builder.put(grammarAccess.getQueryAccess().getParameterListAssignment_4_1(), "rule__Query__ParameterListAssignment_4_1");
			builder.put(grammarAccess.getQueryAccess().getExpressionsAssignment_6_0(), "rule__Query__ExpressionsAssignment_6_0");
			builder.put(grammarAccess.getPreconditionAccess().getDocumentationAssignment_0(), "rule__Precondition__DocumentationAssignment_0");
			builder.put(grammarAccess.getPreconditionAccess().getNameAssignment_2(), "rule__Precondition__NameAssignment_2");
			builder.put(grammarAccess.getPreconditionAccess().getExpressionsAssignment_4_0(), "rule__Precondition__ExpressionsAssignment_4_0");
			builder.put(grammarAccess.getPostconditionAccess().getDocumentationAssignment_0(), "rule__Postcondition__DocumentationAssignment_0");
			builder.put(grammarAccess.getPostconditionAccess().getNameAssignment_2(), "rule__Postcondition__NameAssignment_2");
			builder.put(grammarAccess.getPostconditionAccess().getExpressionsAssignment_4_0(), "rule__Postcondition__ExpressionsAssignment_4_0");
			builder.put(grammarAccess.getParameterListAccess().getParametersAssignment_0(), "rule__ParameterList__ParametersAssignment_0");
			builder.put(grammarAccess.getParameterListAccess().getParametersAssignment_1_1(), "rule__ParameterList__ParametersAssignment_1_1");
			builder.put(grammarAccess.getParameterAccess().getVariableNameAssignment_0(), "rule__Parameter__VariableNameAssignment_0");
			builder.put(grammarAccess.getParameterAccess().getTypeNameAssignment_2(), "rule__Parameter__TypeNameAssignment_2");
			builder.put(grammarAccess.getInvariantAccess().getDocumentationAssignment_0(), "rule__Invariant__DocumentationAssignment_0");
			builder.put(grammarAccess.getInvariantAccess().getNameAssignment_2(), "rule__Invariant__NameAssignment_2");
			builder.put(grammarAccess.getInvariantAccess().getExpressionsAssignment_4_0(), "rule__Invariant__ExpressionsAssignment_4_0");
			builder.put(grammarAccess.getImpliesExpressionAccess().getRightAssignment_1_2(), "rule__ImpliesExpression__RightAssignment_1_2");
			builder.put(grammarAccess.getOrExpressionAccess().getRightAssignment_1_2(), "rule__OrExpression__RightAssignment_1_2");
			builder.put(grammarAccess.getAndExpressionAccess().getRightAssignment_1_2(), "rule__AndExpression__RightAssignment_1_2");
			builder.put(grammarAccess.getEqualityExpressionAccess().getOperationAssignment_1_1(), "rule__EqualityExpression__OperationAssignment_1_1");
			builder.put(grammarAccess.getEqualityExpressionAccess().getRightAssignment_1_2(), "rule__EqualityExpression__RightAssignment_1_2");
			builder.put(grammarAccess.getComparisonExpressionAccess().getOpAssignment_1_1(), "rule__ComparisonExpression__OpAssignment_1_1");
			builder.put(grammarAccess.getComparisonExpressionAccess().getRightAssignment_1_2(), "rule__ComparisonExpression__RightAssignment_1_2");
			builder.put(grammarAccess.getPlusOrMinusExpressionAccess().getRightAssignment_1_1(), "rule__PlusOrMinusExpression__RightAssignment_1_1");
			builder.put(grammarAccess.getMultiplicationOrDivisionExpressionAccess().getRightAssignment_1_1(), "rule__MultiplicationOrDivisionExpression__RightAssignment_1_1");
			builder.put(grammarAccess.getPrimaryExpressionAccess().getExpressionAssignment_1_2(), "rule__PrimaryExpression__ExpressionAssignment_1_2");
			builder.put(grammarAccess.getConstantExpressionAccess().getValueAssignment_0_1(), "rule__ConstantExpression__ValueAssignment_0_1");
			builder.put(grammarAccess.getConstantExpressionAccess().getValueAssignment_1_1(), "rule__ConstantExpression__ValueAssignment_1_1");
			builder.put(grammarAccess.getConstantExpressionAccess().getValueAssignment_2_1(), "rule__ConstantExpression__ValueAssignment_2_1");
			builder.put(grammarAccess.getConstantExpressionAccess().getValueAssignment_3_1(), "rule__ConstantExpression__ValueAssignment_3_1");
			builder.put(grammarAccess.getOldValueExpressionAccess().getExpressionAssignment_3(), "rule__OldValueExpression__ExpressionAssignment_3");
			builder.put(grammarAccess.getPropertyPathExpressionAccess().getStatementsAssignment_1(), "rule__PropertyPathExpression__StatementsAssignment_1");
			builder.put(grammarAccess.getPropertyPathExpressionAccess().getStatementsAssignment_2(), "rule__PropertyPathExpression__StatementsAssignment_2");
			builder.put(grammarAccess.getStatementAccess().getTargetAssignment_0(), "rule__Statement__TargetAssignment_0");
			builder.put(grammarAccess.getStatementAccess().getTargetAssignment_1(), "rule__Statement__TargetAssignment_1");
			builder.put(grammarAccess.getStatementAccess().getTargetAssignment_2(), "rule__Statement__TargetAssignment_2");
			builder.put(grammarAccess.getNavigatedStatementAccess().getMethodCallAssignment_0_1(), "rule__NavigatedStatement__MethodCallAssignment_0_1");
			builder.put(grammarAccess.getNavigatedStatementAccess().getTargetAssignment_1_1(), "rule__NavigatedStatement__TargetAssignment_1_1");
			builder.put(grammarAccess.getNavigatedStatementAccess().getCollectionTargetAssignment_2_1(), "rule__NavigatedStatement__CollectionTargetAssignment_2_1");
			builder.put(grammarAccess.getMethodCallAccess().getTargetMethodAssignment_0(), "rule__MethodCall__TargetMethodAssignment_0");
			builder.put(grammarAccess.getMethodCallAccess().getParametersAssignment_1_0_1(), "rule__MethodCall__ParametersAssignment_1_0_1");
			builder.put(grammarAccess.getSimpleCollectionMethodAccess().getMethodAssignment_0(), "rule__SimpleCollectionMethod__MethodAssignment_0");
			builder.put(grammarAccess.getParametrizedCollectionMethodAccess().getTypeSelectAssignment_0_1(), "rule__ParametrizedCollectionMethod__TypeSelectAssignment_0_1");
			builder.put(grammarAccess.getParametrizedCollectionMethodAccess().getIndexExpressionAssignment_1_1(), "rule__ParametrizedCollectionMethod__IndexExpressionAssignment_1_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private QueryDslGrammarAccess grammarAccess;

	@Override
	protected InternalQueryDslParser createParser() {
		InternalQueryDslParser result = new InternalQueryDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public QueryDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(QueryDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
