module xpand.example.Generator

import org.eclipse.emf.mwe.utils.Reader
import org.eclipse.emf.mwe.utils.StandaloneSetup
import org.eclipse.emf.mwe.utils.DirectoryCleaner
import org.eclipse.xtend.typesystem.emf.EmfRegistryMetaModel
import org.eclipse.xtend.check.CheckComponent
import org.eclipse.xpand2.Generator
import org.eclipse.xpand2.output.JavaBeautifier
import org.eclipse.xtend.expression.ResourceManagerDefaultImpl

var platformUriPrefix = "platform:/resource"
var moduleBaseName = "de.unistuttgart.iste.sqa.mpw"
var modelingModuleBaseName = "${moduleBaseName}.modeling"

var generatedProjectBasePackage  = "'de.unistuttgart.hamster'"

var projectRoot  = ".."
var mpwModelProject  = "${modelingModuleBaseName}.mpw"
var commandsModelProject  = "${modelingModuleBaseName}.commands"
var queriesModelProject  = "${modelingModuleBaseName}.queries"
var transformationsProject = "${modelingModuleBaseName}.transformations"
var generatorProject = "${modelingModuleBaseName}.generator"

var targetSimulatorProject = "${moduleBaseName}.hamstersimulator.java"
var targetCoreSimulatorProject = "${targetSimulatorProject}/core"

var roleTransformationUri  = "${platformUriPrefix}/${transformationsProject}/transforms/RoleTransformation.qvto"
var commandTransformationUri  = "${platformUriPrefix}/${transformationsProject}/transforms/CommandTransformation.qvto"
var simulatorTargetSrcGen = "${projectRoot}/${targetCoreSimulatorProject}/src/main/generated"

Workflow {
	/* set up EMF for standalone execution */
	bean = StandaloneSetup { 
		platformUri="${projectRoot}"
		registerEcoreFile="${platformUriPrefix}/${transformationsProject}/model/CommandGraphTransformation.ecore"
		registerGeneratedEPackage="org.eclipse.emf.henshin.model.HenshinPackage"
	}
	
	/** instantiate metamodel */
	bean = EmfRegistryMetaModel : mm_emf { }

	bean = JavaBeautifier : formatter_java { }
	
	/* generate genmodels */
	/* component = org.eclipse.emf.mwe2.ecore.EcoreGenerator {
		genModel = "${platformUriPrefix}/${mpwModelProject}/model/mpw.genmodel"
		srcPath = "${platformUriPrefix}/${mpwModelProject}/src-gen}"
	}
	component = org.eclipse.emf.mwe2.ecore.EcoreGenerator {
		genModel = "${platformUriPrefix}/${transformationsProject}/model/transformations.genmodel"
		srcPath = "${platformUriPrefix}/${transformationsProject}/src-gen"
	} */

	/* load model and store it in slots */
	component = components.MultiEcoreReader {
		projectName = mpwModelProject
		excludeModel = "ViewModel"
		modelSlot = "entityModels"
	}
	
	component = components.QueryReader {
		projectName = queriesModelProject
		modelSlot = "queries"
	}
	
	component = components.CommandReader {
		projectName = commandsModelProject
		modelSlot = "commands"
	}
	
	component = components.QvtoTransformator {
		transformationUri = commandTransformationUri
		modelSlot = "commands"
		sourceTargetRelationship = "NEW_TARGET"
	}
	
	component = components.QvtoTransformator {
		transformationUri = roleTransformationUri
		modelSlot = "entityModels"
	}
	
	component = components.XmiWriter {
		modelSlot = "entityModels"
		fileExtension = "ecore"
	}
	
	component = components.XmiWriter {
		modelSlot = "commands"
	}

	component = components.XmiWriter {
		modelSlot = "queries"
	}
	
	/* check model */
	/*component = CheckComponent {
		metaModel = mm_emf
		checkFile = "util::Checks"
		emfAllChildrenSlot = ""
	}*/

	/** Clear output directory */
	component = DirectoryCleaner {
		directory = simulatorTargetSrcGen
		exclude = "impl"
	}

	/* generate entities */
	component = Generator {
		globalVarDef = {
			name = "module_package"
			value = generatedProjectBasePackage
		}
		globalVarDef = {
			name = "queries"
			value = "queries"
		}
		globalVarDef = {
			name = "commands"
			value = "commands"
		}
		metaModel = mm_emf
		expand = "template::EcoreEntitiesTemplate::main FOR entityModels"
		outlet = {
			path = simulatorTargetSrcGen
			overwrite = false
			postprocessor = formatter_java
			fileEncoding = "ISO-8859-1"
		}
		resourceManager = ResourceManagerDefaultImpl {
			fileEncoding = "ISO-8859-1"
		}
		
	}
	
	/* generate commands */
	component = Generator {
		globalVarDef = {
			name = "module_package"
			value = generatedProjectBasePackage
		}
		metaModel = mm_emf
		expand = "template::CommandTemplate::main FOREACH commands"
		outlet = {
			path = simulatorTargetSrcGen
			postprocessor = formatter_java
			fileEncoding = "ISO-8859-1"
		}
		resourceManager = ResourceManagerDefaultImpl {
			fileEncoding = "ISO-8859-1"
		}
	}

    /* copy framework util code */
    component = components.DirectoryCopyer {
    	sourcePath = "${projectRoot}/${generatorProject}/src-framework"
    	targetPath = simulatorTargetSrcGen
    }
}