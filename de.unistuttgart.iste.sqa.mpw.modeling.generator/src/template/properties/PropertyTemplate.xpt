«IMPORT ecore»

«EXTENSION template::GeneratorExtensions»

«DEFINE PropertyDefinitions FOR EClass»
	  «FOREACH eStructuralFeatures AS f»
	  «IF f.isObservableProperty()»
      private final «f.featureToObservableFieldType()» «f.name» = «f.featureToObservableFieldInstantiation()»;
      «ELSEIF f.derived || f.changeable»
      private «f.featureToJavaType()» «f.name»;
      «ELSEIF f.isConstructorInjectedProperty()»
      private final «f.featureToJavaType()» «f.name»;
	  «ELSEIF !f.derived»
      private final «f.featureToJavaType()» «f.name» = «f.featureToFieldInstantiation()»;
	  «ENDIF»
      «ENDFOREACH»
«ENDDEFINE»

«DEFINE ConstructorDefinition FOR EClass»
      «LET eAllStructuralFeatures.select(f|f.isConstructorInjectedProperty()) AS injectedProperties»
      «LET injectedProperties.without(eStructuralFeatures) AS injectedForParentProperties»
      public «name»(«FOREACH injectedProperties AS f SEPARATOR ", "»«f.featureToJavaType()» «f.name»«ENDFOREACH») {
      «IF injectedForParentProperties.size > 0-»
      super(«FOREACH injectedForParentProperties AS p SEPARATOR ", "»«p.name»«ENDFOREACH»);
      «ENDIF»
      «FOREACH injectedProperties.without(injectedForParentProperties) AS f»
      this.«f.name» = «f.name»;
      «ENDFOREACH»
      «FOREACH eAllStructuralFeatures.select(f|f.isStageField()) AS f»
      «"stage".setter()»(«f.name»);
      «ENDFOREACH»
      }
      «ENDLET»
      «ENDLET»
«ENDDEFINE»

«DEFINE ImplConstructorDefinition FOR EClass»
      «LET eAllStructuralFeatures.select(f|f.isConstructorInjectedProperty()) AS injectedProperties»
      public «name»Impl(«FOREACH injectedProperties AS f SEPARATOR ", "»«f.featureToJavaType()» «f.name»«ENDFOREACH») {
      «FOREACH injectedProperties AS f»
      super(«FOREACH injectedProperties AS p SEPARATOR ", "»«p.name»«ENDFOREACH»);
      «ENDFOREACH»
      }
      «ENDLET»
«ENDDEFINE»

«DEFINE GetPropertyValueDefinitions FOR EClass»
	  «FOREACH eStructuralFeatures AS f»
	  «IF f.hasPropertyGetterOperation()-»
	  @Override
	  «ENDIF-»
	  public «f.featureToJavaType()» «f.name.getter()»() {
  	    «IF f.isObservableProperty()-»
	  	return this.«f.name».get();
        «ELSE-»
	  	return this.«f.name»;
	    «ENDIF-»
	  }
      «ENDFOREACH»
«ENDDEFINE»

«DEFINE SetPropertyValueDefinitions FOR EClass»
    «FOREACH eStructuralFeatures.select(e|e.changeable) AS f»
	«f.modifierVisibility()» void «f.adderOrSetter()»(«f.featureToSingleJavaType()» «f.modifierParameterName()») {
	     «IF f.isReference() && f.isCollection()-»
	         «EXPAND MultiReferenceAdderForFeatureDefinition FOR (EReference)f»
	     «ELSE-»
	         «EXPAND SimpleSetterForFeatureDefinition FOR f»
	     «ENDIF-»
	 }
	 «IF f.isCollection()-»
	 «f.modifierVisibility()» void «f.name.remover()»(«f.featureToSingleJavaType()» «f.modifierParameterName()») {
	     «IF f.isReference()-»
	         «EXPAND MultiReferenceRemoverForFeatureDefinition FOR (EReference)f»
	     «ENDIF-»
	 }
	 «ENDIF-»
    «ENDFOREACH»
«ENDDEFINE»

«DEFINE MultiReferenceAdderForFeatureDefinition FOR EReference»
    «IF eOpposite != null-»
        if («modifierParameterName()».«eOpposite.name.getter()»() != this) {
    «ENDIF-»
          
    this.«name».add(«modifierParameterName()»);
          
    «IF eOpposite != null-»
        «EXPAND CallSetterForOppositeDefinition FOR (EReference)this-»
        }
    «ENDIF-»
«ENDDEFINE»

«DEFINE MultiReferenceRemoverForFeatureDefinition FOR EReference»
    «IF eOpposite != null-»
        if («modifierParameterName()».«eOpposite.name.getter()»() == this) {
    «ENDIF-»
          
    this.«name».remove(«modifierParameterName()»);
          
    «IF eOpposite != null-»
            «modifierParameterName()».«eOpposite.name.setter()»(null);
        }
    «ENDIF-»
«ENDDEFINE»

«DEFINE SimpleSetterForFeatureDefinition FOR EStructuralFeature»
    «IF isReference()-»
        var «previousFieldName()» = this.«name.getter()»();
        if («previousFieldName()» != «name») {
    «ENDIF-»
          
    «IF isObservableProperty()-»
        this.«name».set(«name»);
    «ELSE-»
        this.«name» = «name»;
    «ENDIF-»
          
    «IF isReference()-»
        «EXPAND CallSetterForOppositeDefinition FOR (EReference)this-»
        «EXPAND CallSetterForUnsetOppositeDefinition FOR (EReference)this-»
        }
    «ENDIF-»
«ENDDEFINE»

«DEFINE CallSetterForOppositeDefinition FOR EReference»
      «IF eOpposite != null-»
      if («modifierParameterName()» != null) {
          «modifierParameterName()».«eOpposite.adderOrSetter()»(this);
      }
      «ENDIF-»
«ENDDEFINE»

«DEFINE CallSetterForUnsetOppositeDefinition FOR EReference»
      «IF eOpposite != null-»
      if («previousFieldName()» != null) {
	      «IF eOpposite.isCollection()-»
          «previousFieldName()».«eOpposite.name.remover()»(this);
	      «ELSE-»
          «previousFieldName()».«eOpposite.name.setter()»(null);
	      «ENDIF-»
      }
      «ENDIF-»
«ENDDEFINE»

«DEFINE GetPropertyDefinitions FOR EClass»
	  «FOREACH eStructuralFeatures.select(f|f.isObservableProperty()) AS f»
	  «IF f.hasPropertyGetterOperation()-»
	  @Override
	  «ENDIF-»
	  public «f.featureToObservableReadonlyType()» «f.name»Property() {
	  	return this.«f.name».getReadOnlyProperty();
	  }
      «ENDFOREACH»
«ENDDEFINE»