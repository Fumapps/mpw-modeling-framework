import ecore;

extension template::operations::OperationGeneratorExtensions;
extension template::types::MetaModelGeneratorExtensions;

/*
 * Extensions related to EMF Metamodel types.
 */

getter(String this) :
	"get" + this.toFirstUpper();
	
setter(String this) :
	"set" + this.toFirstUpper();
	
adder(String this) :
    "addTo" + this.toFirstUpper();
    
remover(String this) :
    "removeFrom" + this.toFirstUpper();

adderOrSetter(EStructuralFeature this) :
    if (isCollection()) then name.adder() else name.setter();

modifierParameterName(EStructuralFeature this) :
    if (isCollection()) then name.toSingleName() else name;

previousFieldName(EStructuralFeature this) :
    "previous" + modifierParameterName().toFirstUpper();
    
modifierVisibility(EStructuralFeature this) :
    if (derived) then "protected" else "public";
    
private toSingleName(String this) : if (endsWith("s")) then subString(0, length-1) else this;
	
isCollection(ETypedElement this) :
    upperBound == -1;
    
isReference(EStructuralFeature this) :
    EReference.isInstance(this);
	
isConstructorInjectedProperty(EStructuralFeature this) :
    !this.changeable && !this.isContainment() && !this.derived;

// e.g. Territory is a concrete references for derviced "stage" reference.
isStageField(EStructuralFeature this) :
    EClass.isInstance(this.eType) && ((EClass)this.eType).eSuperTypes.exists(t|t.name == "Stage");
    
isContainment(EStructuralFeature this) :
    EReference.isInstance(this) && ((EReference)this).containment;
    
toJavaType(String this) :
	if (this == "EInt") then "int"
	else if (this == "EBoolean") then "boolean"
	else if (this == "EString") then "String"
	else if (this == "EObject") then "Object"
	else this;
	
isBuiltInType(EClassifier this) :
    isPrimitive() || this.name == "Object";

isPrimitive(EClassifier this) :
    (this.name == "EInt" || this.name == "EBoolean" || this.name == "EString");

featureToSingleJavaType(EStructuralFeature this) : this.eType.name.toJavaType();
featureToJavaType(EStructuralFeature this) : elementToJavaType();
operationToJavaType(EOperation this) : elementToJavaType();
	
private elementToJavaType(ETypedElement this) :
    if (this.eType == null) then "void" 
	else if (this.upperBound == -1) then "List<" + this.eType.name.toJavaType() + ">"
	else this.eType.name.toJavaType();

featureToFieldInstantiation(EStructuralFeature this) :
	if (this.upperBound == -1) then "new ArrayList<>()"
	else if (this.eType.needsImplSubclass()) then "new " + this.eType.ePackage.toJavaPackageName() + ".impl." + this.eType.name + "Impl()"
	else "new " + this.eType.name.toUnboxedJavaTypeName() + "()";
	
toUnboxedJavaTypeName(String this) :
	if (this == "EInt") then "Integer"
	else if (this == "EBoolean") then "Boolean"
	else if (this == "EString") then "String"
	else if (this == "EObject") then "Object"
	else this;
	
defaultValueOf(EStructuralFeature f) :
    if (f.eType == "EInt") then "0"
	else if (f.eType == "EBoolean") then "false"
	else if (f.defaultValueLiteral != null) then f.defaultValueLiteral
	else null;
    
List[EClassifier] getUsedTypes(EOperation this) :
    this.eParameters.collect(p|p.eType).union({this.eType}.reject(r|r == null));
    
toJavaDoc(String this) :
    if (length > 0) then 
        "/** " + this + " */"
    else "";
