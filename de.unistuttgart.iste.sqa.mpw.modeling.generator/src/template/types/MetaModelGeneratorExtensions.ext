import ecore;

extension template::operations::OperationGeneratorExtensions;
extension template::util::GlobalsGeneratorExtensions;
extension util::Extensions;

/*
 * Extensions related to the MPW Metamodel types.
 */

isStereotype(EClassifier this) :
    EClass.isInstance(this) && ((EClass)this).eSuperTypes.exists(t|t.name == "ViewStereotype");

needsImplSubclass(EClassifier this) :
    let eClass = (EClass)this :
	EClass.isInstance(this) && !isViewModelType() && eClass.getManualImplementedOperations().size > 0 && !eClass.abstract;

getManualImplementedOperations(EClass this) :
    eAllOperations.reject(o|o.isGenerated());

private isGenerated(EOperation this) :
    isCommand() || isQuery() || isPropertyGetter();

isViewModelType(EClassifier this) :
    EClass.isInstance(this) && ((EClass)this).eSuperTypes.exists(t|t.name == "ViewModel");

toInheritance(EClass this) :
    let filteredExtends = eSuperTypes.typeSelect(EClass)
    	.reject(e|e.interface) :
    let filteredInterfaces = eSuperTypes.typeSelect(EClass)
        .reject(e|e.isStereotype())
    	.select(e|e.interface) :
    if (filteredExtends.size > 0 && filteredInterfaces.size > 0) then "extends " + filteredExtends.get(0).name + " implements " + filteredInterfaces.collect(i|i.name).toString(", ")
    else if (filteredExtends.size > 0) then "extends " + filteredExtends.get(0).name
    else if (interface && filteredInterfaces.size > 0) then "extends " + filteredInterfaces.collect(i|i.name).toString(", ")
    else if (filteredInterfaces.size > 0) then "implements " + filteredInterfaces.collect(i|i.name).toString(", ")
    else "";

toJavaPackagePath(EPackage this) :
    this.toJavaPackageName().replaceAll("\\.", "/");

toJavaPackageName(EPackage this) :
    getModulePackage() + "." + this.name;
