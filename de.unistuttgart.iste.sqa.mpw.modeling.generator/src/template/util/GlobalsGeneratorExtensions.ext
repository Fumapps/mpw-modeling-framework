import ecore;
import command;
import querydsl;

String getModulePackage() : GLOBALVAR module_package;

List[Model] getQueriesForType(EClass class) : 
    getQueries()
    .select(q|q.isForClass(class.name));

Model getQueryForOperation(EOperation operation) : 
    getQueries()
    .selectFirst(q|q.^context.name == operation.name && q.isForClass(operation.eContainingClass.name));
    
List[Model] getPreconditionsForCommand(Transformation transformation) : 
    getPreconditions()
    .select(q|q.isForClass(transformation.targetClass.name) && q.^context.name == transformation.name);
    
private isForClass(Model this, String className) :
    ^context.className == className.replaceAll("ReadOnly|Concrete", "");

List[Model] getQueries() : getQueriesVar().select(q|q.^context.kind == ContextKind::QUERY);
List[Model] getPreconditions() : getQueriesVar().select(q|q.^context.kind == ContextKind::PRE);
private List[Model] getQueriesVar() : GLOBALVAR queries;

List[String] getCommandsForType(EClass class) : 
    getCommands()
    .collect(c|c.roleName.toFirstUpper() + c.targetClass.name)
    .select(n|n == class.name);

private List[Transformation] getCommands() : GLOBALVAR commands;
