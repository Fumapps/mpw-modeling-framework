import commandBehavior;
import ecore;

extension template::util::GlobalsGeneratorExtensions;
extension template::util::EmfGeneratorExtensions;

getCommandJavaPackagePath(Transformation this) :
  this.getCommandJavaPackageName().replaceAll("\\.", "/");

getCommandJavaPackageName(Transformation this) :
  getModulePackage() + ".commands";

getConcreteName(EClass this) : "Concrete" + name;

getConcreteTypeName(InstanceCondition this) :
  let transformation = (Transformation)eRootContainer : 
  if (transformation.targetClass.name == this.typeName) then "Concrete" + this.typeName
  else this.typeName;

getVisibility(Unit this) : 
  if (name == "execute") then "public" else "private";
  
getVariableNameForFindReference(ManyReferenceCondition this) :
  if (isPolymorphic()) then target.variableName + this.type.eType.name
  else target.variableName;
  
isPolymorphic(ManyReferenceCondition this) :
  this.type.eType.name != this.target.typeName;
    
commandSetter() : "commandStack.executeSetProperty";
    
commandAdder() : "commandStack.executeAddReference";
    
commandRemover() : "commandStack.executeRemoveReference";
