«IMPORT ecore»
«IMPORT commandBehavior»
«IMPORT queryBehavior»
«IMPORT generationAnnotations»

«EXTENSION template::GeneratorExtensions»

«DEFINE main FOR EPackage»
    «EXPAND JavaClass FOREACH this.eClassifiers.typeSelect(EClass).reject(c|c.interface)»
«ENDDEFINE»

«DEFINE JavaClass FOR EClass-»
    «FILE "generated/" + this.ePackage.toJavaPackagePath() + "/" + name + ".java"»package «this.ePackage.toJavaPackageName()»;
    
    import de.unistuttgart.hamster.mpw.*;
    import de.unistuttgart.hamster.commands.*;
    import de.unistuttgart.hamster.command.*;
    «EXPAND ImportTypeGenerationAnnotation FOREACH eAnnotations.typeSelect(ImportTypeAnnotation)»
    
    public class «name» {
        «FOREACH eStructuralFeatures AS f-»
            private «f.featureToJavaType()» «f.name»;
        «ENDFOREACH-»
        
        «FOREACH eOperations AS o-»
		    «REM»TODO JML«constraints.toJml()»«ENDREM-»
		    «o.getAnnotationValue("documentation").toJavaDoc()»
            public «o.operationToJavaType()» «o.name» («FOREACH o.eParameters AS p SEPARATOR ", "»«p.eType.name.toJavaType()» «p.name»«ENDFOREACH») {
            «EXPAND GenerationAnnotation FOREACH o.eAnnotations-»
            }
            
        «ENDFOREACH»
        «EXPAND GenerationAnnotation FOREACH eAnnotations»
    }
    «ENDFILE»
«ENDDEFINE»

«DEFINE GenerationAnnotation FOR EAnnotation»«ENDDEFINE-»

«DEFINE GenerationAnnotation FOR CommandCallAnnotation-»
    var parameters = new «command.name.toFirstUpper()»CommandParameters();
    parameters.commandStack = game.getCommandStack();
    «FOREACH parameterMappings AS mapping-»
         parameters.«mapping.key» = «mapping.value.toPropertyGetters()»; 
    «ENDFOREACH-»
    internalHamster.«command.name»(parameters);
«ENDDEFINE»

«DEFINE GenerationAnnotation FOR QueryCallAnnotation-»
    return «internalRoleField.name».«query.name»(); 
«ENDDEFINE»

«DEFINE GenerationAnnotation FOR ParameterToFieldAssignmentAnnotation-»
    this.«targetFeature.name» = «parameter.name» ;
«ENDDEFINE»

«DEFINE GenerationAnnotation FOR ConstructorSimpleFieldInitializationAnnotation-»
    this.«field.name» = new «constructorTypeName»(«parameterInputVariablePropertyPaths.collect(path|path.toPropertyGetters()).toString(", ")»);
«ENDDEFINE»

«DEFINE GenerationAnnotation FOR PropertyPathFieldAssignmentAnnotation-»
    this.«targetFeature.name» = «propertyPath.toPropertyGetters()»;
«ENDDEFINE»

«DEFINE GenerationAnnotation FOR GetPropertyAnnotation-»
    «getAnnotationValue("documentation").toJavaDoc()»
    public «field.featureToJavaType()» «field.name.getter()»() {
        return this.«field.name»;
    }
    
«ENDDEFINE»

«DEFINE GenerationAnnotation FOR MethodCallAnnotation-»
    «variableName».«methodName»(«parameterInputVariablePropertyPaths.collect(path|path.toPropertyGetters()).toString(", ")»);
«ENDDEFINE»

«DEFINE GenerationAnnotation FOR PropertyPathReturnAnnotation-»
    return «propertyPath.toPropertyGetters()»;
«ENDDEFINE»

«DEFINE ImportTypeGenerationAnnotation FOR ImportTypeAnnotation-»
    import «getModulePackage()».«relativeQualifiedTypeName»;
«ENDDEFINE»
