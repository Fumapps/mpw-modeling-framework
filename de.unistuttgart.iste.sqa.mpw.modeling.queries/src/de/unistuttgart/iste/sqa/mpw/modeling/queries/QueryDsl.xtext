grammar de.unistuttgart.iste.sqa.mpw.modeling.queries.QueryDsl with org.eclipse.xtext.common.Terminals

generate querydsl "http://www.mpw.uni-stuttgart.de/querydsl"

Model:
	(documentation=ModelDocumentation)? (context=Context) (expressions+=Expression)+ ';';
	
ModelDocumentation:
    DOCUMENTATION
;
	
Expression:
	ImpliesExpression
;

ImpliesExpression returns Expression:
	OrExpression ({ImpliesExpression.left=current} 'implies' right=OrExpression)*
;

OrExpression returns Expression:
	AndExpression ({OrExpression.left=current} 'or' right=AndExpression)*
;

AndExpression returns Expression:
	EqualityExpression ({AndExpression.left=current} 'and' right=EqualityExpression)*
;

EqualityExpression returns Expression:
	PrimaryExpression ({EqualityExpression.left=current} operation=('='|'<>') right=PrimaryExpression)*
;

PrimaryExpression returns Expression:
    '(' Expression ')' | {Not} "!" expression=PrimaryExpression | PropertyPathExpression
;

PropertyPathExpression returns Expression:
    statements+=Statement statements+=(NavigatedStatement)*;
    
Statement:
	target='self' | target='null' | target=Direction | target=ID;

NavigatedStatement returns Statement:
    ('.' target=IdBracket) | ('->' collectionTarget=CollectionMethod);
    
CollectionMethod:
	SimpleCollectionMethod | ParametrizedCollectionMethod;
    
SimpleCollectionMethod:
	method=('notEmpty' | 'isEmpty' ) '()';
    
ParametrizedCollectionMethod:
	('typeSelect(' typeSelect=ID ')');
	
Context:
	'context' className=ID kind=ContextKind name=ID ':';
	
enum ContextKind:
    QUERY = 'query' | PRE = 'precondition' | POST = 'postcondition' | INV = 'invariant';
    
Direction:
	('EAST' | 'WEST' | 'SOUTH' | 'NORTH');
	
IdBracket: ID '()'?;

terminal DOCUMENTATION : '/**' -> '*/' ;
@Override 
terminal ML_COMMENT : '/*' (!'*') -> '*/' ;
@Override 
terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')? ;
