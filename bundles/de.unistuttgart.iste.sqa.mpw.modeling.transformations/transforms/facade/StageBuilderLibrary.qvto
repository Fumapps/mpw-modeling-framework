import facade.gamefacade.GameFacadeElementsBaseLibrary;
import util.BasicHelpers;

modeltype Ecore uses ecore('http://www.eclipse.org/emf/2002/Ecore');
modeltype CommandModel uses 'http://www.mpw.uni-stuttgart.de/behavior/command';
modeltype QueryModel uses 'http://www.mpw.uni-stuttgart.de/behavior/query';
modeltype GenerationAnnotations uses 'http://www.mpw.uni-stuttgart.de/generation/annotations';

/**
  *  Library used for the GenerationClassesTransformation which handles the creation of the Stage-Builder classes for editor roles.
  *
  *  The Stage-Builder is used to have a fluent API to build stages. For the Hamstersimulator this will generate the
  *  TerritoryBuilder class which provides the initialization and filling of Territory-instances.
  */
library StageBuilderLibrary;

mapping EClass::createBuilderClass() : EClass
    when { self.getConcreteClass().eAllSuperTypes->exists(t|t.name = "Stage") } {
    name := self.getBaseName() + "Builder";
    eAnnotations += toAnnotation("role", "editor");
    eAnnotations += "facade".toMarkerAnnotation();
    eAnnotations += toAnnotation("baseName", self.getBaseName());
    
    eAnnotations += object ImportTypeAnnotation {
        relativeQualifiedTypeName := "commands." + self.getBaseName().toLowerCase() + ".*";
    };
    
    result.map createFields();
    result.map createConstructor();
    result.eOperations += self.eAllOperations[isMarkedWithAnnotation("command")]->collect(o|getCommandForOperation(o))->map toBuilderOperation(result);
    result.eOperations += result.eOperations[eParameters->exists(p|p.name = "location" and p.eType.name = "Location")]->map cloneSimplifiedBuilderOperation();
}

abstract mapping inout EClass::createFields() {
    var baseName := self.getBaseName();
    
    var internalEditorRoleField := object EReference {
        name := baseName.firstToLower();
        eType := findClassifierForName("Editor" + self.getBaseName());
        eAnnotations += "sharedOwnership".toMarkerAnnotation(); // for C++: simplifies generation code since it is symmetric to Game-Facade
    };
    eStructuralFeatures += internalEditorRoleField;
    
    self.eStructuralFeatures += object EReference {
        name := "game";
        eType := findInstanceOfMetaClass("MiniProgrammingWorld");
    };
}

abstract mapping inout EClass::createConstructor() {
    var baseName := self.getBaseName();

    var constructorOperation := object EOperation {
        name := self.name;
        
        var gameParameter := object EParameter {
            name := "game";
            eType := findInstanceOfMetaClass("MiniProgrammingWorld");
        };
        eParameters += gameParameter;
        
        eAnnotations += "constructor".toMarkerAnnotation();
        
        eAnnotations += object ParameterToFieldAssignmentAnnotation {
            field := self.getEStructuralFeature("game");
            parameter := gameParameter;
        };
        
        eAnnotations += object ExpressionFieldAssignmentAnnotation {
            field := self.getEStructuralFeature(baseName.firstToLower());
            expression := createInternalEditorExpression();
        };
        
        eAnnotations += toAnnotation("documentation", "Creates a new " + self.name + " object which then can be used to defined the given " + baseName + ".");
    };
    eOperations += constructorOperation;
    
}

query EClass::createInternalEditorExpression() : Expression {
    var gameStatement := object ElementByNameUsageStatement {
        elementName := "game";
        type := findInstanceOfMetaClass("MiniProgrammingWorld");
    };
    var stageStatement := object FeatureStatement {
        feature := gameStatement.type.getFeatureByName(self.getBaseName().firstToLower());
        type := findClassForName(self.getBaseName()); // the feature's type will be later changed to facade-stage type by GenerationClassesTransformation::useFacades
    };
    var getInternalEditorStatement := object GetPropertyStatement { 
        propertyGetterName := "internalEditor".getter() + self.getBaseName();
        type := findClassForName("Editor" + self.getBaseName());
    };
    return createStatementsExpression(List{gameStatement, stageStatement, getInternalEditorStatement});
}

mapping Transformation::toBuilderOperation(parentBuilderClass: EClass) : EOperation {
    name := self.name;
    eType := parentBuilderClass;
    eAnnotations += "fluent".toMarkerAnnotation(); // mark that this is a fluent API
    
    eParameters := self.mainUnit.parameters->map toOperationParameter();
    eAnnotations += toAnnotation("documentation", self.documentation);
    
    eAnnotations += object CommandParameterCreationAnnotation { 
        command := self;
        parameterMappings := self.mainUnit.parameters->map toCommandCallParameterMapping();
    };
    
    eAnnotations += object CommandCallAnnotation { 
        command := self;
        targetRoleVariableName := parentBuilderClass.getBaseName().firstToLower();
    };
    
    eAnnotations += object ReturnAnnotation {
        expression := createSelfExpression("this", parentBuilderClass);
    };
}

mapping EOperation::cloneSimplifiedBuilderOperation() : EOperation {
    name := self.name;
    eType := self.eType;
    
    var intType := EInt.oclAsType(EClassifier);
    
    self.eParameters->forEach(p) {
        if (p.name = "location") {
            eParameters += object EParameter {
                name := "locationX";
                eType := intType;
            };
            eParameters += object EParameter {
                name := "locationY";
                eType := intType;
            };
        } else {
            eParameters += p.deepclone();
        }
    };
    
    eAnnotations += object VariableObjectConstructionAnnotation {
        variableName := "location";
        parameterInputVariableExpressions += createPathExpression("locationX", intType);
        parameterInputVariableExpressions += createPathExpression("locationY", intType);
        constructorType := findClassifierForName("Location");
    };
    
    eAnnotations += self.eAnnotations.deepclone();
}
