import facade.gamefacade.GameFacadeElementsBaseLibrary;
import util.ExpressionHelperLibrary;

modeltype Ecore uses ecore('http://www.eclipse.org/emf/2002/Ecore');
modeltype QueryModel uses 'http://www.mpw.uni-stuttgart.de/behavior/query';
modeltype GenerationAnnotations uses 'http://www.mpw.uni-stuttgart.de/generation/annotations';

/**
  *  Library used for the GameFacadeElementsLibrary which handles the creation of the game role facade classes for Actors.
  *
  *  E.g. for the Hamstersimulator this creates the 'Hamster' client API class which provide a method for each game command
  *  and each query. It then simply delegates to its internal role instance, e.g. the ConcreteHamster which implements the
  *  GameHamster role interface.
  */
library ActorGameFacadeElementsLibrary;

property intType = EInt.oclAsType(EClassifier);
property stringType = EString.oclAsType(EClassifier);

property baseName: String;
property concreteClass: EClass;

/**
 * Mapping: create actor game facade fields
 */
mapping inout EClass::createActorGameFacadeFields() inherits EClass::createFieldsBase
    when { self.getConcreteClass().isInstanceOf("Actor") } {
}

/**
 * Mapping: create actor game facade elements
 */
mapping inout EClass::createActorGameFacadeElements() inherits EClass::createElementsBase
    when { self.getConcreteClass().isInstanceOf("Actor") } {
    
    baseName := self.name;
    concreteClass := self.getConcreteClass();
    
    eOperations += createConstructorOperation();
    
    var initCommand := concreteClass.findInitCommandOperation();
    if (initCommand != null) {
        eOperations += createConstructorWithParamsOperation(initCommand);
    };
    
    eOperations += createInternalStageConstructorOperation();
    
    self.map createCommands();
    self.map createQueries();
    
    self.map addInputInterfaceOperation();
}

helper EClass::createConstructorOperation() : EOperation {
    return object EOperation {
        name := self.name;
        eAnnotations += "constructor".toMarkerAnnotation();
        
        eAnnotations += object ConstructorSimpleFieldInitializationAnnotation {
            field := self.getEStructuralFeature("internal" + baseName);
            constructorTypeName := concreteClass.name;
        };
        
        eAnnotations += toAnnotation("documentation", "Create a new " + baseName + " object without initializing it.");
    };
}

query EClass::findInitCommandOperation() : EOperation {
    return self.eAllOperations->any(o|o.isMarkedWithAnnotation("command") and getCommandForOperation(o).isInit);
}

/*
 * Creates a constructor which is used by the relating stage, e.g. to initialize a "default hamster"
 */
helper EClass::createConstructorWithParamsOperation(initCommand: EOperation) : EOperation {
    return object EOperation {
        name := self.name;
        eParameters += getCommandForOperation(initCommand).mainUnit.parameters->map toConstructorParameter();
        eAnnotations += "constructor".toMarkerAnnotation();
        
        eAnnotations += object ConstructorSimpleFieldInitializationAnnotation {
            field := self.getEStructuralFeature("internal" + baseName);
            constructorTypeName := concreteClass.name;
        };
    
        eAnnotations += object MethodCallAnnotation {
            variableName := "this";
            methodName := "init";
            parameterInputVariableExpressions += eParameters->map createParameterExpression();
            closingStatement := true;
        };
        
        eAnnotations += toAnnotation("documentation", "Create a new " + baseName + " object by initializing it with the relating init() method.");
    };
}

mapping EParameter::createParameterExpression() : StatementsExpression {
    statements += object ElementByNameUsageStatement {
        elementName := self.name;
        type := self.eType;
    };
    type := self.eType;
}

helper EClass::createInternalStageConstructorOperation() : EOperation {
    var mpwClass := findInstanceOfMetaClass("MiniProgrammingWorld");
    return object EOperation {
        name := self.name;
        eAnnotations += "constructor".toMarkerAnnotation();
        
        var mpwParameter := object EParameter {
            name := "game";
            eType := mpwClass;
        };
        eParameters += mpwParameter;
        
        var internalActorParameter := object EParameter {
            name := "internal" + baseName;
            eType := findClassifierForName("Concrete" + baseName);
        };
        eParameters += internalActorParameter;
        
        eAnnotations += object ParameterToFieldAssignmentAnnotation {
            field := self.getEStructuralFeature("internal" + baseName);
            parameter := internalActorParameter;
        };
        eAnnotations += object ParameterToFieldAssignmentAnnotation {
            field := self.getEStructuralFeature("game");
            parameter := mpwParameter;
        };
        
        eAnnotations += toAnnotation("documentation", "Internal constructor.");
    };
}

/**
 * Mapping: create input interfaces
 */
mapping inout EClass::addInputInterfaceOperation() {
    eOperations += createReadIntOperation();
    eOperations += createReadStringOperation();
}

helper EClass::createReadIntOperation() : EOperation {
    return object EOperation {
        name := "readNumber";
        eParameters += object EParameter {
            name := "message";
            eType := stringType;    
        };
        eType := intType;
        
        eAnnotations += self.createGameInterfaceVariableAnnotation();
        
        eAnnotations += object VariableDefinitionAnnotation {
            variableName := "result";
            variableTypeName := intType.name;
            rhs := object MethodCallAnnotation {
                variableName := "gameInterface";
                methodName := "readInteger";
                parameterInputVariableExpressions += createPathExpression("message", stringType);
            };
        };
        eAnnotations += object ReturnAnnotation {
            expression := createPathExpression("result", intType);
        };
        eAnnotations += toAnnotation("documentation", "Read a number from the simulator UI for further use.");
    };
}

helper EClass::createReadStringOperation() : EOperation {
    return object EOperation {
        name := "readString";
        var messageParameter := object EParameter {
            name := "message";
            eType := stringType;    
        };
        eParameters += messageParameter;
        eType := stringType;
        
        eAnnotations += self.createGameInterfaceVariableAnnotation();
        
        eAnnotations += object VariableDefinitionAnnotation {
            variableName := "result";
            variableTypeName := stringType.name;
            rhs := object MethodCallAnnotation {
                variableName := "gameInterface";
                methodName := "readString";
                parameterInputVariableExpressions += createPathExpression(messageParameter);
            };
        };
        eAnnotations += object ReturnAnnotation {
            expression := createPathExpression("result", stringType);
        };
        eAnnotations += toAnnotation("documentation", "Read a string from the simulator UI for further use.");
    };
}

helper EClass::createGameInterfaceVariableAnnotation() : VariableDefinitionAnnotation {
    return object VariableDefinitionAnnotation {
        variableName := "gameInterface";
        variableTypeName := "UserInputInferface";
        rhs := object ExpressionAnnotation {
            expression := createPathExpression(self.getEStructuralFeature("game"), "userInputInterface");
        };
    };
}

