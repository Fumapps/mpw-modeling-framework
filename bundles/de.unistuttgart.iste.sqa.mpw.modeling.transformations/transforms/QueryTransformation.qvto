import queries.ExpressionTransformation;

modeltype ecore uses ecore('http://www.eclipse.org/emf/2002/Ecore');
    
modeltype BaseTypes uses "http://www.mpw.uni-stuttgart.de/behavior/basetypes";
modeltype Input uses "http://www.mpw.uni-stuttgart.de/transformation/inputs";
modeltype QueryInput uses "http://www.mpw.uni-stuttgart.de/querydsl";
modeltype QueryModel uses "http://www.mpw.uni-stuttgart.de/behavior/query";

/**
  *  Transformation which transforms QueryDSL models into the more generation friendly QueryBehavior models.
  *
  *  The transformation is splitted into libraries 'queries.ExpressionTransformation' and 'queries.StatementTransformation'.
  */
transformation TransformQueryDsl2Query(in inModel: QueryInput, out outModel: QueryModel);

// Note the current element name for usage in assertion logs
property currentDebugElementName: String;

main() {
    inModel.rootObjects()[Input::QueryInputs]->map toQueryModel();
}

mapping Input::QueryInputs::toQueryModel() : QueryModel::Module {
    name := "queries";
    elements := self.models->collect(subobjectsOfKind(QueryInput::Element))->flatten()->sortElements()->map toElement();
}

helper Sequence(QueryInput::Element)::sortElements(): Sequence(Element) {
    return self->sortedBy(e|e.toSortPriority());
}

query QueryInput::Element::toSortPriority() : Integer {
    if (self.allSubobjectsOfType(QueryInput::Statement)->select(s|s.isBasedOnQuery())->isEmpty()) {
        return 0;
    };
    return 1;
}

abstract mapping QueryInput::Element::toElement() : QueryModel::ExpressionalElement;

abstract mapping QueryInput::Element::toElementBase() : QueryModel::ExpressionalElement {
    init {
        self.determineDebugElementName();
        if (self.name != "dummy") { // there are ad-hoc queries embedded e.g. in commands, skip their output
            log("transforming " + self.metaClassName() + ": " + currentDebugElementName);
        };
        result.documentation := self.documentation.trimMarkers();
        result.contextClass := self.context().className.map toContextClass();
        result.mainExpression := self.expressions->first().map toExpression();
    }
}

helper QueryInput::Element::determineDebugElementName() {
	currentDebugElementName := self.context().className;
	if (self.context().oclIsKindOf(CommandContext)) {
		currentDebugElementName := currentDebugElementName + "::" + self.context().oclAsType(CommandContext).commandName;
	};
    if (self.name != null) {
    	currentDebugElementName := currentDebugElementName + "::" + self.name;
    };
}

helper String::trimMarkers() : String {
    if (self.size() >= 5 and self.startsWith("/**") and self.endsWith("*/")) {
        return self.substring(4, self.size()-2).trim();
    };
    return self;
}

mapping QueryInput::Query::toElement() : QueryModel::Query inherits QueryInput::Element::toElementBase {
    name := self.name;
    type := result.mainExpression.type;
    isCollection := result.mainExpression.isCollection;
    isOptional := result.mainExpression.isOptional;
    
    internal := self.internal;
    defaultValueLiteral := result.type.defaultValue.toString();
    if (self.parameterList != null) {
        parameters := self.parameterList.parameters->map toParameter();
    };
}

mapping QueryInput::Parameter::toParameter() : BaseTypes::Parameter {
    name := self.variableName;
    type := findClassifierForName(self.typeName);
}

mapping QueryInput::CommandConstraint::toCommandConstraintBase() : QueryModel::CommandConstraint inherits QueryInput::Element::toElementBase {
    assert fatal (not result.contextClass.eAllSuperTypes->exists(t|t.name = 'ValueType')) with log(currentDebugElementName + ': given type (' + result.contextClass.name + ') must not be a value type');
    if (self.name != null) {
        result.name := self.name;
    } else {
        var commandContext := self.commandContext();
        result.name := commandContext.className + "_" + commandContext.commandName + "_" + self.metaClassName();
    }
}

mapping QueryInput::Precondition::toElement() : QueryModel::Precondition inherits QueryInput::CommandConstraint::toCommandConstraintBase {
    commandName := self.commandContext().commandName;
}

mapping QueryInput::Postcondition::toElement() : QueryModel::Postcondition merges QueryInput::CommandConstraint::toCommandConstraintBase {
    oldValueVariableExpressions := self.allSubobjectsOfType(OldValueExpression).map toVariableExpression();
    commandName := self.commandContext().commandName;
}

mapping QueryInput::Invariant::toElement() : QueryModel::ClassInvariant inherits QueryInput::Element::toElementBase {
    if (self.name != null) {
        result.name := self.name;
    } else {
        result.name := self.context().className + "_Invariant";
    }
}

// use a mapping to allow later resolveOne by the string name
mapping String::toContextClass() : ecore::EClass {
    init { 
        var foundClassifier := findClassifierForName(self);
	    assert fatal (foundClassifier != null) with log (currentDebugElementName + ': type with name ' + self + ' not found');
	    var foundClass := foundClassifier.oclAsType(ecore::EClass);
	    assert fatal (foundClass != null and not foundClass.oclIsUndefined()) with log(currentDebugElementName + ': given type (' + self + ') is not an EClass');
	    assert fatal (not foundClass.interface) with log(currentDebugElementName + ': given type (' + self + ') must not be a interface');
        result := foundClass;
    }
}

query QueryInput::Element::context() : QueryInput::Context {
    return self.container().oclAsType(QueryInput::Context);
}

query QueryInput::Element::commandContext() : QueryInput::CommandContext {
    return self.container().oclAsType(QueryInput::CommandContext);
}
