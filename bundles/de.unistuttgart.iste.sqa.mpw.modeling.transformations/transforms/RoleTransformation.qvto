import types.AnnotationHelpers;
import types.EmfHelpers;

modeltype Ecore uses ecore('http://www.eclipse.org/emf/2002/Ecore');

modeltype BaseTypes uses "http://www.mpw.uni-stuttgart.de/behavior/basetypes";
modeltype CommandModel uses 'http://www.mpw.uni-stuttgart.de/behavior/command';
modeltype QueryModel uses 'http://www.mpw.uni-stuttgart.de/behavior/query';
modeltype GenerationAnnotations uses 'http://www.mpw.uni-stuttgart.de/generation/annotations';

/**
  *  In-Place Transformation which transforms Actor and Stage classes to Game, Editor and ReadOnly role interfaces.
  *
  *  The original class will be prefixed with "Concrete" and will be used as implementation of the roles. For all
  *  queries relating to the entity, a operation will be inserted in the ReadOnly role interface. For the editor / game
  *  commands also a operation will be inserted to the Game / Editor role interface respectively. 
  *   
  *  Additionally for all features of the entities class, a property-getter operation will be inserted to the ReadOnly
  *  role interface. Note that this may "collide" with queries, where the operations will be merged together.
  */
transformation RoleTransformation(inout ecore: Ecore);

configuration property Queries: List(QueryModel::Module);
configuration property Commands: List(CommandModel::Transformation);

/* track relations between cloned commands which are embedded into the EOperations */
property clonedCommandsMap: Dict(CommandModel::Transformation, CommandModel::Transformation);

main() {
    ecore.rootObjects()[EPackage]->map transformClasses();
}

mapping Ecore::EPackage::transformClasses() {
  var classes := self.eClassifiers[EClass];
  classes[isRelevantType()]->map transformToRoles();
  self->map replaceRoleReferences();
}

helper Ecore::EClass::isRelevantType() : Boolean {
  return self.eAllSuperTypes->exists(t|t.name = "Actor" or t.name = "Stage");
}

mapping inout Ecore::EClass::transformToRoles() {
    var baseName := self.name;
    self.name := "Concrete" + baseName;
    eAnnotations += toAnnotation("role", "concrete");
    eAnnotations += toAnnotation("baseName", baseName);
  
    var readOnlyRole := createReadOnlyRole(baseName);
    
    var gameRole := self.createCommandRole(baseName, "game");
    gameRole.eSuperTypes += readOnlyRole;
    self.eSuperTypes += gameRole;
    
    var editorRole := self.createCommandRole(baseName, "editor");
    editorRole.eSuperTypes += readOnlyRole;
    self.eSuperTypes += editorRole;
  
    var actorFields := self.eReferences->select(r|r.eType.isInstanceOf("Actor"));
    actorFields->forEach(r) {
        readOnlyRole.eAnnotations += r.createRoleGetterDeclarationAnnotation("ReadOnly");
        gameRole.eAnnotations += r.createRoleGetterDeclarationAnnotation("Game");
        editorRole.eAnnotations += r.createRoleGetterDeclarationAnnotation("Editor");
        
        self.eAnnotations += r.createRoleGetterDefinitionAnnotation("ReadOnly");
        self.eAnnotations += r.createRoleGetterDefinitionAnnotation("Game");
        self.eAnnotations += r.createRoleGetterDefinitionAnnotation("Editor");
    };
}

query Ecore::EStructuralFeature::createRoleGetterDeclarationAnnotation(roleName: String) : EAnnotation {
    var baseName := self.eType.getAnnotationValue("baseName");
    return object GetPropertyDeclarationAnnotation {
        getterType := findClassForName(roleName + baseName);
        getterOperationName := "get" + roleName + self.name.firstToUpper();
    };
}

query Ecore::EStructuralFeature::createRoleGetterDefinitionAnnotation(roleName: String) : EAnnotation {
    var baseName := self.eType.getAnnotationValue("baseName");
    return object GetPropertyAnnotation {
        override := true;
        field := self;
        getterType := findClassForName(roleName + baseName);
        getterOperationName := "get" + roleName + self.name.firstToUpper();
    };
}

helper Ecore::EClass::createReadOnlyRole(baseName: String) : Ecore::EClass {
  var readOnlyRole := object EClass {
    name := "ReadOnly" + baseName;
    _abstract := true;
    interface := true;
    eAnnotations += toAnnotation("role", "readonly");
    eAnnotations += toAnnotation("baseName", baseName);
    eSuperTypes += findClassForName("Entity");
  };
  readOnlyRole.eOperations += self.eAllStructuralFeatures->select(f|f.changeable)
                                                         ->map transformFeatureToGetterOperation();
  
  var queryModule := Queries->first();
  var queriesForThisType := self.getQueriesForThisType();
  
  readOnlyRole.eOperations += queriesForThisType->reject(q|readOnlyRole.eAllOperations
                                                           ->exists(o|o.isPropertyGetter() and o.getSimplePropertyGetterName() = q.name))
                                                           ->map transformQueryToOperation();
  
  readOnlyRole.embedQueriesInOperations(queriesForThisType);
  
  self.ePackage.eClassifiers += readOnlyRole;
  return readOnlyRole;
}

mapping QueryModel::Query::transformQueryToOperation() : EOperation {
    name := self.name;
    eType := self.type;
    if (self.isCollection) {
        upperBound := -1; 
    };
    eParameters := self.parameters->map toEParameter();
}

mapping BaseTypes::Parameter::toEParameter() : EParameter {
    name := self.name;
    eType := self.type;
}

helper ecore::EClass::embedQueriesInOperations(queries: Set(QueryModel::Query)) {
  self.eAllOperations->forEach(o) {
      var queryForThisOperation := queries->any(q|q.name = o.name or o.isPropertyGetter() and o.getSimplePropertyGetterName() = q.name);
      if (queryForThisOperation != null) {
          var annotation := "query".toMarkerAnnotation();
          annotation.contents += queryForThisOperation.oclAsType(ecore::EObject).deepclone();
          o.eAnnotations += annotation;
          
          var documentationAnnotation := queryForThisOperation.createDocumentationAnnotation();
          if (documentationAnnotation != null) {
              o.eAnnotations += documentationAnnotation;
          };
      };
  };
}

helper QueryModel::Query::createDocumentationAnnotation() : EAnnotation {
    if (self.documentation.length() > 0) {
        return toAnnotation("documentation", self.documentation);
    };
    return null;
}

query ecore::EClass::getQueriesForThisType() : Set(QueryModel::Query) {
    var queryModule := Queries->first();
    return queryModule.elements->selectByType(QueryModel::Query)
                               ->select(q|q.contextClass = self);
}

helper Ecore::EClass::createCommandRole(baseName: String, roleName: String) : Ecore::EClass {
    var roleClass := object EClass {
      name := roleName.firstToUpper() + baseName;
      _abstract := true;
      interface := true;
      eAnnotations += toAnnotation("role", roleName);
      eAnnotations += toAnnotation("baseName", baseName);
    };
    roleClass.eOperations += Commands->select(c|c.roleName = roleName and (c.targetClass.name = baseName or c.targetClass = self))->map transformCommandToOperation();
    self.ePackage.eClassifiers += roleClass;
  
    return roleClass;
}

mapping CommandModel::Transformation::transformCommandToOperation() : EOperation {
    name := self.name;
    
    var annotation := "command".toMarkerAnnotation();
    eAnnotations += annotation;
    
    var clonedCommand := self.oclAsType(ecore::EObject).deepclone();
    annotation.contents += clonedCommand;
    clonedCommandsMap->put(clonedCommand.oclAsType(CommandModel::Transformation), self);
}

mapping EStructuralFeature::transformFeatureToGetterOperation() : EOperation {
    name := self.name;
    eType := self.eType;
    upperBound := self.upperBound;
    eAnnotations += "isPropertyGetter".toMarkerAnnotation();
}

query EOperation::isPropertyGetter() : Boolean {
    return self.isMarkedWithAnnotation("isPropertyGetter");
}

query EOperation::getSimplePropertyGetterName() : String {
    return "get" + self.name.firstToUpper();
}

/*
 * Ensure that each command does reference the roled-type of a Stage / Actor, since they are still bound to the "Concrete" ones.
 */
mapping inout Ecore::EPackage::replaceRoleReferences() {
    self.allSubobjectsOfType(CommandModel::Transformation)->map replaceRoleReferencesInCommand();
}

mapping inout CommandModel::Transformation::replaceRoleReferencesInCommand() {
	self.allSubobjectsOfKind(BaseTypes::Parameter)->replaceRoleReferencesInParameter(roleName);
	self.allSubobjectsOfKind(CommandModel::VariableDeclaration)->replaceRoleReferencesInVariableDeclaration(roleName);
	self.allSubobjectsOfKind(CommandModel::InstanceCondition)->replaceRoleReferencesInInstanceCondition(roleName);
	
	clonedCommandsMap->get(self)->map replaceRoleReferencesInCommand();
}

mapping inout BaseTypes::Parameter::replaceRoleReferencesInParameter(roleName: String) {
    self.type := self.type.toRoledType(roleName);
    assert(self.type != null);
}

mapping inout CommandModel::VariableDeclaration::replaceRoleReferencesInVariableDeclaration(roleName: String) {
    self.variableType := self.variableType.toRoledType(roleName);
    assert(self.variableType != null);
}

mapping inout CommandModel::InstanceCondition::replaceRoleReferencesInInstanceCondition(roleName: String) {
    self.instanceType := self.instanceType.toRoledType(roleName).oclAsType(EClass);
    assert(self.instanceType != null);
}

query ecore::EClassifier::toRoledType(roleName: String) : ecore::EClassifier {
    if (self.oclAsType(EClass).eSuperTypes->exists(t|t.name = "Stage" or t.name = "Actor")) {
        var foundClassifier := findClassifierForName(roleName.firstToUpper() + self.getAnnotationValue("baseName"));
        if (foundClassifier.oclIsInvalid()) {
            // WORKAROUND: due to a bug which loads multiple Ecore models multiple times, the models might not use the correct types
            // hence this type has been pointing to a wrong stage/actor type, which is not transformed by RoleTransformation earlier.
            // Fix this by special handling.
            foundClassifier := self.toRoledTypeForUntransformedEntities(roleName).oclAsType(EClass);
        };
        assert(foundClassifier != null);
        return foundClassifier;
    };
    return self;
}

// since this takes a non "roled" type, the role prefix can be simply added
query ecore::EClassifier::toRoledTypeForUntransformedEntities(roleName: String) : ecore::EClassifier {
    if (self.oclAsType(EClass).eSuperTypes->exists(t|t.name = "Stage" or t.name = "Actor")) {
        return findClassifierForName(roleName.firstToUpper() + self.name);
    };
    return self;
}
