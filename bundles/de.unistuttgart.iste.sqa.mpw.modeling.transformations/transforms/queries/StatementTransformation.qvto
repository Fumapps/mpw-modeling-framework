import types.EmfHelpers;

modeltype ecore uses ecore('http://www.eclipse.org/emf/2002/Ecore');
    
modeltype Input uses "http://www.mpw.uni-stuttgart.de/querydsl";
modeltype QueryModel uses "http://www.mpw.uni-stuttgart.de/behavior/query";

/**
  *  Library used for the ExpressionTransformation which handles transformation of Statements.
  *
  *  For many statements it maps a simple one-to-one mapping from QueryDSL to QueryBehavior Statement instances.
  *  But additionally it tracks the target types of each Statement and resolves used queries in QueryStatements.
  *  Also it resolves the collection-methods statements to have more typed information available. 
  */
library StatementTransformation;

configuration property Queries: List(querydsl::Model);

// remember the "current" statement / expression's type of the input model (to use in when blocks)
// Note: intermediate properties/classes are not allowed in a library, as a workaround Dictionaries are used
property currentExpressionTypes: Dict(Input::Expression, ecore::EClassifier);
property currentExpressionTypeCollectionInfo: Dict(Input::Expression, ecore::EBoolean);

mapping Input::Statement::toStatement() : QueryModel::Statement
    disjuncts Input::Statement::toSelfStatement,
              Input::Statement::toElementByNameUsageStatement,
              Input::Statement::toQueryStatement,
              Input::Statement::toFeatureStatement,
              Input::Statement::toCollectionMethodStatement,
              Input::Statement::toEnumLiteralStatement { }

abstract mapping Input::Statement::toStatementBase() : QueryModel::Statement {
    init {
        var statementIndex := self.parentExpression().statements->indexOf(self);
        if (statementIndex > 0) {
            var predecessorInput := self.parentExpression().statements->at(statementIndex-1);
            result.previous := predecessorInput.resolveoneIn(Input::Statement::toStatement);
        }
    }
    end {
        var parentExpression := self.parentExpression();
        result.debugName := self.toDebugName();
        
        currentExpressionTypes->put(parentExpression, result.type);
        currentExpressionTypeCollectionInfo->put(parentExpression, result.isCollection);
    }
}

mapping Input::Statement::toSelfStatement() : QueryModel::SelfStatement merges Input::Statement::toStatementBase
    when { self.target = "self"; } {
    type := self.parentContext().className.resolveone(ecore::EClass);
    selfAlias := self.determineSelfAlias();
    isCollection := false;
    isOptional := false;
}

mapping Input::Statement::toElementByNameUsageStatement() : QueryModel::ElementByNameUsageStatement merges Input::Statement::toStatementBase
    when { self.parameterList() != null and self.parameterList().parameters->exists(p|p.variableName = self.target) } {
    var parameter := self.parameterList().parameters->any(p|p.variableName = self.target);
    type := findClassifierForName(parameter.typeName);
    elementName := parameter.variableName;
    isCollection := false;
    isOptional := false;
}

query Input::Statement::determineSelfAlias() : String {
    if (self.parentElement().oclIsTypeOf(Input::Query)) {
        return "this";
    } else {
        return "self";
    };
}

mapping Input::Statement::toQueryStatement() : QueryModel::QueryStatement merges Input::Statement::toStatementBase
    when { self.isBasedOnQuery(); } {
    var inputQuery := getAllQueries()->any(q|isStatementMatchingQuery(self, q));
    _query := inputQuery.resolveone(QueryModel::Query);
    assert(_query != null) with log('query ' + inputQuery.name + ' could not be resolved');
    type := _query.type;
    parameterNames := self.methodCall.parameters;
    isOptional := _query.isOptional;
    debugName := _query.name;
}

mapping Input::Statement::toFeatureStatement() : QueryModel::FeatureStatement merges Input::Statement::toStatementBase
    when { self.getCurrentExpressionType().oclIsTypeOf(ecore::EClass) and self.target != null; } {
    var eClass := self.getCurrentExpressionType().oclAsType(ecore::EClass);
    
    feature := eClass.eAllStructuralFeatures->any(f|f.name = self.target);
    isCollection := feature.upperBound = -1;
    isOptional := feature.lowerBound = 0 and feature.upperBound = 1;
    type := feature.eType;
}

mapping Input::Statement::toCollectionMethodStatement() : QueryModel::CollectionMethodStatement merges Input::Statement::toStatementBase
    when { self.getCurrentExpressionTypeIsCollection() = true and self.collectionTarget != null; } {
    var eClass := self.getCurrentExpressionType().oclAsType(ecore::EClass);
    
    var isSimple := self.collectionTarget.oclIsTypeOf(Input::SimpleCollectionMethod);
    var simpleCollectionMethod := self.collectionTarget.oclAsType(Input::SimpleCollectionMethod);
    var parametrizedCollectionMethod := self.collectionTarget.oclAsType(Input::ParametrizedCollectionMethod);
    
    switch {
        case (isSimple and simpleCollectionMethod.method = "notEmpty") {
            type := ecore::EBoolean.oclAsType(ecore::EClassifier);
            isCollection := false;
            isOptional := false;
            methodType := QueryModel::CollectionMethodType::NOT_EMPTY;
        }
        case (isSimple and simpleCollectionMethod.method = "isEmpty") {
            type := ecore::EBoolean.oclAsType(ecore::EClassifier);
            isCollection := false;
            isOptional := false;
            methodType := QueryModel::CollectionMethodType::IS_EMPTY;
        }
        case (isSimple and simpleCollectionMethod.method = "size") {
            type := findClassifierForName(parametrizedCollectionMethod.typeSelect);
            type := ecore::EInt.oclAsType(ecore::EClassifier);
            isCollection := false;
            isOptional := false;
            methodType := QueryModel::CollectionMethodType::SIZE;
        }
        case (not isSimple and parametrizedCollectionMethod.typeSelect != null) {
            type := findClassifierForName(parametrizedCollectionMethod.typeSelect);
            isCollection := true;
            isOptional := false;
            methodType := QueryModel::CollectionMethodType::TYPE_SELECT;
            parameters += type.oclAsType(ecore::EObject);
        }
        case (not isSimple and parametrizedCollectionMethod.indexExpression != null) {
            methodType := QueryModel::CollectionMethodType::AT;
            isCollection := false;
            isOptional := true;
            type := self.getCurrentExpressionType();
            var expression := parametrizedCollectionMethod.indexExpression.resolveone(QueryModel::Expression).oclAsType(EObject);
            parameters += expression;
            contents += expression; // ensure containment
        }
        else {
            assert(false);
        }
    };
}

mapping Input::Statement::toEnumLiteralStatement() : QueryModel::EnumLiteralStatement merges Input::Statement::toStatementBase
    when { self.isEnumLiteral(); } {
    enumLiteral := EntityModels->collect(m|m.allSubobjectsOfType(ecore::EEnumLiteral))->flatten()->any(l|l.name = self.target);
    type := enumLiteral.container().oclAsType(ecore::EEnum);
    isOptional := false;
}

query Input::Statement::isBasedOnQuery() : Boolean {
    return getAllQueries()->exists(q|isStatementMatchingQuery(self, q));
}

query isStatementMatchingQuery(s: Input::Statement, queryElement: Input::Query) : Boolean {
    return s.methodCall != null 
           and queryElement.name = s.methodCall.targetMethod
           and currentExpressionTypes->get(s.parentExpression()).name = queryElement.context().className;
}

query Input::Statement::isEnumLiteral() : Boolean {
    return EntityModels->collect(m|m.allSubobjectsOfType(ecore::EEnumLiteral))->flatten()->exists(l|l.name = self.target);
}

/* returns the current expression type which is defined by the previous statement */
query Input::Statement::getCurrentExpressionType() : ecore::EClassifier {
    return currentExpressionTypes->get(self.parentExpression());
}

query Input::Statement::getCurrentExpressionTypeIsCollection() : ecore::EBoolean {
    return currentExpressionTypeCollectionInfo->get(self.parentExpression());
}

query ecore::EString::findClass() : ecore::EClassifier {
    return EntityModels->collect(p|p.getEClassifier(self))->selectOne(c|c != null).oclAsType(ecore::EClass)
}

query Input::Statement::parentExpression() : Input::StatementsExpression {
    return self.container().oclAsType(querydsl::StatementsExpression);
}

query Input::Statement::parentContext() : Input::Context {
    return self.root().oclAsType(Input::Context);
}

query Input::Element::context() : Input::Context {
    return self.container().oclAsType(Input::Context);
}

query Input::Statement::commandContext() : Input::CommandContext {
    return self.root().oclAsType(Input::CommandContext);
}

query Input::Statement::parameterList() : Input::ParameterList {
    if (self.parentElement().oclIsTypeOf(Input::Query)) {
        return self.parentElement().oclAsType(Input::Query).parameterList;
    } elif (self.commandContext() != null) {
        return self.commandContext().parameterList;
    };
    return null;
}

query Input::Statement::parentElement() : Input::Element {
    var current := self.container();
    while (current != null and not current.oclIsKindOf(Input::Element)) {
        current := current.container();
    };
    return current.oclAsType(Input::Element);
}

query getAllQueries() : List(Input::Query) {
    return Queries->collect(model|model.subobjectsOfType(Input::Query))
                  ->flatten();
}

/* create a display string which is helpful when viewing as XMI */
query Input::Statement::toDebugName() : ecore::EString {
    if (self.target != null) {
        return self.target;
    };
    
    var simpleCollectionMethod := self.collectionTarget.oclAsType(Input::SimpleCollectionMethod);
    if (simpleCollectionMethod != null) {
        return simpleCollectionMethod.method;
    };
    var parametrizedCollectionMethod := self.collectionTarget.oclAsType(Input::ParametrizedCollectionMethod);
    if (parametrizedCollectionMethod != null) {
        return parametrizedCollectionMethod.typeSelect;
    };
    
    return "?";
}
