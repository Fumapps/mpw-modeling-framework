import queries.StatementTransformation;
import queries.IntermediaryStatementConverterLibrary;
import queries.OldValueNameHelperLibrary;

modeltype ecore uses ecore('http://www.eclipse.org/emf/2002/Ecore');
    
modeltype Input uses "http://www.mpw.uni-stuttgart.de/querydsl";
modeltype QueryModel uses "http://www.mpw.uni-stuttgart.de/behavior/query";

/**
  *  Library used for the QueryTransformation which handles transformation of Expressions.
  *
  *  For many expressions it maps a simple one-to-one mapping from QueryDSL to QueryBehavior Expression instances.
  *  But additionally it tracks the target types of each Expression e.g. to derive the final type of a Query-instance. 
  */
library ExpressionTransformation;

// has to be mapped separately on beginning
mapping Input::OldValueExpression::toVariableExpression() : QueryModel::VariableExpression {
    variableName := self.determineVariableName();
    valueExpression := self.expression.map toExpression();
    
    // old value expressions have to be single values
    assert(not valueExpression.isCollection);
    type := valueExpression.type;
}

mapping Input::Expression::toExpression() : QueryModel::Expression
    disjuncts Input::NotExpression::toNotExpression,
              Input::OldValueExpression::toOldExpression,
              Input::ImpliesExpression::toImpliesExpression,
              Input::OrExpression::toOrExpression,
              Input::AndExpression::toAndExpression,
              Input::EqualityExpression::toCompareExpression,
              Input::ComparisonExpression::toCompareExpression,
              Input::PlusExpression::toCalculationExpression,
              Input::MinusExpression::toCalculationExpression,
              Input::MultiplicationExpression::toCalculationExpression,
              Input::DivisionExpression::toCalculationExpression,
              Input::BoolConstant::toConstantExpression,
              Input::IntConstant::toConstantExpression,
              Input::StringConstant::toConstantExpression,
              Input::NullConstant::toConstantExpression,
              Input::StatementsExpression::toStatementExpression {}

mapping Input::NotExpression::toNotExpression() : QueryModel::NotExpression {
    inner := self.expression.map toExpression();
    
    assert fatal (inner.type = EBoolean.oclAsType(EClassifier) and not inner.isCollection) with log ("invalid nested NOT expression");
    type := EBoolean.oclAsType(EClassifier);
}

mapping Input::OldValueExpression::toOldExpression() : QueryModel::OldExpression {
    var variableExpression := self.resolveone(QueryModel::VariableExpression);
    
    inner := object QueryModel::StatementsExpression {
        statements += object QueryModel::VariableReferenceUsageStatement {
            variableReference := variableExpression;
            type := variableExpression.type;
        };
        type := variableExpression.type;
    };
    
    type := inner.type;
}

mapping Input::ImpliesExpression::toImpliesExpression() : QueryModel::ImpliesExpression {
    lhs := self.left.map toExpression();
    rhs := self.right.map toExpression();
    
    result.assertBinaryBooleanLeftAndRightExpressionsAreValid();
    type := EBoolean.oclAsType(EClassifier);
}

mapping Input::OrExpression::toOrExpression() : QueryModel::OrExpression {
    lhs := self.left.map toExpression();
    rhs := self.right.map toExpression();
    
    result.assertBinaryBooleanLeftAndRightExpressionsAreValid();
    type := EBoolean.oclAsType(EClassifier);
}

mapping Input::AndExpression::toAndExpression() : QueryModel::AndExpression {
    lhs := self.left.map toExpression();
    rhs := self.right.map toExpression();
    
    result.assertBinaryBooleanLeftAndRightExpressionsAreValid();
    type := EBoolean.oclAsType(EClassifier);
}

mapping Input::ComparisonExpression::toCompareExpression() : QueryModel::CompareExpression {
    lhs := self.left.map toExpression();
    rhs := self.right.map toExpression();
    operator := self.op.toOperator();
    
    assert fatal (not lhs.isCollection and not rhs.isCollection) with log ("invalid nested expressions");
    type := EBoolean.oclAsType(EClassifier);
}

mapping Input::EqualityExpression::toCompareExpression() : QueryModel::CompareExpression {
    lhs := self.left.map toExpression();
    rhs := self.right.map toExpression();
    operator := self.operation.toOperator();
    
    assert fatal (not lhs.isCollection and not rhs.isCollection) with log ("invalid nested expressions");
    type := EBoolean.oclAsType(EClassifier);
}

query String::toOperator() : QueryModel::CompareOperator {
    switch {
        case (self = "=") return QueryModel::CompareOperator::EQUAL;
        case (self = "<>") return QueryModel::CompareOperator::NOT_EQUAL;
        case (self = ">") return QueryModel::CompareOperator::GREATER;
        case (self = "<") return QueryModel::CompareOperator::SMALLER;
        case (self = ">=") return QueryModel::CompareOperator::GREATER_EQUAL;
        case (self = "<=") return QueryModel::CompareOperator::SMALLER_EQUAL;
    };
    assert (false) with log('invalid operator ' + self);
    return null;
}

mapping Input::PlusExpression::toCalculationExpression() : QueryModel::CalculationExpression {
    lhs := self.left.map toExpression();
    rhs := self.right.map toExpression();
    operator := CalculationOperator::PLUS;
    
    result.assertBinaryNumericLeftAndRightExpressionsAreValid();
    type := EInt.oclAsType(EClassifier);
}

mapping Input::MinusExpression::toCalculationExpression() : QueryModel::CalculationExpression {
    lhs := self.left.map toExpression();
    rhs := self.right.map toExpression();
    operator := CalculationOperator::MINUS;
    
    result.assertBinaryNumericLeftAndRightExpressionsAreValid();
    type := EInt.oclAsType(EClassifier);
}

mapping Input::MultiplicationExpression::toCalculationExpression() : QueryModel::CalculationExpression {
    lhs := self.left.map toExpression();
    rhs := self.right.map toExpression();
    operator := CalculationOperator::MULTIPLY;
    
    result.assertBinaryNumericLeftAndRightExpressionsAreValid();
    type := EInt.oclAsType(EClassifier);
}

mapping Input::DivisionExpression::toCalculationExpression() : QueryModel::CalculationExpression {
    lhs := self.left.map toExpression();
    rhs := self.right.map toExpression();
    operator := CalculationOperator::DIVIDE;
    
    result.assertBinaryNumericLeftAndRightExpressionsAreValid();
    type := EInt.oclAsType(EClassifier);
}

mapping Input::BoolConstant::toConstantExpression() : QueryModel::ConstantExpression {
    _literal := self.value;
    type := EBoolean.oclAsType(EClassifier);
}

mapping Input::IntConstant::toConstantExpression() : QueryModel::ConstantExpression {
    _literal := self.value.toString();
    type := EInt.oclAsType(EClassifier);
}

mapping Input::StringConstant::toConstantExpression() : QueryModel::ConstantExpression {
    _literal := self.value;
    type := EString.oclAsType(EClassifier);
}

mapping Input::NullConstant::toConstantExpression() : QueryModel::ConstantExpression {
    _literal := "null";
    type := EObject.oclAsType(EClassifier);
}

mapping Input::StatementsExpression::toStatementExpression() : QueryModel::StatementsExpression
    when { self.statements->notEmpty(); } {
    
    // resolve potential nested expressions to ensure they are usable by statements via resolve (note: avoid cyclic dependency of qvto-files)
    self.allSubobjectsOfKind(Input::Expression)->map toExpression();
    
    statements += self.statements->map toStatement();
    assert fatal (statements->size() > 0) with log ("invalid statements expression, it has no statements");
    
    type := statements->last().type;
    isCollection := statements->last().isCollection;
    isOptional := false; // Note: Queries currently do not allow optional returns, this requires an extension of QueryDSL, e.g. by '?' syntax

    result.map convertIntermediaryStatements();
    
    assert fatal (type != null) with log ("invalid statements expression, it has no type (last: " + statements->last().toString() + ")");
}


helper QueryModel::BinaryExpression::assertBinaryBooleanLeftAndRightExpressionsAreValid() {
	assert fatal (self.lhs.type = EBoolean.oclAsType(EClassifier)) with log ("invalid left expression, it has not an EBoolean: " + self.rhs.type.toString());
	assert fatal (self.rhs.type = EBoolean.oclAsType(EClassifier)) with log ("invalid right expression, it has not an EBoolean: " + self.rhs.type.toString());
    assert fatal (not self.lhs.isCollection) with log ("invalid left expression, it is a collection type");
    assert fatal (not self.rhs.isCollection) with log ("invalid right expression, it is a collection type");
}

helper QueryModel::BinaryExpression::assertBinaryNumericLeftAndRightExpressionsAreValid() {
	assert fatal (self.lhs.type = EInt.oclAsType(EClassifier)) with log ("invalid left expression, it has not an EBoolean: " + self.rhs.type.toString());
	assert fatal (self.rhs.type = EInt.oclAsType(EClassifier)) with log ("invalid right expression, it has not an EBoolean: " + self.rhs.type.toString());
    assert fatal (not self.lhs.isCollection) with log ("invalid left expression, it is a collection type");
    assert fatal (not self.rhs.isCollection) with log ("invalid right expression, it is a collection type");
}
