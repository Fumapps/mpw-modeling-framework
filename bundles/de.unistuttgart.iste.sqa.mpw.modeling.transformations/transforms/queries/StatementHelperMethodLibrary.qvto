import types.EmfHelpers;
import util.BasicHelpers;

modeltype ecore uses ecore('http://www.eclipse.org/emf/2002/Ecore');
	
modeltype Input uses "http://www.mpw.uni-stuttgart.de/querydsl";
modeltype QueryModel uses "http://www.mpw.uni-stuttgart.de/behavior/query";

/**
  *  Library used to check if a given StatementsExpression needs a helper method. It also provides a mechanism to generate a name.
  */
library StatementHelperMethodLibrary;

query QueryModel::StatementsExpression::needsHelperMethod() : Boolean {
    return self.statements->exists(s|s.oclIsTypeOf(IntermediaryResultStatement));
}

query QueryModel::Statement::hasNext() : Boolean {
    return self.next != null;
}

query QueryModel::StatementsExpression::getHelperMethodName() : String {
    var name := "helper";
    
    var parentElementName := self.parentElement().name.firstToUpper();
    if (parentElementName.oclIsInvalid() or parentElementName = null) {
    	parentElementName := self.parentElement().metaClassName() + self.parentElement().determineIndexInParentContainer().toString();
    };
    
    assert((not parentElementName.oclIsInvalid()) and parentElementName <> null);
    name := name + "_" + parentElementName;
    
    self.statements[IntermediaryResultStatement]->collect(s|s.internalStatementsExpression.statements)
                                                ->flatten()
                                                ->forEach (s) {
    	switch {
    		case (s.oclIsTypeOf(ElementByNameUsageStatement)) {
    			name := name + "_" + s.oclAsType(ElementByNameUsageStatement).elementName;
    		};
            case (s.oclIsTypeOf(FeatureStatement)) {
                name := name + "_" + s.oclAsType(FeatureStatement).feature.name;
            };
            case (s.oclIsTypeOf(GetPropertyStatement)) {
                name := name + "_" + s.oclAsType(GetPropertyStatement).propertyGetterName;
            };
            case (s.oclIsTypeOf(QueryStatement)) {
                name := name + "_" + s.oclAsType(QueryStatement)._query.name;
            };
            case (s.oclIsTypeOf(CollectionMethodStatement)) {
                var collectionMethodStatement := s.oclAsType(CollectionMethodStatement);
                name := name + "_" + collectionMethodStatement.methodType.toString().toLower() + collectionMethodStatement->parameters->collect(p|p.collectionMethodParameterToString())->joinToString("_");
            };
            case (s.oclIsTypeOf(EnumLiteralStatement)) {
                name := name + "_" + s.oclAsType(EnumLiteralStatement).enumLiteral.name;
            };
            case (s.oclIsTypeOf(VariableReferenceUsageStatement)) {
                name := name + "_" + s.oclAsType(VariableReferenceUsageStatement).variableReference.variableName;
            };
    	};
    };
    
    assert(name != null);
    return name;
}

query EObject::collectionMethodParameterToString() : String {
	if (self.oclIsKindOf(ENamedElement)) {
		return self.oclAsType(ENamedElement).name;
	};
    if (self.oclIsKindOf(QueryModel::ConstantExpression)) {
        return self.oclAsType(QueryModel::ConstantExpression)._literal;
    };
	return "";
}

query Input::Element::determineIndexInParentContainer() : Integer {
	var subobjectsOfContainer := self.container().subobjects();
	return subobjectsOfContainer->asOrderedSet()->indexOf(self);
}

query QueryModel::StatementsExpression::parentElement() : Input::Element {
    var inputStatementExpression := self.invresolveone(Input::StatementsExpression);
    return inputStatementExpression.parentElement();
}

query Input::StatementsExpression::parentElement() : Input::Element {
    var current := self.container();
    while (current != null and not current.oclIsKindOf(Input::Element)) {
        current := current.container();
    };
    return current.oclAsType(Input::Element);
}
