«IMPORT ecore»
«IMPORT commandBehavior»
«IMPORT queryBehavior»
«IMPORT generationAnnotations»

«EXTENSION template::java::JavaGeneratorExtensions»

«REM»
  Generates classes based on GenerationAnnotations.
  Note: currently only facade classes are generated by this approach. Later it is planned to generate also the 
        other entity classes by the usage of GenerationAnnotations to move logic to the transformation step.
«ENDREM»
«DEFINE main FOR EPackage»
    «EXPAND JavaClass FOREACH this.eClassifiers.typeSelect(EClass)
                                               .select(c|c.isFacade())
                                               .reject(c|c.interface)»
«ENDDEFINE»

«DEFINE JavaClass FOR EClass-»
    «FILE "generated/" + this.ePackage.toJavaPackagePath() + "/" + name + ".java"»«toJavaHeaderGeneratedComment()»
    
    package «this.ePackage.toJavaPackageName()»;
    
    import «getFrameworkBasePackage()».mpw.*;
    «EXPAND ImportTypeGenerationAnnotation FOREACH eAnnotations.typeSelect(ImportTypeAnnotation)»
    
    public class «name» {
        «FOREACH eStructuralFeatures AS f-»
            private «f.featureToJavaType()» «f.name»;
        «ENDFOREACH-»
        
        «FOREACH eOperations AS o-»
		    «REM»TODO JML«constraints.toJml()»«ENDREM-»
		    «o.getAnnotationValue("documentation").toJavaDoc()»
            public «o.operationToJavaType()» «o.name» («FOREACH o.eParameters AS p SEPARATOR ", "»«p.eType.name.toJavaType()» «p.name»«ENDFOREACH») {
            «EXPAND GenerationOperationAnnotation FOREACH o.eAnnotations-»
            }
            
        «ENDFOREACH»
        «EXPAND GenerationAnnotation FOREACH eAnnotations»
    }
    «ENDFILE»
«ENDDEFINE»

«DEFINE GenerationAnnotation FOR EAnnotation»«ENDDEFINE-»

«DEFINE GenerationAnnotation FOR GetPropertyAnnotation-»
    «getAnnotationValue("documentation").toJavaDoc()»
    public «getterType.name.toJavaType()» «getterOperationName»() {
        return this.«field.name»;
    }
    
«ENDDEFINE»

«DEFINE GenerationOperationAnnotation FOR EAnnotation»«ENDDEFINE»

«DEFINE GenerationOperationAnnotation FOR CommandParameterCreationAnnotation-»
    var «parametersVariableName» = new «command.name.toFirstUpper()»CommandParameters();
    «parametersVariableName».commandStack = game.get«command.roleName.toFirstUpper()»CommandStack();
    «IF command.isActorCommand()-»
    «parametersVariableName».gameLog = game.getGameLog();
    «ENDIF-»
    «FOREACH parameterMappings AS mapping-»
         «parametersVariableName».«mapping.key» = «mapping.value»; 
    «ENDFOREACH-»
«ENDDEFINE»

«DEFINE GenerationOperationAnnotation FOR CommandCallAnnotation-»
    «IF command.isActorCommand()-»
    game.getPerformance().preExecuteGameCommand();
    try {
        «targetRoleVariableName».«command.name»(«parametersVariableName»);
        game.getPerformance().delayControlFlow();
    } catch (Exception e) {
        // Stop the game to prevent execution of further commands!
        game.getPerformance().setMode(Mode.STOPPED);
        throw e;
    }
    «ELSE-»
        «targetRoleVariableName».«command.name»(«parametersVariableName»);
    «ENDIF-»
«ENDDEFINE»

«DEFINE GenerationOperationAnnotation FOR QueryCallAnnotation-»
    return «internalRoleField.name».«query.name»(«query.parameters.collect(p|p.name).toString(", ")»); 
«ENDDEFINE»

«DEFINE GenerationOperationAnnotation FOR ParameterToFieldAssignmentAnnotation-»
    this.«field.name» = «parameter.name»;
«ENDDEFINE»

«DEFINE GenerationOperationAnnotation FOR ConstructorSimpleFieldInitializationAnnotation-»
    this.«field.name» = new «constructorTypeName»(«EXPAND template::java::JavaQueriesTemplate::ExpressionDefinition FOREACH parameterInputVariableExpressions SEPARATOR ", "»);
«ENDDEFINE»

«DEFINE GenerationOperationAnnotation FOR ExpressionFieldAssignmentAnnotation-»
    this.«field.name» = «EXPAND template::java::JavaQueriesTemplate::ExpressionDefinition FOR expression»;
«ENDDEFINE»

«DEFINE GenerationOperationAnnotation FOR AddVariableToCollectionAnnotation-»
    «EXPAND template::java::JavaQueriesTemplate::ExpressionDefinition FOR collectionExpression».add(«EXPAND template::java::JavaQueriesTemplate::ExpressionDefinition FOR parameterExpression»);
«ENDDEFINE»

«DEFINE GenerationOperationAnnotation FOR MethodCallAnnotation-»
    «variableName».«methodName»(«EXPAND template::java::JavaQueriesTemplate::ExpressionDefinition FOREACH parameterInputVariableExpressions SEPARATOR ", "»)«IF closingStatement»;«ENDIF-»
«ENDDEFINE»

«DEFINE GenerationOperationAnnotation FOR ReturnAnnotation-»
    return «EXPAND template::java::JavaQueriesTemplate::ExpressionDefinition FOR expression»;
«ENDDEFINE»

«DEFINE GenerationOperationAnnotation FOR ExpressionAnnotation-»
    «EXPAND template::java::JavaQueriesTemplate::ExpressionDefinition FOR expression-»
«ENDDEFINE»

«DEFINE GenerationOperationAnnotation FOR VariableObjectConstructionAnnotation-»
    var «variableName» = new «constructorType.name»(«EXPAND template::java::JavaQueriesTemplate::ExpressionDefinition FOREACH parameterInputVariableExpressions SEPARATOR ", "»);
«ENDDEFINE»

«DEFINE GenerationOperationAnnotation FOR VariableDefinitionAnnotation-»
    var «variableName» = «EXPAND GenerationOperationAnnotation FOR rhs»;
«ENDDEFINE»

«DEFINE ImportTypeGenerationAnnotation FOR ImportTypeAnnotation-»
    import «getModulePackage()».«relativeQualifiedTypeName»;
«ENDDEFINE»
