«IMPORT ecore»
«IMPORT commandBehavior»
«IMPORT queryBehavior»
«IMPORT generationAnnotations»

«EXTENSION template::java::JavaGeneratorExtensions»

«REM»
    Xpand templates, to generate code snippets based on GenerationAnnotations.
«ENDREM»

«DEFINE GenerationAnnotation FOR EAnnotation»«ENDDEFINE-»

«DEFINE GenerationAnnotation FOR GetPropertyDeclarationAnnotation»
    «getterType.name» «getterOperationName»();
«ENDDEFINE»

«DEFINE GenerationAnnotation FOR GetPropertyAnnotation-»
    «documentationToJavaDoc()-»
    «IF override»@Override
    «ENDIF-»
    public «getterType.name.toJavaType()» «getterOperationName»() {
        return this.«field.name»;
    }
    
«ENDDEFINE»

«DEFINE GenerationOperationAnnotation FOR EAnnotation»«ENDDEFINE»

«DEFINE GenerationOperationAnnotation FOR CommandParameterCreationAnnotation-»
    var «parametersVariableName» = new «command.name.toFirstUpper()»CommandParameters();
    «parametersVariableName».commandStack = game.get«command.roleName.toFirstUpper()»CommandStack();
    «IF command.isActorCommand()-»
    «parametersVariableName».gameLog = game.getGameLog();
    «ENDIF-»
    «FOREACH parameterMappings AS mapping-»
         «parametersVariableName».«mapping.key» = «mapping.value»; 
    «ENDFOREACH-»
«ENDDEFINE»

«DEFINE GenerationOperationAnnotation FOR CommandCallAnnotation-»
    «IF command.isActorCommand()-»
    game.getPerformance().preExecuteGameCommand();
    try {
        «targetRoleVariableName».«command.name»(«parametersVariableName»);
        game.getPerformance().delayControlFlow();
    } catch (Exception e) {
        // Stop the game to prevent execution of further commands!
        game.getPerformance().setMode(Mode.STOPPED);
        throw e;
    }
    «ELSE-»
        game.getPerformance().preExecuteEditorCommand();
        «targetRoleVariableName».«command.name»(«parametersVariableName»);
    «ENDIF-»
«ENDDEFINE»

«DEFINE GenerationOperationAnnotation FOR QueryCallAnnotation-»
    return «internalRoleField.name».«query.name»(«query.parameters.collect(p|p.name).toString(", ")»); 
«ENDDEFINE»

«DEFINE GenerationOperationAnnotation FOR ParameterToFieldAssignmentAnnotation-»
    this.«field.name» = «parameter.name»;
«ENDDEFINE»

«DEFINE GenerationOperationAnnotation FOR ConstructorSimpleFieldInitializationAnnotation-»
    this.«field.name» = new «constructorTypeName»(«EXPAND template::java::JavaQueriesTemplate::ExpressionDefinition FOREACH parameterInputVariableExpressions SEPARATOR ", "»);
«ENDDEFINE»

«DEFINE GenerationOperationAnnotation FOR ExpressionFieldAssignmentAnnotation-»
    this.«field.name» = «EXPAND template::java::JavaQueriesTemplate::ExpressionDefinition FOR expression»;
«ENDDEFINE»

«DEFINE GenerationOperationAnnotation FOR AddVariableToCollectionAnnotation-»
    «EXPAND template::java::JavaQueriesTemplate::ExpressionDefinition FOR collectionExpression».add(«EXPAND template::java::JavaQueriesTemplate::ExpressionDefinition FOR parameterExpression»);
«ENDDEFINE»

«DEFINE GenerationOperationAnnotation FOR MethodCallAnnotation-»
    «variableName».«methodName»(«EXPAND template::java::JavaQueriesTemplate::ExpressionDefinition FOREACH parameterInputVariableExpressions SEPARATOR ", "»)«IF closingStatement»;«ENDIF-»
«ENDDEFINE»

«DEFINE GenerationOperationAnnotation FOR ReturnAnnotation-»
    return «EXPAND template::java::JavaQueriesTemplate::ExpressionDefinition FOR expression»;
«ENDDEFINE»

«DEFINE GenerationOperationAnnotation FOR ExpressionAnnotation-»
    «EXPAND template::java::JavaQueriesTemplate::ExpressionDefinition FOR expression-»
«ENDDEFINE»

«DEFINE GenerationOperationAnnotation FOR VariableObjectConstructionAnnotation-»
    var «variableName» = new «constructorType.name»(«EXPAND template::java::JavaQueriesTemplate::ExpressionDefinition FOREACH parameterInputVariableExpressions SEPARATOR ", "»);
«ENDDEFINE»

«DEFINE GenerationOperationAnnotation FOR VariableDefinitionAnnotation-»
    var «variableName» = «EXPAND GenerationOperationAnnotation FOR rhs»;
«ENDDEFINE»

«DEFINE ImportTypeGenerationAnnotation FOR ImportTypeAnnotation-»
    import «getModulePackage()».«relativeQualifiedTypeName»;
«ENDDEFINE»
