«IMPORT ecore»
«IMPORT queryBehavior»

«EXTENSION template::java::JavaGeneratorExtensions»

«DEFINE QueryDefinitions FOR EClass»
      «FOREACH eAllOperations.select(o|o.isQuery() && !o.isPropertyGetter()).collect(o|o.getQueryForOperation()) AS q-»
      @Override
      public «q.type.name.toJavaType()» «q.name»(«FOREACH q.parameters AS p SEPARATOR ", "»«p.type.name.toJavaType()» «p.name»«ENDFOREACH») {
          try {
                return «EXPAND ExpressionDefinition FOR q.mainExpression-»;
          } catch (Exception e) {
              return «q.defaultValueLiteral»;
          }
      }
      «EXPAND HelperStatementDefinition FOREACH q.eAllContents.typeSelect(StatementsExpression).select(e|e.needsHelperMethod)-»
      «ENDFOREACH-»
«ENDDEFINE»

«DEFINE ExpressionDefinition FOR Expression-»«ENDDEFINE»

«DEFINE ExpressionDefinition FOR VariableExpression-»
    «valueExpression.type.name.toJavaType()» «variableName» = «EXPAND ExpressionDefinition FOR valueExpression»;
«ENDDEFINE»

«DEFINE ExpressionDefinition FOR NotExpression-»
    !(«EXPAND ExpressionDefinition FOR inner-»)
«ENDDEFINE»

«DEFINE ExpressionDefinition FOR OldExpression-»
    «EXPAND ExpressionDefinition FOR inner-»
«ENDDEFINE»

«DEFINE ExpressionDefinition FOR ImpliesExpression-»
    («EXPAND ExpressionDefinition FOR lhs») 
    ? («EXPAND ExpressionDefinition FOR rhs») 
    : true
«ENDDEFINE»

«DEFINE ExpressionDefinition FOR OrExpression-»
    «EXPAND ExpressionDefinition FOR lhs» || «EXPAND ExpressionDefinition FOR rhs-»
«ENDDEFINE»

«DEFINE ExpressionDefinition FOR AndExpression-»
    «EXPAND ExpressionDefinition FOR lhs» 
    && «EXPAND ExpressionDefinition FOR rhs-»
«ENDDEFINE»

«DEFINE ExpressionDefinition FOR CompareExpression-»
    «EXPAND ExpressionDefinition FOR lhs» «operator.toOperatorCode()» «EXPAND ExpressionDefinition FOR rhs-»
«ENDDEFINE»

«DEFINE ExpressionDefinition FOR CalculationExpression-»
    «EXPAND ExpressionDefinition FOR lhs» «operator.toOperatorCode()» «EXPAND ExpressionDefinition FOR rhs-»
«ENDDEFINE»

«DEFINE ExpressionDefinition FOR ConstantExpression-»
    «literal-»
«ENDDEFINE»

«DEFINE ExpressionDefinition FOR StatementsExpression-»
    «IF needsHelperMethod-»
        «EXPAND CallHelperStatementMethod FOR this-»
    «ELSE-»
        «EXPAND template::java::queries::JavaStatementsTemplate::StatementsDefinitions FOR this-»
    «ENDIF-»
«ENDDEFINE»

«DEFINE CallHelperStatementMethod FOR StatementsExpression-»
    «helperMethodName.toJavaConformName()»(«FOREACH this.findParameterList() AS p SEPARATOR ", "»«p.name»«ENDFOREACH»)
«ENDDEFINE»

«DEFINE HelperStatementDefinition FOR StatementsExpression»
      private «this.type.name.toJavaType()» «helperMethodName.toJavaConformName()»(«FOREACH this.findParameterList() AS p SEPARATOR ", "»«p.type.name.toJavaType()» «p.name»«ENDFOREACH») {
          «REM»Note: for helper methods intermediary statements are used, which generate the 'return' by themselves«ENDREM-»
          «EXPAND template::java::queries::JavaStatementsTemplate::StatementsDefinitions FOR this-»
      }

«ENDDEFINE»
