import ecore;
import behaviorsbase;
import generationAnnotations;

extension mpw::generator::xtend::types::MetaModelGeneratorExtensions;

/*
 * Extensions related to EMF Metamodel types (General).
 */

getter(String this) :
	"get" + this.toFirstUpper();
	
setter(String this) :
	"set" + this.toFirstUpper();
	
adder(String this) :
    "addTo" + this.toFirstUpper();
    
remover(String this) :
    "removeFrom" + this.toFirstUpper();
    
clearer(String this) :
    "clear" + this.toFirstUpper();

adderOrSetter(EStructuralFeature this) :
    if (isCollection()) then name.adder() else name.setter();

modifierParameterName(EStructuralFeature this) :
    if (isCollection()) then name.toSingleName() else name;

previousFieldName(EStructuralFeature this) :
    "previous" + modifierParameterName().toFirstUpper();
    
private toSingleName(String this) : 
    if (endsWith("ies")) then subString(0, length-3) + "y"
    else if (endsWith("s")) then subString(0, length-1)
    else this;
	
isCollection(ETypedElement this) :
    upperBound == -1;
    
isReference(EStructuralFeature this) :
    EReference.isInstance(this);
    
isObjectReference(ETypedElement this) : eType.isObjectReference();
isObjectReference(EClassifier this) :
    !isValueType() && !isPrimitive() && !isEnum();
	
isConstructorInjectedProperty(EStructuralFeature this) :
    !this.changeable && !this.isContainment() && !this.derived;
    
needsConstructorInstantiation(EStructuralFeature this) :
    !isConstructorInjectedProperty() && !derived &&
        (eType.isDependency() || hasInitializationAnnotation() || !isCollection() && isObjectReference() && !changeable);

isDerivedFrom(EClassifier this, String superTypeName) :
    let eClass = (EClass)this :
    EClass.isInstance(this) && eClass.eAllSuperTypes.exists(t|t.name == superTypeName);
    
isContainment(EStructuralFeature this) :
    EReference.isInstance(this) && ((EReference)this).containment;
        
isValueTypeClassName(String this, EPackage thisPackage) :
    thisPackage.getEClassifier(this).isValueType();
	
isBuiltInType(EClassifier this) :
    isPrimitive() || this.name == "Object" || isSemaphore() || this.name == "Throwable";

isPrimitive(EClassifier this) :
    (this.name == "EInt" || this.name == "EBoolean" || this.name == "EDouble" || this.isString());

isString(EClassifier this) : this.name == "EString";

isAny(ETypedElement this) : this.eType.name.isAnyTypeName();
isAnyTypeName(String this) : (this == "EObject" || this == "Object");

hasInitializationAnnotation(EStructuralFeature this) :
    getInitializationAnnotation() != null;

getInitializationAnnotation(EStructuralFeature this) :
    this.eAnnotations.typeSelect(InlineSimpleFieldInitializationAnnotation).first();

List[EClassifier] getUsedTypes(EOperation this) :
    this.eParameters
        .collect(p|p.eType)
        .union({this.eType})
        .union(eAllContents.typeSelect(TypedElement).collect(e|e.type))
        .reject(t|t == null)
        .reject(t|t.name == "EObject");
    
isMarkedWithAnnotation(EModelElement this, String key) : 
    eAnnotations.exists(a|a.source == key);

getAnnotationValue(EModelElement this, String key) : 
    eAnnotations.selectFirst(a|a.source == key).details.selectFirst(d|d.key == key).value;

isEnum(EClassifier this) : EEnum.isInstance(this);
isDataType(EClassifier this) : metaType.name == "ecore::EDataType"; // note: EDataType.isInstance(this) does not work

getDocumentation(EModelElement this) :
    let documentationDetail = eAnnotations.collect(a|a.details.selectFirst(d|d.key == "documentation")).selectFirst(d|d != null) :
    if (documentationDetail != null) then documentationDetail.value else null;
    