import commandBehavior;
import queryBehavior;
import ecore;

extension mpw::generator::xtend::types::MetaModelGeneratorExtensions;
extension mpw::generator::xtend::types::EmfGeneratorExtensions;
extension mpw::generator::xtend::util::GlobalsGeneratorExtensions;

/*
 * Extensions related to the generation of commands (Generic).
 */

getCommandNamespace(Transformation this) :
    "commands";

Transformation getCommandForOperation(EOperation operation) : 
    operation.eAnnotations.selectFirst(a|a.source == "command").contents.first();

// in case the type is a role type (e.g. EditorHamster), the concrete name will be returned (e.g. ConcreteHamster)
// otherwise, the name of the type is returned.
getConcreteNameForRoleElseName(EClassifier this) : 
    if (isMarkedWithAnnotation("baseName")) then "Concrete" + getAnnotationValue("baseName")
    else name;

getConcreteName(EClassifier this) : 
    if (!name.startsWith("Concrete")) then "Concrete" + name
    else name;

getConcreteTypeName(InstanceCondition this) :
    let transformation = (Transformation)eRootContainer : 
    if (transformation.targetClass.name == this.instanceType.name) then "Concrete" + this.instanceType.name
    else this.instanceType.name;

getVisibility(Unit this) : 
    if (name == "execute") then "public" else "private";
  
getVariableNameForFindReference(ManyReferenceCondition this) :
    if (isPolymorphic()) then target.variableName + this.type.eType.name
    else target.variableName;
  
isPolymorphic(ManyReferenceCondition this) :
    this.type.eType.name != this.target.instanceType.name;
  
getParentTransformation(Unit this):
    (Transformation)eContainer;
  
isActorCommand(Transformation this):
    targetClass.eAllSuperTypes.exists(t|t.name == "Actor");
    
commandSetter(EClassifier type) : 
    if (type.isValueType()) then "executeSetValueProperty"
    else if (type.isEnum()) then "executeSetEnumProperty"
    else if (type.isString()) then "executeSetStringProperty"
    else "executeSetProperty";
    
commandAdder() : "executeAddReference";
    
commandRemover() : "executeRemoveReference";

needsGameLogInsertion(Transformation this) :
    isActorCommand() && name != "write";

// since the targetClass points to the ConcreteXxx class (after role transformation), the base name 
// has to be used for some use cases.
getCommandTargetClassBaseName(Transformation this) :
    if (targetClass.isMarkedWithAnnotation("baseName")) then targetClass.getAnnotationValue("baseName")
    else targetClass.name;
