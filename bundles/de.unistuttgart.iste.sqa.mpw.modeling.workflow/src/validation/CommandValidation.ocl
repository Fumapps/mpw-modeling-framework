import _'http://www.eclipse.org/emf/2011/Henshin'

package henshin

context Module

-- all rules need a "self" instance
def: allRules : Sequence(Rule) = units->select(oclIsTypeOf(Rule))->collect(oclAsType(Rule))
inv allRulesHaveSelf: allRules ->forAll(lhs.nodes->exists(n|n.name = 'self'))

-- if there is no single main unit, each rule has to be distinguishable by attribute conditions on this
def: noSingleMainUnit : Boolean = (units->size() > 1 and units->forAll(oclIsTypeOf(Rule)))
inv mainUnitsAreDistinguishable: noSingleMainUnit implies allRules->collect(selfNode)->forAll(attributes->notEmpty())

-- if there is any non Rule Unit, a main unit with the module's name has to be available
def: anyNonRuleUnit : Boolean = units->exists(not oclIsTypeOf(Rule))
inv moduleNamedUnitExists: anyNonRuleUnit implies units->exists(name = oclContainer().oclAsType(Module).name)

-- every module has to have a name
inv moduleHasName: not (name.oclIsUndefined() or name = null)

context Rule
def: selfNode : Node = lhs.nodes->any(name = 'self')

context Edge

def: isManyReference : Boolean = type.many -- type.upperBound = -1
def: isLhs : Boolean = action.toString() <> 'create'
def: isExploringEdge : Boolean = isLhs and action.toString() <> 'delete*'

-- intersection of multi-references is not supported (might be extended in future)
inv multipleManyReferencesToObjectNotSupported:
    isManyReference and isExploringEdge implies target.incoming->select(r|r.isManyReference and isExploringEdge)->size() = 1

endpackage