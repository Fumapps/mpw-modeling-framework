«IMPORT ecore»
«IMPORT queryBehavior»

«EXTENSION template::cpp::CppGeneratorExtensions»

«DEFINE QueryDeclarations FOR EClass»
    «FOREACH eAllOperations.select(o|o.isQuery() && !o.isPropertyGetter()).collect(o|o.getQueryForOperation()) AS q»
    «q.toCppQueryReturnType()» «q.name»(«FOREACH q.parameters AS p SEPARATOR ", "»«p.toCppType()» «p.name»«ENDFOREACH») const noexcept override;
    «EXPAND HelperStatementDeclarations FOR q.eAllContents.typeSelect(StatementsExpression).select(e|e.needsHelperMethod)-»
    «ENDFOREACH»
«ENDDEFINE»

«DEFINE QueryDefinitions FOR EClass»
    «FOREACH eAllOperations.select(o|o.isQuery() && !o.isPropertyGetter()).collect(o|o.getQueryForOperation()) AS q»
    «q.toCppQueryReturnType()» «name»::«q.name»(«FOREACH q.parameters AS p SEPARATOR ", "»«p.toCppType()» «p.name»«ENDFOREACH») const noexcept {
        try {
              return «EXPAND ExpressionDefinition FOR q.mainExpression-»;
        } catch (...) {
            return «q.getDefaultValueLiteralString()»;
        }
    }
    «EXPAND HelperStatementDefinition FOREACH q.eAllContents.typeSelect(StatementsExpression).select(e|e.needsHelperMethod)-»
    «ENDFOREACH»
«ENDDEFINE»

«DEFINE ExpressionDefinition FOR Expression-»«ENDDEFINE»

«DEFINE ExpressionDefinition FOR VariableExpression-»
    «valueExpression.toConstCppType()» «variableName» = «EXPAND ExpressionDefinition FOR valueExpression»;
«ENDDEFINE»

«DEFINE ExpressionDefinition FOR NotExpression-»
    !(«EXPAND ExpressionDefinition FOR inner-»)«REM»avoid newline«ENDREM-»
«ENDDEFINE»

«DEFINE ExpressionDefinition FOR OldExpression-»
    «EXPAND ExpressionDefinition FOR inner-»
«ENDDEFINE»

«DEFINE ExpressionDefinition FOR ImpliesExpression-»
    («EXPAND ExpressionDefinition FOR lhs») ? («EXPAND ExpressionDefinition FOR rhs») : true«REM»avoid newline«ENDREM-»
«ENDDEFINE»

«DEFINE ExpressionDefinition FOR OrExpression-»
    «EXPAND ExpressionDefinition FOR lhs» || «EXPAND ExpressionDefinition FOR rhs-»
«ENDDEFINE»

«DEFINE ExpressionDefinition FOR AndExpression-»
    «EXPAND ExpressionDefinition FOR lhs» && «EXPAND ExpressionDefinition FOR rhs-»
«ENDDEFINE»

«DEFINE ExpressionDefinition FOR CompareExpression-»
    «EXPAND ExpressionDefinition FOR lhs» «operator.toOperatorCode()» «EXPAND ExpressionDefinition FOR rhs-»
«ENDDEFINE»

«DEFINE ExpressionDefinition FOR CalculationExpression-»
    «EXPAND ExpressionDefinition FOR lhs» «operator.toOperatorCode()» «EXPAND ExpressionDefinition FOR rhs-»
«ENDDEFINE»

«DEFINE ExpressionDefinition FOR ConstantExpression-»
    «literal.toCppLiteral()-»
«ENDDEFINE»

«DEFINE ExpressionDefinition FOR StatementsExpression-»
    «IF needsHelperMethod-»
        «EXPAND CallHelperStatementMethod FOR this-»
    «ELSE-»
        «EXPAND template::cpp::queries::CppStatementsTemplate::StatementsDefinitions FOR this-»
    «ENDIF-»
«ENDDEFINE»

«DEFINE CallHelperStatementMethod FOR StatementsExpression-»
    «helperMethodName»(«FOREACH this.findParameterList() AS p SEPARATOR ", "»«p.name»«ENDFOREACH»)«REM»avoid newline«ENDREM-»
«ENDDEFINE»

«DEFINE HelperStatementDeclarations FOR List[StatementsExpression]»
      «IF this.size > 0»private:«ENDIF»
      «EXPAND HelperStatementDeclaration FOREACH this»
      «IF this.size > 0»public:«ENDIF»
«ENDDEFINE»

«DEFINE HelperStatementDeclaration FOR StatementsExpression»
      «this.toConstCppType()» «helperMethodName»(«FOREACH this.findParameterList() AS p SEPARATOR ", "»«p.toCppType()» «p.name»«ENDFOREACH») const noexcept;
«ENDDEFINE»

«DEFINE HelperStatementDefinition FOR StatementsExpression-»
      «EXPAND HelperStatementDefinitionForClassName(findContextClass().name) FOR this-»
«ENDDEFINE»

«DEFINE HelperStatementDefinitionForClassName(String className) FOR StatementsExpression»
      «this.toCppType()» «className»::«helperMethodName»(«FOREACH this.findParameterList() AS p SEPARATOR ", "»«p.toCppType()» «p.name»«ENDFOREACH») const noexcept {
          «REM»Note: for helper methods intermediary statements are used, which generate the 'return' by themselves«ENDREM-»
          «EXPAND template::cpp::queries::CppStatementsTemplate::StatementsDefinitions FOR this-»
      }
«ENDDEFINE»
