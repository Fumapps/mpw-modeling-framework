«IMPORT ecore»
«IMPORT generationAnnotations»

«EXTENSION template::cpp::CppGeneratorExtensions»

«REM»
  Generate entity ecore files.
«ENDREM»
«DEFINE main FOR List[EPackage]»
    «EXPAND EcoreFile FOREACH this»
«ENDDEFINE»

«DEFINE EcoreFile FOR EPackage»
    «EXPAND CppClass FOREACH this.eClassifiers.typeSelect(EClass)
                                 .reject(c|c.interface)
                                 .reject(c|c.isValueType())
                                 .reject(c|c.isFacade())»
    «EXPAND template::cpp::types::CppValueTypeTemplate::ValueTypeTemplate FOREACH this.eClassifiers.typeSelect(EClass).select(c|c.isValueType())»
    «EXPAND CppInterface FOREACH this.eClassifiers.typeSelect(EClass).select(c|c.interface)»
    «EXPAND CppEnum FOREACH this.eClassifiers.typeSelect(EEnum)»
«ENDDEFINE»

«DEFINE CppClass FOR EClass»
    «EXPAND CppClassHeader FOR this»
    «EXPAND CppClassSource FOR this»
«ENDDEFINE»

«DEFINE CppClassHeader FOR EClass»
    «FILE toIntermediaryIncludePath() + "generated/" + name + ".h"»«toCppHeaderGeneratedComment()»
    
    #ifndef «this.toCppIncludeGuard()»
    #define «this.toCppIncludeGuard()»
    
    «EXPAND template::cpp::types::CppImportUsedTypesTemplate::HeaderImportDefinitions FOR this»
    
    «EXPAND template::cpp::types::CppImportUsedTypesTemplate::ForwardDeclarations FOR this»
    
    namespace «this.ePackage.name» {
    
    «documentationToCppDoc()-»
    class «this.name» «this.toInheritance()» {
    
    private:
    
        «this.toInheritedAlias()-»
        
        «EXPAND template::cpp::properties::CppPropertyTemplate::PropertyDefinitions FOR this»
      
    public:
        «EXPAND template::cpp::properties::CppPropertyTemplate::ConstructorDeclaration FOR this»
        «EXPAND template::cpp::properties::CppPropertyTemplate::StaticSharedFromThisDefinition FOR this»
        «EXPAND template::cpp::CppQueriesTemplate::QueryDeclarations FOR this»
        «EXPAND template::cpp::commands::CppCommandCallsTemplate::CommandDeclarations FOR this»
        «EXPAND template::cpp::properties::CppPropertyTemplate::GetPropertyDeclarations FOR this»
        «EXPAND template::cpp::properties::CppPropertyTemplate::GetPropertyValueDeclarations FOR this»
        «EXPAND template::cpp::properties::CppPropertyTemplate::SetPropertyValueDeclarations FOR this»
        «EXPAND template::cpp::properties::CppPropertyTemplate::VirtualBaseMethodDelegateDefinitions FOR this»
      
    public:
    
        virtual ~«this.name»() = «IF needsImplSubclass() || abstract»0«ELSE»default«ENDIF»;
          
        «FOREACH operationsWithoutGenerationAnnotations() AS o-»
            «o.operationToVirtualSignature()» = 0;
            «IF o.eType != null && o.eType.isObjectReference()-»
                «o.operationToVirtualConstSignature()» = 0;
            «ENDIF-»
        «ENDFOREACH-»
        «FOREACH operationsWithGenerationAnnotations() AS o»
            «o.operationToNonVirtualSignature()»;
        «ENDFOREACH»
        
        «EXPAND GenerationAnnotationDeclaration FOREACH eAnnotations-»
        «EXPAND template::cpp::properties::CppReflectivePropertyAccessorsTemplate::ReflectivePropertyKeyDefinitions FOR this»
        «EXPAND template::cpp::properties::CppReflectivePropertyAccessorsTemplate::ReflectivePropertyMethodDeclarations FOR this»

    };
    
    }
    
    #endif //«this.toCppIncludeGuard()»
    
    «ENDFILE»
    
    «IF needsImplSubclass()»
    «FILE "impl/" + name + "Impl.h"»
    #ifndef «this.toCppImplIncludeGuard()»
    #define «this.toCppImplIncludeGuard()»
    
    «EXPAND template::cpp::types::CppImportUsedTypesTemplate::ImplImportDefinitions FOR this»
    
    namespace «this.ePackage.name» {
    
    class «this.name»Impl : public «this.name» {
    private:
        using inherited = «this.name»;

    public:
        «EXPAND template::cpp::properties::CppPropertyTemplate::ImplConstructorDeclaration FOR this»
        «FOREACH this.getManualImplementedOperations() AS o»
        «o.operationToOverrideSignature()»;
        «ENDFOREACH»
    };
    
    }
    
    #endif //«this.toCppImplIncludeGuard()»
    «ENDFILE»
    «ENDIF»
«ENDDEFINE»

«DEFINE CppClassSource FOR EClass»
    «FILE toIntermediaryIncludePath() + "generated/" + name + ".cpp"»«toCppHeaderGeneratedComment()»

    #include "«name».h"
    
    «EXPAND template::cpp::types::CppImportUsedTypesTemplate::SourceImportDefinitions FOR this»
    
    namespace «this.ePackage.name» {
    
        «EXPAND template::cpp::properties::CppPropertyTemplate::ConstructorDefinition FOR this»
        «EXPAND template::cpp::properties::CppPropertyTemplate::DestructorDefinition FOR this»
        «EXPAND template::cpp::CppQueriesTemplate::QueryDefinitions FOR this»
        «EXPAND template::cpp::commands::CppCommandCallsTemplate::CommandDefinitions FOR this»
        «EXPAND template::cpp::properties::CppPropertyTemplate::GetPropertyDefinitions FOR this»
        «EXPAND template::cpp::properties::CppPropertyTemplate::GetPropertyValueDefinitions FOR this»
        «EXPAND template::cpp::properties::CppPropertyTemplate::SetPropertyValueDefinitions FOR this»
        «FOREACH operationsWithoutGenerationAnnotations() AS o-»
        // TODO Source Operation «o.operationToSourceSignature(name)» {}
        «ENDFOREACH-»
        «FOREACH operationsWithGenerationAnnotations() AS o»
            «o.operationToSourceSignature(name)» {
                «EXPAND template::cpp::CppGenerateClassesTemplate::GenerationAnnotationOperationDefinition FOREACH o.eAnnotations-»
            }
        «ENDFOREACH»
        
        «EXPAND GenerationAnnotationDefinition(this) FOREACH eAnnotations-»
        «EXPAND template::cpp::properties::CppReflectivePropertyAccessorsTemplate::ReflectivePropertyMethodSources FOR this»
    }
    «ENDFILE»
    
    «IF needsImplSubclass()»
    «FILE "impl/" + name + "Impl.cpp"»#include "«name»Impl.h"
    
    #include <stdexcept>
      
    namespace «this.ePackage.name» {
      
    «EXPAND template::cpp::properties::CppPropertyTemplate::ImplConstructorDefinition FOR this»
    
    «FOREACH this.getManualImplementedOperations() AS o»
    «o.operationToSourceSignature(name + "Impl")» {
        throw std::runtime_error("not implemented");
    }
    «ENDFOREACH»
      
    }
    
    «ENDFILE»
    «ENDIF»
«ENDDEFINE»

«DEFINE CppInterface FOR EClass»
    «FILE toIntermediaryIncludePath() + "generated/" + name + ".h"»«toCppHeaderGeneratedComment()»
    
    #ifndef «this.toCppIncludeGuard()»
    #define «this.toCppIncludeGuard()»
    
    «EXPAND template::cpp::types::CppImportUsedTypesTemplate::HeaderImportDefinitions FOR this»
    
    «EXPAND template::cpp::types::CppImportUsedTypesTemplate::ForwardDeclarations FOR this»
    
    namespace «this.ePackage.name» {
    
    «documentationToCppDoc()-»
    class «this.name» «this.toInheritance()» «IF name == "Entity"», public ReflectivePropertyObject«ENDIF» {
    
    public:
    
        virtual ~«this.name»() = default;
        
        «EXPAND template::cpp::properties::CppPropertyTemplate::StaticSharedFromThisDefinition FOR this»
          
        «FOREACH eOperations AS o»
        «IF o.isPropertyGetter()-»
            «o.operationToVirtualPropertyGetterSignature()» = 0;
            «o.operationToConstVirtualPropertyGetterSignature()» = 0;
            «o.operationToObservableGetterSignature()» = 0;
            «o.operationToConstObservableGetterSignature()» = 0;
        «ELSE-»
            «o.operationToVirtualSignature()»«IF o.isQuery()» const noexcept«ENDIF» = 0;
        «ENDIF-»
        «ENDFOREACH»
        «EXPAND GenerationAnnotationDeclaration FOREACH eAnnotations»
    };
    
    }
    
    #endif //«this.toCppIncludeGuard()»
    
    «ENDFILE»

    «IF isDependency()»
    «FILE toIntermediaryIncludePath() + "generated/Dummy" + name + ".h"»«toCppHeaderGeneratedComment()»
    
    #ifndef «this.toCppDummyIncludeGuard()»
    #define «this.toCppDummyIncludeGuard()»
    
    #include "«name».h"
    
    namespace «this.ePackage.name» {
    
    class Dummy«name» : public «name» {
    public:
        «FOREACH this.eAllOperations AS o»
            «o.operationToOverrideSignature()» {
          throw std::runtime_error("not implemented");
        }
        «ENDFOREACH»
    };
    
    }
    
    #endif //«this.toCppDummyIncludeGuard()»
    
    «ENDFILE»
    «ENDIF»
«ENDDEFINE»

«DEFINE CppEnum FOR EEnum»
    «FILE toIntermediaryIncludePath() + "/generated/" + name + ".h"»«toCppHeaderGeneratedComment()»
    
    #ifndef «this.toCppIncludeGuard()»
    #define «this.toCppIncludeGuard()»
    
    namespace «this.ePackage.name» {
    
    «documentationToCppDoc()-»
    enum class «this.name» {
        «FOREACH eLiterals AS l SEPARATOR ", "»
        «l»
        «ENDFOREACH»
    };
    
    }
    
    #endif //«this.toCppIncludeGuard()»
    
    «ENDFILE»
«ENDDEFINE»

«DEFINE GenerationAnnotationDeclaration FOR EAnnotation»«ENDDEFINE»

«DEFINE GenerationAnnotationDeclaration FOR GetPropertyDeclarationAnnotation»
    virtual «getterType.toCppType()» «getterOperationName»() noexcept = 0;
«ENDDEFINE»

«DEFINE GenerationAnnotationDeclaration FOR GetPropertyAnnotation»
    «getterType.toCppType()» «getterOperationName»() noexcept«IF override» override«ENDIF»;
«ENDDEFINE»

«DEFINE GenerationAnnotationDefinition(EClass class) FOR EAnnotation»«ENDDEFINE»

«DEFINE GenerationAnnotationDefinition(EClass class) FOR GetPropertyAnnotation»
    «getterType.toCppType()» «class.name»::«getterOperationName»() noexcept {
        return this->«field.resolveFieldValue()»;
    }
«ENDDEFINE»

«DEFINE CMakeLists FOR List[EPackage]»
    «FILE "generated/CMakeLists.txt"-»# generated
    
set(GEN_SRCS ${GEN_SRCS}
    «FOREACH this.eClassifiers.typeSelect(EClass)
                              .reject(c|c.isDataType())
                              .reject(c|c.interface) AS c-»
    "src/«c.toIntermediaryIncludePath()»generated/«c.name».cpp"
    «ENDFOREACH-»
    «FOREACH this.eClassifiers.typeSelect(EClass)
                              .reject(c|c.isDataType()) AS c-»
    "src/«c.toIntermediaryIncludePath()»generated/«c.name».h"
    «ENDFOREACH-»
    «FOREACH this.eClassifiers.typeSelect(EEnum) AS c-»
    "src/«c.toIntermediaryIncludePath()»generated/«c.name».h"
    «ENDFOREACH-»
    ${GEN_COMMAND_SRCS}
    PARENT_SCOPE)

    «ENDFILE»
    «FILE "impl/CMakeListsImpl.cmake"-»# generated
set(IMPL_GEN_SRCS ${IMPL_GEN_SRCS}
    «FOREACH this.eClassifiers.typeSelect(EClass)
                              .select(c|c.needsImplSubclass())
                              .reject(c|c.isFacade()) AS c-»
    "src/impl/«c.name»Impl.h"
    "src/impl/«c.name»Impl.cpp"
    «ENDFOREACH-»)
    «ENDFILE»
«ENDDEFINE»
