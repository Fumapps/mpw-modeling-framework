«IMPORT commandBehavior»
«IMPORT queryBehavior»

«EXTENSION template::cpp::CppGeneratorExtensions»

«DEFINE main FOR Transformation»
    «FILE "generated/commands/" + name.toFirstUpper() + "Command.h"»«toCppHeaderGeneratedComment()»
        
        #ifndef «this.toCppIncludeGuard()»
        #define «this.toCppIncludeGuard()»
        
        #include "CompositeCommandBase.h"
        #include "«name.toFirstUpper()»CommandParameters.h"
        «EXPAND template::cpp::types::CppImportUsedTypesTemplate::CommandUsedTypeIncludeDefinitions FOR this»
        
        namespace «getCommandNamespace()» {
        
        «documentation.toCppDoc()»
        class «name.toFirstUpper()»Command final : public CompositeCommandBase {
        private:
            «EXPAND template::cpp::commands::CppCommandParametersTemplate::ParameterFieldDefinitions FOR this»
        
        public:
        
            «name.toFirstUpper()»Command(«name.toFirstUpper()»CommandParameters parameters)
            «EXPAND template::cpp::commands::CppCommandParametersTemplate::ConstructorParameterInitializationDefinitions("parameters.") FOR this»
            {
            }
            
            void execute() override;
        
            private:
            «EXPAND template::cpp::commands::CppCommandUnitTemplate::UnitDeclaration FOR mainUnit»
            «EXPAND template::cpp::commands::CppCommandUnitTemplate::UnitDeclaration FOREACH units.excluding(mainUnit)»
            «EXPAND template::cpp::CppQueriesTemplate::HelperStatementDeclaration FOREACH this.eAllContents
                                                                                     .typeSelect(Constraint)
                                                                                     .eAllContents
                                                                                     .typeSelect(StatementsExpression)
                                                                                     .select(e|e.needsHelperMethod)-»
        };
        
        }
        
        #endif //«this.toCppIncludeGuard()»

    «ENDFILE»
    «FILE "generated/commands/" + name.toFirstUpper() + "Command.cpp"»«toCppHeaderGeneratedComment()»
        
        #include "«name.toFirstUpper()»Command.h"

        #include "FrameworkAssert.h"
        #include "CommandConstraintException.h"
        #include "«targetClass.getConcreteName()».h"
        #include "GameLog.h"
        «IF eAllContents.typeSelect(CollectionMethodStatement).exists(s|s.isComplexMethodStatement())-»
            #include "CollectionHelpers.hpp"
        «ENDIF-»
        #include <stdexcept>
        
        using namespace framework;
    
        namespace «getCommandNamespace()» {
        
            «EXPAND template::cpp::commands::CppCommandUnitTemplate::UnitExpand FOR mainUnit»
            «EXPAND template::cpp::commands::CppCommandUnitTemplate::UnitExpand FOREACH units.excluding(mainUnit)»
            «EXPAND template::cpp::CppQueriesTemplate::HelperStatementDefinitionForClassName(name.toFirstUpper()+"Command") FOREACH this.eAllContents
                                                                                     .typeSelect(Constraint)
                                                                                     .eAllContents
                                                                                     .typeSelect(StatementsExpression)
                                                                                     .select(e|e.needsHelperMethod)-»
        }
        
    «ENDFILE»
    «FILE "generated/commands/" + name.toFirstUpper() + "CommandParameters.h"»«toCppHeaderGeneratedComment()»
    
        #ifndef «this.toCppParameterIncludeGuard()»
        #define «this.toCppParameterIncludeGuard()»
        
        «EXPAND template::cpp::commands::CppCommandParametersTemplate::CommandParametersClassDefinition FOR this»
        
        #endif //«this.toCppParameterIncludeGuard()»

    «ENDFILE»
«ENDDEFINE»

«DEFINE CMakeLists FOR List[Transformation]»
    «FILE "generated/commands/CMakeLists.txt"-»# generated
    
set(GEN_COMMAND_SRCS ${GEN_COMMAND_SRCS}
    «FOREACH this AS c-»
    "core/src/generated/commands/«c.name.toFirstUpper()»CommandParameters.h"
    "core/src/generated/commands/«c.name.toFirstUpper()»Command.h"
    "core/src/generated/commands/«c.name.toFirstUpper()»Command.cpp"
    «ENDFOREACH-»
    PARENT_SCOPE)
    «ENDFILE»
«ENDDEFINE»
