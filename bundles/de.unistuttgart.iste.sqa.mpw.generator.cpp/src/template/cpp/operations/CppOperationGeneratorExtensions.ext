import ecore;
import generationAnnotations;
import generationAnnotations;

extension mpw::generator::xtend::operations::OperationGeneratorExtensions reexport;

extension template::cpp::types::CppEmfGeneratorExtensions;
extension template::cpp::queries::CppQueryGeneratorExtensions;
extension mpw::generator::xtend::BasicLanguageExtensions;

/*
 * Extensions related to EOperations (C++).
 */

operationToVirtualSignature(EOperation this) : operationToSignatureWithOptionalVirtual(true);
operationToNonVirtualSignature(EOperation this) : operationToSignatureWithOptionalVirtual(false);

private operationToSignatureWithOptionalVirtual(EOperation this, Boolean virtual) :
    documentationToCppDoc() + (if (virtual) then "virtual " else "") + operationToReturnType() + " " + effectiveOperationName() + "(" + getOperationParameters() + ")";

operationToVirtualConstSignature(EOperation this) : operationToConstSignatureWithOptionalVirtual(true);
operationToNonVirtualConstSignature(EOperation this) : operationToConstSignatureWithOptionalVirtual(false);

private operationToConstSignatureWithOptionalVirtual(EOperation this, Boolean virtual) :
    documentationToCppDoc() + (if (virtual) then "virtual " else "") + operationToConstReturnType() + " " + effectiveOperationName() + "(" + getOperationParameters() + ") const";

operationToOverrideSignature(EOperation this) :
    operationToReturnType() + " " + effectiveOperationName() + "(" + getOperationParameters() + ") override";

operationToSourceSignature(EOperation this, String className) :
    operationToReturnType() + " " + className + "::" + effectiveOperationName() + "(" + getOperationParameters() + ")";

private getOperationParameters(EOperation this) :
    if (isCommand()) then "commands::" + name.toFirstUpper() + "CommandParameters& parameters" 
    else eParameters.collect(e|e.toCppType() + " " + e.name).joinToString(", ");

private operationToReturnType(EOperation this) :
    if (isQuery()) then this.getQueryForOperation().toCppQueryReturnType()
    else operationToCppType();

// Note: currently only used for simple operations, do not cover all cases like the non-const one (might be improved in future)
private operationToConstReturnType(EOperation this) :
    operationToConstCppType();

documentationToCppDoc(EOperation this) :
    let documentationText = getDocumentation() :
    if (documentationText != null) then documentationText.toCppDoc() else "";

private effectiveOperationName(EOperation this) :
    if (isPropertyGetter()) then name.getter() else name;

toOptionalDereferencingStar(ReturnAnnotation this) :
    let operation = (EOperation)eContainer :
    if (operation.isMarkedWith("fluent")) then "*"
    else "";
