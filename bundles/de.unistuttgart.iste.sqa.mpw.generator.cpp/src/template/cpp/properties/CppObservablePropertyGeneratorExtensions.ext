import ecore;

extension mpw::generator::xtend::properties::ObservablePropertyGeneratorExtensions reexport;

extension template::cpp::types::CppEmfGeneratorExtensions;
extension template::cpp::types::CppMetaModelGeneratorExtensions;

/*
 * Extensions related to EStructuralFeatures which shall be generated as observable properties (C++).
 */

featureToObservableFieldType(ETypedElement this) :
    if (EReference.isInstance(this) && !this.eType.isValueType()) then ((EReference)this).referenceToObservableFieldType()
	else ((EAttribute)this).attributeToObservableFieldType();
    
private referenceToObservableFieldType(EReference this) :
	if (this.upperBound == -1) then (
	    if (this.containment) then "framework::ObservableObjectContainmentListProperty<" + this.eType.name + ">"
	    else "framework::ObservableObjectReferenceListProperty<" + this.eType.name + ">" )
	else (
	    if (this.containment) then "framework::ObservableObjectContainmentProperty<" + this.eType.name + ">"
        else "framework::ObservableObjectReferenceProperty<" + this.eType.name + ">" );
    
private attributeToObservableFieldType(EStructuralFeature this) :
	if (this.upperBound == -1) then "framework::ObservablePrimitiveListProperty<" + this.toCppType() + ">"
	else "framework::ObservablePrimitiveProperty<" + this.toCppType() + ">";

propertyGetterToObservableFieldType(ETypedElement this) : 
    if (this.upperBound == -1) then "framework::ObservableListProperty<" + toCppInPropertyName() + ">"
    else if (EAttribute.isInstance(this) || eType.isBuiltInType() || eType.isEnum() || eType.isValueType()) then "framework::ObservablePrimitiveProperty<" + toCppInPropertyName() + ">"
    else "framework::ObservableObjectProperty<" + toCppInPropertyName() + ">";
    
// Avoid that std::shared_ptr is wrapped around references
private toCppInPropertyName(ETypedElement this) :
    if (EAttribute.isInstance(this) || this.eType.isBuiltInType()) then toCppType()
    else eType.ePackage.name + "::" + eType.name;

featureToObservableFieldInstantiation(EStructuralFeature this) :
    let defaultValue = defaultValueOf(this) :
    let defaultValuePart = if (defaultValue != null) then ", " + defaultValue else "" :
    
	if (this.upperBound == -1) then "{}"
	else if (this.eType.isBuiltInType()) then "{}"
	else "{ nullptr }";

operationToObservableGetterSignature(EOperation this) :
    "virtual const " + propertyGetterToObservableFieldType() + "& " + name + "Property()";
    
featureToCppPropertyGetter(EStructuralFeature this) : 
    if (this.isObjectReference() && this.isCollection()) then "framework::ObjectListView<" + this.eType.name + ">&"
    else featureToCppType();
    