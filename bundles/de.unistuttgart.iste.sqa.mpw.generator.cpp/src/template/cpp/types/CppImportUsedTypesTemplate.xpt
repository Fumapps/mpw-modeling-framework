«IMPORT ecore»
«IMPORT commandBehavior»
«IMPORT queryBehavior»
«IMPORT generationAnnotations»

«EXTENSION template::cpp::CppGeneratorExtensions»

«DEFINE HeaderImportDefinitions FOR EClass»
    #include <memory>
    #include <string>
    «IF name == "Entity"-»
    #include "ReflectivePropertyObject.h"
    «ENDIF-»
	«IF eStructuralFeatures.union(eOperations).exists(e|e.isCollection())-»
    #include <list>
    #include <unordered_set>
	«ENDIF-»
    «IF eStructuralFeatures.union(eOperations).exists(e|e.eType.isSemaphore())-»
    #include "MpwSemaphore.h"
    «ENDIF-»
	«IF (abstract ? eOperations : eAllOperations).select(o|o.isQuery()).exists(o|o.getQueryForOperation().isOptional)-»
    #include <optional>
	«ENDIF-»
    «IF eOperations.exists(o|o.getUsedTypes().exists(t|t.name == "Throwable"))-»
    #include <stdexcept>
    «ENDIF-»
	«IF eStructuralFeatures.union(eOperations).exists(e|e.isAny())-»
    #include "Any.h"
	«ENDIF-»
    «IF eStructuralFeatures.exists(f|f.isObservableProperty()) ||
        eOperations.exists(o|o.isPropertyGetter())-»
	#include "ObservableProperties.h"
    «ENDIF-»
	«IF eStructuralFeatures.exists(f|f.isObservableProperty() && f.isCollection()) || 
	    eOperations.exists(o|o.isPropertyGetter())-»
	#include "ObservableListProperties.h"
	«ENDIF-»
    «IF eStructuralFeatures.exists(f|!f.isObservableProperty() && f.isCollection()) || 
        eOperations.exists(o|o.isPropertyGetter())-»
    #include "SimpleListProperties.h"
    «ENDIF-»
    «IF eStructuralFeatures.exists(f|f.isCollection() && f.eType.isObjectReference())-»
    #include "ObjectListView.hpp"
    «ENDIF-»
    «EXPAND SingleImportDefinition FOREACH eSuperTypes
        .union(eStructuralFeatures.collect(f|f.eType).select(t|t.isEnum() || t.isValueType()))
        .union(eStructuralFeatures.select(f|f.isObjectReference() && f.isCollection()).collect(f|f.eType))
        .union((abstract ? eOperations : eAllOperations).collect(o|o.getUsedTypes()).flatten().select(t|t.isEnum() || t.isValueType()))
		.reject(t|t.isDataType())
		.reject(t|t.isStereotype())
		.collect(t|t.name)
		.toSet()»
    «EXPAND CommandParametersImportDefinition FOREACH (abstract ? eOperations : eAllOperations)
        .select(o|o.isCommand())
        .collect(o|o.getCommandForOperation())»
«ENDDEFINE»

«DEFINE SourceImportDefinitions FOR EClass»
    #include <stdexcept>
    
    «IF eAllOperations.exists(o|o.isQuery())-»
    #include "CollectionHelpers.hpp"
    «ENDIF-»
    «IF eAllOperations.exists(o|o.isCommand())-»
    #include "CommandStack.h"
    «ENDIF-»
    «IF eAllOperations.exists(o|o.eAnnotations.typeSelect(CommandParameterCreationAnnotation).size > 0)-»
    #include "CommandStack.h"
    #include "GamePerformance.h"
    «ENDIF-»
    «EXPAND SingleImportDefinition FOREACH eStructuralFeatures
		.collect(e|e.eType)
		.union((abstract ? eOperations : eAllOperations).collect(o|o.getUsedTypes()).flatten())
		.union(eAllStructuralFeatures.select(e|e.isConstructorInjectedProperty()).collect(e|e.eType).flatten())
		.union(eAllContents.typeSelect(Statement).collect(s|s.type))
		.without(eStructuralFeatures.select(f|f.isObjectReference() && f.isCollection()).collect(f|f.eType))
		.reject(t|t.name == this.name)
		.reject(t|t.isDataType())
		.reject(t|t.isEnum())
        .reject(t|t.isValueType())
		.reject(t|t.isBuiltInType())
		.reject(t|t.isStereotype())
        .collect(t|t.name)
        .toSet()»
    «EXPAND CommandImportDefinition FOREACH eAllOperations
        .select(o|o.isCommand())
        .collect(o|o.getCommandForOperation())»
    «EXPAND SingleImportDefinition FOREACH eReferences
        .select(r|r.needsConstructorInstantiation())
        .select(r|r.eType.needsImplSubclass())
        .reject(r|r.eType.isDependency())
        .collect(r|r.eType.name + "Impl")»
    «EXPAND SingleImportDefinition FOREACH eReferences
        .select(r|r.eType.isDependency())
        .collect(r|"Dummy" + r.eType.name)»
«ENDDEFINE»

«DEFINE ForwardDeclarations FOR EClass»
    «EXPAND SingleForwardDeclarationDefinition FOREACH eStructuralFeatures
		.collect(e|e.eType)
		.union((abstract ? eOperations : eAllOperations).collect(o|o.getUsedTypes()).flatten())
		.union(eAllStructuralFeatures.select(e|e.isConstructorInjectedProperty()).collect(e|e.eType).flatten())
		.union(eAnnotations.typeSelect(GetPropertyAnnotation).collect(a|a.getterType))
		.union(eAnnotations.typeSelect(GetPropertyDeclarationAnnotation).collect(a|a.getterType))
		.toSet()
		.without(eStructuralFeatures.select(f|f.isObjectReference() && f.isCollection()).collect(f|f.eType))
		.reject(t|t == this)
		.reject(t|t.isDataType())
		.reject(t|t.isEnum())
		.reject(t|t.isValueType())
		.reject(t|t.isBuiltInType())
		.reject(t|t.isStereotype())»
«ENDDEFINE»

«DEFINE ImplImportDefinitions FOR EClass»
    «EXPAND SingleImportDefinition FOREACH eAllOperations
        .collect(e|e.eType)
        .add(this)
        .union(eOperations.collect(o|o.getUsedTypes()).flatten())
        .union(eAllStructuralFeatures.select(e|e.isConstructorInjectedProperty()).collect(e|e.eType).flatten())
        .reject(e|e == null)
        .reject(t|t.isBuiltInType())
        .collect(t|t.name)
        .toSet()»
«ENDDEFINE»

«DEFINE SingleImportDefinition FOR EClassifier-»
    #include "«name».h"
«ENDDEFINE»

«DEFINE SingleImportDefinition FOR String-»
    #include "«this».h"
«ENDDEFINE»

«DEFINE CommandParametersImportDefinition FOR Transformation-»
    #include "commands/«name.toFirstUpper()»CommandParameters.h"
«ENDDEFINE»

«DEFINE CommandImportDefinition FOR Transformation-»
    #include "commands/«name.toFirstUpper()»Command.h"
«ENDDEFINE»

«DEFINE SingleForwardDeclarationDefinition FOR EClassifier-»
    namespace «ePackage.name» { class «name»; }
«ENDDEFINE»

«DEFINE CommandParameterIncludeDefinitions FOR Transformation»
    #include <memory>

    «EXPAND SingleImportDefinition FOREACH mainUnit.parameters.collect(p|p.type)
                                                              .select(t|t.isEnum() || t.isValueType())
                                                              .reject(t|t.isDataType())»
    namespace «targetClass.ePackage.name» {
        class «targetClass.getConcreteName()»;
    }
    namespace commands {
        class CommandStack;
    }
    «IF isActorCommand()-»
    namespace mpw {
        class GameLog;
    }
    «ENDIF-»
    «EXPAND SingleForwardDeclarationDefinition FOREACH mainUnit.parameters.collect(p|p.type)
                                                              .select(t|t.isInheritedEntity())»
«ENDDEFINE»

«DEFINE CommandUsedTypeIncludeDefinitions FOR Transformation»
    «EXPAND SingleImportDefinition FOREACH mainUnit.parameters.collect(p|p.type)
                                                              .union(this.eAllContents.typeSelect(InstanceCondition).collect(c|c.instanceType))
                                                              .union(this.eAllContents.typeSelect(Statement).collect(s|s.type))
                                                              .reject(t|t.isDataType())
														      .collect(t|t.name)
														      .toSet()»
«ENDDEFINE»
