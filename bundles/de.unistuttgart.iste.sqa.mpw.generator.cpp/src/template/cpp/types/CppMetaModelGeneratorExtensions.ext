import ecore;

extension template::cpp::types::CppEmfGeneratorExtensions reexport;
extension mpw::generator::xtend::types::MetaModelGeneratorExtensions reexport;

extension mpw::generator::xtend::util::GlobalsGeneratorExtensions;

/*
 * Extensions related to the MPW Metamodel types (C++).
 */


toInheritance(EClass this) :
    let filteredExtends = eSuperTypes.typeSelect(EClass)
        .reject(e|e.interface) :
    let filteredInterfaces = eSuperTypes.typeSelect(EClass)
        .reject(e|e.isStereotype())
        .select(e|e.interface) :
    if (filteredExtends.size > 0 && filteredInterfaces.size > 0) then ": public " + toQualifiedTypeName(filteredExtends.get(0)) + ", public virtual " + filteredInterfaces.collect(i|toQualifiedTypeName(i)).toString(", public virtual ")
    else if (filteredExtends.size > 0) then ": public " + toQualifiedTypeName(filteredExtends.get(0))
    else if (filteredInterfaces.size > 0) then ": public virtual " + filteredInterfaces.collect(i|toQualifiedTypeName(i)).toString(", public virtual ")
    else ": public std::enable_shared_from_this<" + this.name + ">";

toInheritedAlias(EClass this) :
    let baseClass = getBaseClass() :
    if (baseClass != null) then "using inherited = " + baseClass.name + ";"
    else "";

toQualifiedTypeName(EClassifier this) :
    this.ePackage.name + "::" + this.name;

toQualifiedTypeName(String this, EPackage package) :
    package.name + "::" + this;
    
// a MiniProgrammingWorld has a complex lifecycle constructor, so it has to be solved by a static create method
needsStaticFactoryConstructorMethod(EClass this) :
    eAllSuperTypes.exists(t|t.name == "MiniProgrammingWorld");

toCppIncludeGuard(EClassifier this) : toCppIncludeGuard(this.name);
toCppImplIncludeGuard(EClassifier this) : toCppIncludeGuard(this.name + "Impl");
toCppDummyIncludeGuard(EClassifier this) : toCppIncludeGuard("Dummy" + this.name);

toCppIncludeGuard(String this) :
    getModulePackage().replaceAll("\\.", "_").toUpperCase() + "_" + this.toUpperCase() + "_H";

documentationToCppDoc(EModelElement this) :
    let documentationText = getDocumentation() :
    if (documentationText != null) then documentationText.toCppDoc() else "";

toCppHeaderGeneratedComment() : 
    "/*\n * This file is generated. Do not change it manually.\n */";

/*
 * Determines the intermediary path for the generated class.
 * Facade types -> "facade"
 * ValueTypes/Enums -> "datatypes"
 * View-Model types -> "viewmodel"
 * else -> ""
 */
toIntermediaryIncludePath(EClassifier this) :
    if (EEnum.isInstance(this) || this.isValueType()) then "datatypes/"
    else if (isFacade() || name == "MiniProgrammingWorld" || isInheritedMpw()) then "facade/" // note: MiniProgrammingWorld is needed in concrete facade sub-classes as a baseclass, hence it has to be included in facade folder
    else if (isViewModelType()) then "viewmodel/"
    else this.ePackage.name + "/";
