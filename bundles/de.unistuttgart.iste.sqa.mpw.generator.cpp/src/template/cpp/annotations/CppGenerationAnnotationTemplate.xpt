«IMPORT ecore»
«IMPORT commandBehavior»
«IMPORT queryBehavior»
«IMPORT generationAnnotations»

«EXTENSION template::cpp::CppGeneratorExtensions»

«REM»
    Xpand templates, to generate code snippets based on GenerationAnnotations.
«ENDREM»

«REM»
    Annotation Declarations
«ENDREM»
«DEFINE GenerationAnnotationDeclaration FOR EAnnotation»«ENDDEFINE-»

«DEFINE GenerationAnnotationDeclaration FOR GetPropertyDeclarationAnnotation»
    virtual «getterType.toCppType()» «getterOperationName»() noexcept = 0;
«ENDDEFINE»

«DEFINE GenerationAnnotationDeclaration FOR GetPropertyAnnotation-»
    «documentationToCppDoc()-»
    «getterType.toCppType()» «getterOperationName»() noexcept«IF override» override«ENDIF»;
    «documentationToCppDoc()-»
    «getterType.toConstCppType()» «getterOperationName»() const noexcept«IF override» override«ENDIF»;
«ENDDEFINE»

«REM»
    Annotation Definitions
«ENDREM»
«DEFINE GenerationAnnotationDefinition(EClass class) FOR EAnnotation»«ENDDEFINE-»

«DEFINE GenerationAnnotationDefinition(EClass class) FOR GetPropertyAnnotation-»
    «getterType.toCppType()» «class.name»::«getterOperationName»() noexcept {
        return this->«field.resolveFieldValue()»;
    }
    «getterType.toConstCppType()» «class.name»::«getterOperationName»() const noexcept {
        return this->«field.resolveFieldValue()»;
    }
    
«ENDDEFINE»

«DEFINE GenerationAnnotationOperationDefinition FOR EAnnotation»«ENDDEFINE»

«DEFINE GenerationAnnotationOperationDefinition FOR CommandParameterCreationAnnotation-»
    commands::«command.name.toFirstUpper()»CommandParameters «parametersVariableName»(
    /*self*/ nullptr, *game.lock()->get«command.roleName.toFirstUpper()»CommandStack()
    «IF command.isActorCommand()-»
    , game.lock()->getGameLog()
    «ENDIF-»
    «FOREACH parameterMappings AS mapping-»
         , «mapping.value-»
    «ENDFOREACH-»
    );
«ENDDEFINE»

«DEFINE GenerationAnnotationOperationDefinition FOR CommandCallAnnotation-»
    «IF command.isActorCommand()-»
        game.lock()->getPerformance()->preExecuteGameCommand();
        try {
            «targetRoleVariableName»->«command.name»(«parametersVariableName»);
            game.lock()->getPerformance()->delayControlFlow();
        } catch (std::exception& e) {
            // Stop the game to prevent execution of further commands!
            game.lock()->getPerformance()->setMode(mpw::Mode::STOPPED);
            throw; // rethrow
        }
    «ELSE-»
        game.lock()->getPerformance()->preExecuteEditorCommand();
        «targetRoleVariableName»->«command.name»(«parametersVariableName»);
    «ENDIF-»
«ENDDEFINE»

«DEFINE GenerationAnnotationOperationDefinition FOR QueryCallAnnotation-»
    return «internalRoleField.name»->«query.name»(«query.parameters.collect(p|p.name).toString(", ")»); 
«ENDDEFINE»

«DEFINE GenerationAnnotationOperationDefinition FOR ParameterToFieldAssignmentAnnotation-»
    this->«field.name» = «parameter.name»;
«ENDDEFINE»

«DEFINE GenerationAnnotationOperationDefinition FOR ConstructorSimpleFieldInitializationAnnotation-»
    this->«field.name» = std::make_shared<«constructorTypeName»>(«EXPAND template::cpp::CppQueriesTemplate::ExpressionDefinition FOREACH parameterInputVariableExpressions SEPARATOR ", "»);
«ENDDEFINE»

«DEFINE GenerationAnnotationOperationDefinition FOR ExpressionFieldAssignmentAnnotation-»
    this->«field.name» = «EXPAND template::cpp::CppQueriesTemplate::ExpressionDefinition FOR expression»;
«ENDDEFINE»

«DEFINE GenerationAnnotationOperationDefinition FOR AddVariableToCollectionAnnotation-»
    «EXPAND template::cpp::CppQueriesTemplate::ExpressionDefinition FOR collectionExpression».push_back(«EXPAND template::cpp::CppQueriesTemplate::ExpressionDefinition FOR parameterExpression»);
«ENDDEFINE»

«DEFINE GenerationAnnotationOperationDefinition FOR MethodCallAnnotation-»
    «variableName»->«methodName»(«EXPAND template::cpp::CppQueriesTemplate::ExpressionDefinition FOREACH parameterInputVariableExpressions SEPARATOR ", "»)«IF closingStatement»;«ENDIF-»
«ENDDEFINE»

«DEFINE GenerationAnnotationOperationDefinition FOR ReturnAnnotation-»
    return «toOptionalDereferencingStar()»«EXPAND template::cpp::CppQueriesTemplate::ExpressionDefinition FOR expression»;
«ENDDEFINE»

«DEFINE GenerationAnnotationOperationDefinition FOR ExpressionAnnotation-»
    «EXPAND template::cpp::CppQueriesTemplate::ExpressionDefinition FOR expression-»
«ENDDEFINE»

«DEFINE GenerationAnnotationOperationDefinition FOR VariableObjectConstructionAnnotation-»
    «constructorType.toCppType()» «variableName»«IF !constructorType.isValueType()» = std::make_shared<«constructorType.toQualifiedTypeName()»>«ENDIF»(«EXPAND template::cpp::CppQueriesTemplate::ExpressionDefinition FOREACH parameterInputVariableExpressions SEPARATOR ", "»);
«ENDDEFINE»

«DEFINE GenerationAnnotationOperationDefinition FOR VariableDefinitionAnnotation-»
    auto «variableName» = «EXPAND GenerationAnnotationOperationDefinition FOR rhs»;
«ENDDEFINE»

«REM»NOT USED for C++«ENDREM»
«DEFINE ImportTypeGenerationAnnotationDefinition(EClass class) FOR ImportTypeAnnotation-»
«ENDDEFINE»
