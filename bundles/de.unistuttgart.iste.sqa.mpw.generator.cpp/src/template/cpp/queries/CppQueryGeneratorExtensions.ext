import ecore;
import queryBehavior;
import commandBehavior;
import behaviorsbase;
import generationAnnotations;

extension mpw::generator::xtend::queries::QueryGeneratorExtensions reexport;

extension template::cpp::types::CppEmfGeneratorExtensions;
extension template::cpp::types::CppMetaModelGeneratorExtensions;

/*
 * Extensions related to the generation of queries (C++).
 */

toOperatorCode(CompareOperator this) : toDefaultOperatorCode();

toOperatorCode(CalculationOperator this) : toDefaultOperatorCode();

toConstCppType(behaviorsbase::TypedElement element) :
    toConstCppType(element.type.name, element.type.metaType.name, element.type.ePackage);

getDefaultValueLiteralString(Query query) : toDefaultValueLiteralString(query, query.defaultValueLiteral);
    
private toDefaultValueLiteralString(TypedElement element, String originalLiteral) :
    if (element.isOptional) then "std::nullopt"
    else if (element.type.isValueType()) then "{}"
    else originalLiteral.toCppLiteral();
    
getDefaultValueLiteralString(IntermediaryResultStatement resultStatement) : 
    if (resultStatement.helperMethodResultType.isValueType()) then "{}"
    else resultStatement.helperMethodResultType.defaultValue.toString().toCppLiteral();

isFunctionStatement(Statement this) :
    let collectionMethodStatement = (CollectionMethodStatement)this :
    CollectionMethodStatement.isInstance(this) && (
        collectionMethodStatement.methodType == CollectionMethodType::AT ||
        collectionMethodStatement.methodType == CollectionMethodType::TYPE_SELECT);
    
getFunctionStatementCall(Statement this) :
    let collectionMethodStatement = (CollectionMethodStatement)this :
    if (collectionMethodStatement.methodType == CollectionMethodType::AT) then "collectionhelpers::get_at("
    else if (collectionMethodStatement.methodType == CollectionMethodType::TYPE_SELECT) then (
        let selectedType = (EClassifier)collectionMethodStatement.parameters.get(0) :
        "collectionhelpers::type_select<" + selectedType.ePackage.name + "::" + selectedType.name + ">(" )
    else "";
    
toCppQueryReturnType(Query this) : 
    if (this.isOptional) then "std::optional<" + toConstCppType() + ">"
    else toConstCppType();

accessor(ReferenceCondition this) : accessor(this.source);
accessor(AttributeCondition this) : accessor(this.instance);

accessor(InstanceCondition this) :
    if (this.instanceType.isValueType()) then "."
    else "->";

operationContainsQueryCall(EOperation this) :
    eAnnotations.typeSelect(generationAnnotations::QueryCallAnnotation).size > 0;