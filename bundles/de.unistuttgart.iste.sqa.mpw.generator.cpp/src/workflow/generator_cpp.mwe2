module modeling.CppGenerator

import org.eclipse.emf.mwe.utils.StandaloneSetup
import org.eclipse.emf.mwe.utils.DirectoryCleaner
import org.eclipse.xtend.typesystem.emf.EmfRegistryMetaModel
import org.eclipse.xpand2.Generator
import org.eclipse.xpand.support.cdt.CppBeautifier
import org.eclipse.xtend.expression.ResourceManagerDefaultImpl

var rootPath = ".."

var generatedProjectBasePackage  = "INHERIT"
var targetSimulatorProject = "INHERIT"

var targetCoreSimulatorProject = "${targetSimulatorProject}/core"

var simulatorTargetSrc = "${rootPath}/${targetCoreSimulatorProject}/src"
var simulatorTargetSrcGenerated = "${simulatorTargetSrc}/generated"

Workflow {
	/* set up EMF for standalone execution */
	bean = StandaloneSetup { 
        scanClassPath = true
		platformUri="../"
		registerGeneratedEPackage="commandBehavior.CommandPackage"
        registerGeneratedEPackage="queryBehavior.QueryPackage"
        registerGeneratedEPackage="generationAnnotations.GenerationAnnotationsPackage"
	}
	
	/** instantiate metamodel */
	bean = EmfRegistryMetaModel : mm_emf { }

	bean = CppBeautifier : formatter_cpp { }

	/** Clear output directory */
	component = DirectoryCleaner {
		directory = simulatorTargetSrcGenerated
	}

    /* generate entities */
    component = Generator {
        globalVarDef = {
            name = "module_package"
            value = generatedProjectBasePackage
        }
        metaModel = mm_emf
        expand = "template::cpp::CppEcoreEntitiesTemplate::main FOR entityModels"
        outlet = {
            path = simulatorTargetSrc
            overwrite = false // avoid that Impl classes are overwritten
            postprocessor = formatter_cpp
        }
        resourceManager = ResourceManagerDefaultImpl {
            fileEncoding = "UTF-8"
        }
        
    }
    
    /* more generic generation which is based on many annotations on ecore objects, will also later make EcoreEntitiesTemplate mostly obsolete */
    component = Generator {
        globalVarDef = {
            name = "module_package"
            value = generatedProjectBasePackage
        }
        metaModel = mm_emf
        expand = "template::cpp::CppGenerateClassesTemplate::main FOREACH generationEcoreModels"
        outlet = {
            path = simulatorTargetSrc
            overwrite = true
            postprocessor = formatter_cpp
        }
        resourceManager = ResourceManagerDefaultImpl {
            fileEncoding = "UTF-8"
        }
        
    }
    
    /* generate commands */
    component = Generator {
        globalVarDef = {
            name = "module_package"
            value = generatedProjectBasePackage
        }
        metaModel = mm_emf
        expand = "template::cpp::CppCommandTemplate::main FOREACH commands"
        outlet = {
            path = simulatorTargetSrc
            postprocessor = formatter_cpp
        }
        resourceManager = ResourceManagerDefaultImpl {
            fileEncoding = "UTF-8"
        }
    }

    /* generate CMakeLists.txt */
    component = Generator {
        metaModel = mm_emf
        expand = "template::cpp::CppEcoreEntitiesTemplate::CMakeLists FOR entityModels"
        outlet = {
            path = simulatorTargetSrc
            overwrite = true
        }
        resourceManager = ResourceManagerDefaultImpl {
            fileEncoding = "UTF-8"
        }
        
    }
    component = Generator {
        metaModel = mm_emf
        expand = "template::cpp::CppCommandTemplate::CMakeLists FOR commands"
        outlet = {
            path = simulatorTargetSrc
            overwrite = true
        }
        resourceManager = ResourceManagerDefaultImpl {
            fileEncoding = "UTF-8"
        }
        
    }
    
}
