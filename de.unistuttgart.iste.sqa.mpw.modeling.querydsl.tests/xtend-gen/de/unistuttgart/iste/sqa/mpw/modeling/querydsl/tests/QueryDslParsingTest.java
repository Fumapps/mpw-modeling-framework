/**
 * generated by Xtext 2.23.0
 */
package de.unistuttgart.iste.sqa.mpw.modeling.querydsl.tests;

import com.google.inject.Inject;
import de.unistuttgart.iste.sqa.mpw.modeling.querydsl.querydsl.Model;
import de.unistuttgart.iste.sqa.mpw.modeling.querydsl.tests.ModelInstanceStringifier;
import de.unistuttgart.iste.sqa.mpw.modeling.querydsl.tests.QueryDslInjectorProvider;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.extensions.InjectionExtension;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.Functions.Function0;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;

@ExtendWith(InjectionExtension.class)
@InjectWith(QueryDslInjectorProvider.class)
@SuppressWarnings("all")
public class QueryDslParsingTest {
  @Inject
  private ParseHelper<Model> parseHelper;
  
  private final String simpleExpression = new Function0<String>() {
    @Override
    public String apply() {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("expressions: [");
      _builder.newLine();
      _builder.append("  ");
      _builder.append("BoolConstant:");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("value: true");
      _builder.newLine();
      _builder.append("]");
      _builder.newLine();
      return _builder.toString();
    }
  }.apply();
  
  @Test
  public void givenSimpleQueryReturningTrue_whenParse_thenQueryWithExpressionAndStatementAreParsed() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("context Hamster");
      _builder.newLine();
      _builder.append("query myQuery: true;");
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("ClassContext:");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("className: Hamster");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("elements: [");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("Query myQuery:");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("expressions: [");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("BoolConstant:");
      _builder_1.newLine();
      _builder_1.append("          ");
      _builder_1.append("value: true");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("]");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("]");
      _builder_1.newLine();
      this.assertModel(result, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void givenTwoSimpleQuerys_whenParse_thenBothQueriesAreParsed() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("context Hamster");
      _builder.newLine();
      _builder.append("query myQuery1: true;");
      _builder.newLine();
      _builder.append("query myQuery2: true;");
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("ClassContext:");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("className: Hamster");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("elements: [");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("Query myQuery1:");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append(this.simpleExpression, "      ");
      _builder_1.newLineIfNotEmpty();
      _builder_1.append("    ");
      _builder_1.append("Query myQuery2:");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append(this.simpleExpression, "      ");
      _builder_1.newLineIfNotEmpty();
      _builder_1.append("  ");
      _builder_1.append("]");
      _builder_1.newLine();
      this.assertModel(result, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void givenCommandContextWithParameters_whenParse_thenParametersAreParsed() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("context Hamster::myCommand(text: String)");
      _builder.newLine();
      _builder.append("precondition: true;");
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("CommandContext:");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("className: Hamster");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("commandName: myCommand");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("elements: [");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("Precondition:");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append(this.simpleExpression, "      ");
      _builder_1.newLineIfNotEmpty();
      _builder_1.append("  ");
      _builder_1.append("]");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("parameterList: ParameterList:");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("parameters: [");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("Parameter:");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("variableName: text");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("typeName: String");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("]");
      _builder_1.newLine();
      this.assertModel(result, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void givenPreconditionUsingQuery_whenParse_thenStatementUsingQueryIsParsed() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("context Hamster::myCommand");
      _builder.newLine();
      _builder.append("precondition: self.myQuery();");
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("CommandContext:");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("className: Hamster");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("commandName: myCommand");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("elements: [");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("Precondition:");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("expressions: [");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("StatementsExpression:");
      _builder_1.newLine();
      _builder_1.append("          ");
      _builder_1.append("statements: [");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("Statement:");
      _builder_1.newLine();
      _builder_1.append("              ");
      _builder_1.append("target: self");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("Statement:");
      _builder_1.newLine();
      _builder_1.append("              ");
      _builder_1.append("methodCall: MethodCall:");
      _builder_1.newLine();
      _builder_1.append("                ");
      _builder_1.append("targetMethod: myQuery");
      _builder_1.newLine();
      _builder_1.append("                ");
      _builder_1.append("parameters: []");
      _builder_1.newLine();
      _builder_1.append("          ");
      _builder_1.append("]");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("]");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("]");
      _builder_1.newLine();
      this.assertModel(result, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void givenPreconditionUsingQueryWithParameters_whenParse_thenStatementUsingQueryIsParsed() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("context Hamster::myCommand(number: Int)");
      _builder.newLine();
      _builder.append("precondition: self.myQuery(number);");
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("CommandContext:");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("className: Hamster");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("commandName: myCommand");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("elements: [");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("Precondition:");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("expressions: [");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("StatementsExpression:");
      _builder_1.newLine();
      _builder_1.append("          ");
      _builder_1.append("statements: [");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("Statement:");
      _builder_1.newLine();
      _builder_1.append("              ");
      _builder_1.append("target: self");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("Statement:");
      _builder_1.newLine();
      _builder_1.append("              ");
      _builder_1.append("methodCall: MethodCall:");
      _builder_1.newLine();
      _builder_1.append("                ");
      _builder_1.append("targetMethod: myQuery");
      _builder_1.newLine();
      _builder_1.append("                ");
      _builder_1.append("parameters: [number]");
      _builder_1.newLine();
      _builder_1.append("          ");
      _builder_1.append("]");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("]");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("]");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("parameterList: ParameterList:");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("parameters: [");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("Parameter:");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("variableName: number");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("typeName: Int");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("]");
      _builder_1.newLine();
      this.assertModel(result, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void givenPostconditionUsingOldValue_whenParse_thenStatementOfOldValueIsParsed() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("context Hamster::myCommand");
      _builder.newLine();
      _builder.append("postcondition: self.grains->size() = old(self.grains->size()) + 1;");
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("CommandContext:");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("className: Hamster");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("commandName: myCommand");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("elements: [");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("Postcondition:");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("expressions: [");
      _builder_1.newLine();
      _builder_1.append("        ");
      _builder_1.append("EqualityExpression:");
      _builder_1.newLine();
      _builder_1.append("          ");
      _builder_1.append("operation: =");
      _builder_1.newLine();
      _builder_1.append("          ");
      _builder_1.append("left: StatementsExpression:");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("statements: [");
      _builder_1.newLine();
      _builder_1.append("              ");
      _builder_1.append("Statement:");
      _builder_1.newLine();
      _builder_1.append("                ");
      _builder_1.append("target: self");
      _builder_1.newLine();
      _builder_1.append("              ");
      _builder_1.append("Statement:");
      _builder_1.newLine();
      _builder_1.append("                ");
      _builder_1.append("target: grains");
      _builder_1.newLine();
      _builder_1.append("              ");
      _builder_1.append("Statement:");
      _builder_1.newLine();
      _builder_1.append("                ");
      _builder_1.append("collectionTarget: SimpleCollectionMethod:");
      _builder_1.newLine();
      _builder_1.append("                  ");
      _builder_1.append("method: size");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("]");
      _builder_1.newLine();
      _builder_1.append("          ");
      _builder_1.append("right: PlusExpression:");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("left: OldValueExpression:");
      _builder_1.newLine();
      _builder_1.append("              ");
      _builder_1.append("expression: StatementsExpression:");
      _builder_1.newLine();
      _builder_1.append("                ");
      _builder_1.append("statements: [");
      _builder_1.newLine();
      _builder_1.append("                  ");
      _builder_1.append("Statement:");
      _builder_1.newLine();
      _builder_1.append("                    ");
      _builder_1.append("target: self");
      _builder_1.newLine();
      _builder_1.append("                  ");
      _builder_1.append("Statement:");
      _builder_1.newLine();
      _builder_1.append("                    ");
      _builder_1.append("target: grains");
      _builder_1.newLine();
      _builder_1.append("                  ");
      _builder_1.append("Statement:");
      _builder_1.newLine();
      _builder_1.append("                    ");
      _builder_1.append("collectionTarget: SimpleCollectionMethod:");
      _builder_1.newLine();
      _builder_1.append("                      ");
      _builder_1.append("method: size");
      _builder_1.newLine();
      _builder_1.append("                ");
      _builder_1.append("]");
      _builder_1.newLine();
      _builder_1.append("            ");
      _builder_1.append("right: IntConstant:");
      _builder_1.newLine();
      _builder_1.append("              ");
      _builder_1.append("value: 1");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("]");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("]");
      _builder_1.newLine();
      this.assertModel(result, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void givenQueryWithDocumentation_whenParse_thenDocumentationIsParsedForQuery() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("context Hamster");
      _builder.newLine();
      _builder.append("/** This query returns something useful. */");
      _builder.newLine();
      _builder.append("query myQuery: true;");
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("ClassContext:");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("className: Hamster");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("elements: [");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("Query myQuery:");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("documentation: /** This query returns something useful. */");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append(this.simpleExpression, "      ");
      _builder_1.newLineIfNotEmpty();
      _builder_1.append("  ");
      _builder_1.append("]");
      _builder_1.newLine();
      this.assertModel(result, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void givenInvariantWithDocumentation_whenParse_thenDocumentationIsParsedForInvariant() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("context Hamster");
      _builder.newLine();
      _builder.append("/** This invariant checks something useful. */");
      _builder.newLine();
      _builder.append("invariant: true;");
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("ClassContext:");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("className: Hamster");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("elements: [");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("Invariant:");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("documentation: /** This invariant checks something useful. */");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append(this.simpleExpression, "      ");
      _builder_1.newLineIfNotEmpty();
      _builder_1.append("  ");
      _builder_1.append("]");
      _builder_1.newLine();
      this.assertModel(result, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void givenPreconditionWithDocumentation_whenParse_thenDocumentationIsParsedForPrecondition() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("context Hamster::myCommand");
      _builder.newLine();
      _builder.append("/** This precondition checks something useful. */");
      _builder.newLine();
      _builder.append("precondition: true;");
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("CommandContext:");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("className: Hamster");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("commandName: myCommand");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("elements: [");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("Precondition:");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("documentation: /** This precondition checks something useful. */");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append(this.simpleExpression, "      ");
      _builder_1.newLineIfNotEmpty();
      _builder_1.append("  ");
      _builder_1.append("]");
      _builder_1.newLine();
      this.assertModel(result, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void givenPostconditionWithDocumentation_whenParse_thenDocumentationIsParsedForPostcondition() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("context Hamster::myCommand");
      _builder.newLine();
      _builder.append("/** This postcondition checks something useful. */");
      _builder.newLine();
      _builder.append("postcondition: true;");
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("CommandContext:");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("className: Hamster");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("commandName: myCommand");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("elements: [");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("Postcondition:");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append("documentation: /** This postcondition checks something useful. */");
      _builder_1.newLine();
      _builder_1.append("      ");
      _builder_1.append(this.simpleExpression, "      ");
      _builder_1.newLineIfNotEmpty();
      _builder_1.append("  ");
      _builder_1.append("]");
      _builder_1.newLine();
      this.assertModel(result, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  private void assertModel(final Model actualModel, final String expected) {
    Assertions.assertNotNull(actualModel);
    final EList<Resource.Diagnostic> errors = actualModel.eResource().getErrors();
    boolean _isEmpty = errors.isEmpty();
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("Unexpected errors: ");
    String _join = IterableExtensions.join(errors, ", ");
    _builder.append(_join);
    Assertions.assertTrue(_isEmpty, _builder.toString());
    String actual = ModelInstanceStringifier.toString(actualModel);
    Assertions.assertEquals(expected.trim().replace("\r\n", "\n"), actual);
  }
}
