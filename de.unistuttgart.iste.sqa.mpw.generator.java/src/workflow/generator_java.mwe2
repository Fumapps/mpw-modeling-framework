module modeling.JavaGenerator

import org.eclipse.emf.mwe.utils.StandaloneSetup
import org.eclipse.emf.mwe.utils.DirectoryCleaner
import org.eclipse.xtend.typesystem.emf.EmfRegistryMetaModel
import org.eclipse.xpand2.Generator
import org.eclipse.xpand2.output.JavaBeautifier
import org.eclipse.xtend.expression.ResourceManagerDefaultImpl

var rootPath = ".."
var moduleBaseName = "de.unistuttgart.iste.sqa.mpw"

var generatedProjectBasePackage  = "'de.unistuttgart.hamster'"

var targetSimulatorProject = "${moduleBaseName}.hamstersimulator.java"
var targetCoreSimulatorProject = "${targetSimulatorProject}/core"

var simulatorTargetSrc = "${rootPath}/${targetCoreSimulatorProject}/src/main"
var simulatorTargetSrcGenerated = "${simulatorTargetSrc}/generated"

Workflow {
	/* set up EMF for standalone execution */
	bean = StandaloneSetup { 
        scanClassPath = true
		platformUri="../"
		registerGeneratedEPackage="commandBehavior.CommandPackage"
        registerGeneratedEPackage="queryBehavior.QueryPackage"
        registerGeneratedEPackage="generationAnnotations.GenerationAnnotationsPackage"
	}
	
	/** instantiate metamodel */
	bean = EmfRegistryMetaModel : mm_emf { }

	bean = JavaBeautifier : formatter_java { }

	/** Clear output directory */
	component = DirectoryCleaner {
		directory = simulatorTargetSrcGenerated
	}

	/* generate entities */
	component = Generator {
		globalVarDef = {
			name = "module_package"
			value = generatedProjectBasePackage
		}
		metaModel = mm_emf
		expand = "template::EcoreEntitiesTemplate::main FOR entityModels"
		outlet = {
			path = simulatorTargetSrc
			overwrite = false
			postprocessor = formatter_java
			fileEncoding = "UTF-8"
		}
		resourceManager = ResourceManagerDefaultImpl {
			fileEncoding = "UTF-8"
		}
		
	}
	
	/* more generic generation which is based on many annotations on ecore objects, will also later make EcoreEntitiesTemplate mostly obsolete */
    component = Generator {
        globalVarDef = {
            name = "module_package"
            value = generatedProjectBasePackage
        }
        metaModel = mm_emf
        expand = "template::GenerateClassesTemplate::main FOREACH generationEcoreModels"
        outlet = {
            path = simulatorTargetSrc
            overwrite = false // avoid that Impl classes are overwritten
            postprocessor = formatter_java
            fileEncoding = "UTF-8"
        }
        resourceManager = ResourceManagerDefaultImpl {
            fileEncoding = "UTF-8"
        }
        
    }
	
	/* generate commands */
	component = Generator {
		globalVarDef = {
			name = "module_package"
			value = generatedProjectBasePackage
		}
		metaModel = mm_emf
		expand = "template::CommandTemplate::main FOREACH commands"
		outlet = {
			path = simulatorTargetSrcGenerated
			postprocessor = formatter_java
			fileEncoding = "UTF-8"
		}
		resourceManager = ResourceManagerDefaultImpl {
			fileEncoding = "UTF-8"
		}
	}
	
}
