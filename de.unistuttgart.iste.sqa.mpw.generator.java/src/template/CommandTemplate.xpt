«IMPORT commandBehavior»
«IMPORT queryBehavior»

«EXTENSION template::GeneratorExtensions»

«DEFINE main FOR Transformation»
    «FILE this.getCommandJavaPackagePath() + "/" + name.toFirstUpper() + "Command.java"»package «this.getCommandJavaPackageName()»;
    	
    	import de.unistuttgart.hamster.framework.*;
        import static de.unistuttgart.hamster.framework.FrameworkAssert.*;
    	«EXPAND template::types::ImportUsedTypesTemplate::CommandEntityImportDefinition FOR targetClass»
    	import «getModulePackage()».mpw.*;
    	import «getModulePackage()».commands.*;
    	import de.unistuttgart.hamster.commands.impl.*;
    	import static «getModulePackage()».mpw.Direction.*;
    	import java.util.stream.Collectors;
    	
    	«REM»TODO JML«constraints.toJml()»«ENDREM-»
    	«documentation.toJavaDoc()»
		public class «name.toFirstUpper()»Command extends CompositeCommandBase {
			private final «targetClass.getConcreteName()» self;
            «IF isActorCommand()-»
            private final GameLog gameLog;
            «ENDIF-»
			«IF mainUnit != null»
			«FOREACH mainUnit.parameters AS p»
			private final «p.type.name.toJavaType()» «p.name»;
			«ENDFOREACH»
			«ENDIF»
		
			public «name.toFirstUpper()»Command(«name.toFirstUpper()»CommandParameters parameters) {
				this.self = parameters.self;
	            «IF isActorCommand()-»
	            this.gameLog = parameters.gameLog;
	            «ENDIF-»
				«FOREACH mainUnit.parameters AS p-»
                   this.«p.name» = parameters.«p.name»;
                «ENDFOREACH-»
			}
		
			«EXPAND template::commands::CommandUnitTemplate::UnitExpand FOR mainUnit»
            «EXPAND template::commands::CommandUnitTemplate::UnitExpand FOREACH units.excluding(mainUnit)»
            «EXPAND template::QueriesTemplate::HelperStatementDefinition FOREACH this.eAllContents
                                                                                     .typeSelect(Constraint)
                                                                                     .eAllContents
                                                                                     .typeSelect(StatementsExpression)
                                                                                     .select(e|e.needsHelperMethod)-»
        }
    «ENDFILE»
    «FILE this.getCommandJavaPackagePath() + "/" + name.toFirstUpper() + "CommandParameters.java"»package «this.getCommandJavaPackageName()»;
        
        «EXPAND template::types::ImportUsedTypesTemplate::CommandEntityImportDefinition FOR targetClass»
        import «getModulePackage()».mpw.*;
        import «getModulePackage()».commands.*;
        
        public class «name.toFirstUpper()»CommandParameters {
            public «targetClass.getConcreteName()» self;
            public CommandStack commandStack;
		    «IF isActorCommand()-»
            public GameLog gameLog;
		    «ENDIF-»
            «FOREACH mainUnit.parameters AS p»
            public «p.type.name.toJavaType()» «p.name»;
            «ENDFOREACH»
        }
    «ENDFILE»
«ENDDEFINE»
