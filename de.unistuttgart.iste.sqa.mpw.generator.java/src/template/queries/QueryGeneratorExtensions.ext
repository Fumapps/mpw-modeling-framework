import ecore;
import emf;
import behaviorsbase;
import queryBehavior;

/*
 * Extensions related to the generation of queries.
 */

toOperatorCode(CompareOperator this) :
    switch (this) {
       case CompareOperator::EQUAL: "=="
       case CompareOperator::NOT_EQUAL: "!="
       case CompareOperator::GREATER: ">"
       case CompareOperator::SMALLER: "<"
       case CompareOperator::GREATER_EQUAL: ">="
       case CompareOperator::SMALLER_EQUAL: "<="
       default: ""
    };

toOperatorCode(CalculationOperator this) :
    switch (this) {
       case CalculationOperator::PLUS: "+"
       case CalculationOperator::MINUS: "-"
       case CalculationOperator::MULTIPLY: "*"
       case CalculationOperator::DIVIDE: "/"
       default: ""
    };

Query getQueryForOperation(EOperation operation) : 
    operation.eAnnotations.selectFirst(a|a.source == "query").contents.first();
    
constraintToViolationString(queryBehavior::Constraint this) :
    let typeName = this.metaType.name.replaceAll("queryBehavior::", "") :
    "Violation of " + typeName + 
        (if (this.documentation != null) then ": " + documentation 
        else "");
        
List[Parameter] findParameterList(Expression this) :
    eContainer.findParameterListOfEObject();
    
private List[Parameter] findParameterListOfEObject(emf::EObject object) :
    if (object == null) then null
    else if (Query.isInstance(object)) then ((Query)object).parameters
    else findParameterListOfEObject(object.eContainer);
    
String toJavaConformName(String this) :
    JAVA template.queries.CamelCaseStringConverter.lowerUnderscoreToCamelCase(java.lang.String);
