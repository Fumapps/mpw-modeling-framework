import ecore;
import behaviorsbase;

extension template::types::EmfGeneratorExtensions;
extension template::commands::CommandGeneratorExtensions;
extension template::properties::PropertyGeneratorExtensions;
extension util::Extensions;

/*
 * Extensions related to EOperations.
 */

operationToSignature(EOperation this) :
    let parameters = if (isCommand()) then name.toFirstUpper() + "CommandParameters parameters" else eParameters.collect(e|e.eType.name.toJavaType() + " " + e.name).joinToString(", ") :
    documentationToJavaDoc() + operationToJavaType() + " " + effectiveOperationName() + "(" + parameters + ")";

documentationToJavaDoc(EOperation this) :
    let documentationDetail = eAnnotations.collect(a|a.details).flatten().selectFirst(d|d.key == "documentation") :
    if (documentationDetail != null) then documentationDetail.value.toJavaDoc() else "";

private effectiveOperationName(EOperation this) : 
    if (isPropertyGetter()) then name.getter() else name;

hasPropertyGetterOperation(EStructuralFeature this) :
    let class = (EClass)eContainer :
    class.eAllSuperTypes.exists(t|t.eOperations.exists(o|o.isPropertyGetter() && o.name == name));
    
isPropertyGetter(EOperation this) : isMarkedWith("isPropertyGetter");
    
isCommand(EOperation this) : isMarkedWith("command");
    
isQuery(EOperation this) : isMarkedWith("query");

private isMarkedWith(EOperation this, String key) :
    eAnnotations.exists(a|a.source == key || a.details.exists(d|d.key == key));

toConstructorCall(String constructorTypeName, List[String] parameterPropertyPaths)
    : "new " + constructorTypeName + "(" + parameterPropertyPaths.collect(path|path.toPropertyGetters()).toString(", ") + ")";
