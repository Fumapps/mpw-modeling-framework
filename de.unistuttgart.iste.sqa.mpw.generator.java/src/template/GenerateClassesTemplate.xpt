«IMPORT ecore»
«IMPORT commandBehavior»
«IMPORT queryBehavior»
«IMPORT generationAnnotations»

«EXTENSION template::GeneratorExtensions»

«REM»
  Generates classes based on GenerationAnnotations.
  Note: currently only facade classes are generated by this approach. Later it is planned to generate also the 
        other entity classes by the usage of GenerationAnnotations to move logic to the transformation step.
«ENDREM»
«DEFINE main FOR EPackage»
    «EXPAND JavaClass FOREACH this.eClassifiers.typeSelect(EClass)
                                               .select(c|c.isFacade())
                                               .reject(c|c.interface)»
«ENDDEFINE»

«DEFINE JavaClass FOR EClass-»
    «FILE "generated/" + this.ePackage.toJavaPackagePath() + "/" + name + ".java"»package «this.ePackage.toJavaPackageName()»;
    
    import de.unistuttgart.hamster.mpw.*;
    «EXPAND ImportTypeGenerationAnnotation FOREACH eAnnotations.typeSelect(ImportTypeAnnotation)»
    
    public class «name» {
        «FOREACH eStructuralFeatures AS f-»
            private «f.featureToJavaType()» «f.name»;
        «ENDFOREACH-»
        
        «FOREACH eOperations AS o-»
		    «REM»TODO JML«constraints.toJml()»«ENDREM-»
		    «o.getAnnotationValue("documentation").toJavaDoc()»
            public «o.operationToJavaType()» «o.name» («FOREACH o.eParameters AS p SEPARATOR ", "»«p.eType.name.toJavaType()» «p.name»«ENDFOREACH») {
            «EXPAND GenerationAnnotation FOREACH o.eAnnotations-»
            }
            
        «ENDFOREACH»
        «EXPAND GenerationAnnotation FOREACH eAnnotations»
    }
    «ENDFILE»
«ENDDEFINE»

«DEFINE GenerationAnnotation FOR EAnnotation»«ENDDEFINE-»

«DEFINE GenerationAnnotation FOR CommandCreationAnnotation-»
    var «commandVariableName» = new «command.name.toFirstUpper()»Command(«parametersVariableName»);
«ENDDEFINE»

«DEFINE GenerationAnnotation FOR CommandParameterCreationAnnotation-»
    var «parametersVariableName» = new «command.name.toFirstUpper()»CommandParameters();
    «parametersVariableName».commandStack = game.getCommandStack();
    «IF command.isActorCommand()-»
    «parametersVariableName».gameLog = game.getGameLog();
    «ENDIF-»
    «FOREACH parameterMappings AS mapping-»
         «parametersVariableName».«mapping.key» = «mapping.value»; 
    «ENDFOREACH-»
«ENDDEFINE»

«DEFINE GenerationAnnotation FOR CommandCallAnnotation-»
    «targetRoleVariableName».«command.name»(«parametersVariableName»);
«ENDDEFINE»

«DEFINE GenerationAnnotation FOR QueryCallAnnotation-»
    return «internalRoleField.name».«query.name»(«query.parameters.collect(p|p.name).toString(", ")»); 
«ENDDEFINE»

«DEFINE GenerationAnnotation FOR ParameterToFieldAssignmentAnnotation-»
    this.«field.name» = «parameter.name» ;
«ENDDEFINE»

«DEFINE GenerationAnnotation FOR ConstructorSimpleFieldInitializationAnnotation-»
    this.«field.name» = new «constructorTypeName»(«EXPAND template::QueriesTemplate::ExpressionDefinition FOREACH parameterInputVariableExpressions SEPARATOR ", "»);
«ENDDEFINE»

«DEFINE GenerationAnnotation FOR ExpressionFieldAssignmentAnnotation-»
    this.«field.name» = «EXPAND template::QueriesTemplate::ExpressionDefinition FOR expression»;
«ENDDEFINE»

«DEFINE GenerationAnnotation FOR AddVariableToCollectionAnnotation-»
    «EXPAND template::QueriesTemplate::ExpressionDefinition FOR collectionExpression».add(«EXPAND template::QueriesTemplate::ExpressionDefinition FOR parameterExpression»);
«ENDDEFINE»

«DEFINE GenerationAnnotation FOR GetPropertyAnnotation-»
    «getAnnotationValue("documentation").toJavaDoc()»
    public «getterType.name.toJavaType()» «getterOperationName»() {
        return this.«field.name»;
    }
    
«ENDDEFINE»

«DEFINE GenerationAnnotation FOR MethodCallAnnotation-»
    «variableName».«methodName»(«EXPAND template::QueriesTemplate::ExpressionDefinition FOREACH parameterInputVariableExpressions SEPARATOR ", "»);
«ENDDEFINE»

«DEFINE GenerationAnnotation FOR ReturnAnnotation-»
    return «EXPAND template::QueriesTemplate::ExpressionDefinition FOR expression»;
«ENDDEFINE»

«DEFINE GenerationAnnotation FOR ExpressionAnnotation-»
    «EXPAND template::QueriesTemplate::ExpressionDefinition FOR expression-»
«ENDDEFINE»

«DEFINE GenerationAnnotation FOR VariableObjectConstructionAnnotation-»
    var «variableName» = new «constructorTypeName»(«EXPAND template::QueriesTemplate::ExpressionDefinition FOREACH parameterInputVariableExpressions SEPARATOR ", "»);
«ENDDEFINE»

«DEFINE GenerationAnnotation FOR VariableDefinitionAnnotation-»
    var «variableName» = «EXPAND GenerationAnnotation FOR rhs»;
«ENDDEFINE»

«DEFINE ImportTypeGenerationAnnotation FOR ImportTypeAnnotation-»
    import «getModulePackage()».«relativeQualifiedTypeName»;
«ENDDEFINE»
