/**
 * generated by Xtext 2.23.0
 */
package de.unistuttgart.iste.sqa.mpw.modeling.querydsl.querydsl.impl;

import de.unistuttgart.iste.sqa.mpw.modeling.querydsl.querydsl.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class QuerydslFactoryImpl extends EFactoryImpl implements QuerydslFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static QuerydslFactory init()
  {
    try
    {
      QuerydslFactory theQuerydslFactory = (QuerydslFactory)EPackage.Registry.INSTANCE.getEFactory(QuerydslPackage.eNS_URI);
      if (theQuerydslFactory != null)
      {
        return theQuerydslFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new QuerydslFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public QuerydslFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case QuerydslPackage.MODEL: return createModel();
      case QuerydslPackage.CONTEXT: return createContext();
      case QuerydslPackage.CLASS_CONTEXT: return createClassContext();
      case QuerydslPackage.COMMAND_CONTEXT: return createCommandContext();
      case QuerydslPackage.ELEMENT: return createElement();
      case QuerydslPackage.QUERY: return createQuery();
      case QuerydslPackage.COMMAND_CONSTRAINT: return createCommandConstraint();
      case QuerydslPackage.PRECONDITION: return createPrecondition();
      case QuerydslPackage.POSTCONDITION: return createPostcondition();
      case QuerydslPackage.PARAMETER_LIST: return createParameterList();
      case QuerydslPackage.PARAMETER: return createParameter();
      case QuerydslPackage.INVARIANT: return createInvariant();
      case QuerydslPackage.EXPRESSION: return createExpression();
      case QuerydslPackage.STATEMENT: return createStatement();
      case QuerydslPackage.METHOD_CALL: return createMethodCall();
      case QuerydslPackage.COLLECTION_METHOD: return createCollectionMethod();
      case QuerydslPackage.SIMPLE_COLLECTION_METHOD: return createSimpleCollectionMethod();
      case QuerydslPackage.PARAMETRIZED_COLLECTION_METHOD: return createParametrizedCollectionMethod();
      case QuerydslPackage.IMPLIES_EXPRESSION: return createImpliesExpression();
      case QuerydslPackage.OR_EXPRESSION: return createOrExpression();
      case QuerydslPackage.AND_EXPRESSION: return createAndExpression();
      case QuerydslPackage.EQUALITY_EXPRESSION: return createEqualityExpression();
      case QuerydslPackage.COMPARISON_EXPRESSION: return createComparisonExpression();
      case QuerydslPackage.PLUS_EXPRESSION: return createPlusExpression();
      case QuerydslPackage.MINUS_EXPRESSION: return createMinusExpression();
      case QuerydslPackage.MULTIPLICATION_EXPRESSION: return createMultiplicationExpression();
      case QuerydslPackage.DIVISION_EXPRESSION: return createDivisionExpression();
      case QuerydslPackage.NOT_EXPRESSION: return createNotExpression();
      case QuerydslPackage.INT_CONSTANT: return createIntConstant();
      case QuerydslPackage.STRING_CONSTANT: return createStringConstant();
      case QuerydslPackage.BOOL_CONSTANT: return createBoolConstant();
      case QuerydslPackage.NULL_CONSTANT: return createNullConstant();
      case QuerydslPackage.OLD_VALUE_EXPRESSION: return createOldValueExpression();
      case QuerydslPackage.STATEMENTS_EXPRESSION: return createStatementsExpression();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Context createContext()
  {
    ContextImpl context = new ContextImpl();
    return context;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ClassContext createClassContext()
  {
    ClassContextImpl classContext = new ClassContextImpl();
    return classContext;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CommandContext createCommandContext()
  {
    CommandContextImpl commandContext = new CommandContextImpl();
    return commandContext;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Element createElement()
  {
    ElementImpl element = new ElementImpl();
    return element;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Query createQuery()
  {
    QueryImpl query = new QueryImpl();
    return query;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CommandConstraint createCommandConstraint()
  {
    CommandConstraintImpl commandConstraint = new CommandConstraintImpl();
    return commandConstraint;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Precondition createPrecondition()
  {
    PreconditionImpl precondition = new PreconditionImpl();
    return precondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Postcondition createPostcondition()
  {
    PostconditionImpl postcondition = new PostconditionImpl();
    return postcondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ParameterList createParameterList()
  {
    ParameterListImpl parameterList = new ParameterListImpl();
    return parameterList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Parameter createParameter()
  {
    ParameterImpl parameter = new ParameterImpl();
    return parameter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Invariant createInvariant()
  {
    InvariantImpl invariant = new InvariantImpl();
    return invariant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression createExpression()
  {
    ExpressionImpl expression = new ExpressionImpl();
    return expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Statement createStatement()
  {
    StatementImpl statement = new StatementImpl();
    return statement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MethodCall createMethodCall()
  {
    MethodCallImpl methodCall = new MethodCallImpl();
    return methodCall;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CollectionMethod createCollectionMethod()
  {
    CollectionMethodImpl collectionMethod = new CollectionMethodImpl();
    return collectionMethod;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SimpleCollectionMethod createSimpleCollectionMethod()
  {
    SimpleCollectionMethodImpl simpleCollectionMethod = new SimpleCollectionMethodImpl();
    return simpleCollectionMethod;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ParametrizedCollectionMethod createParametrizedCollectionMethod()
  {
    ParametrizedCollectionMethodImpl parametrizedCollectionMethod = new ParametrizedCollectionMethodImpl();
    return parametrizedCollectionMethod;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ImpliesExpression createImpliesExpression()
  {
    ImpliesExpressionImpl impliesExpression = new ImpliesExpressionImpl();
    return impliesExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OrExpression createOrExpression()
  {
    OrExpressionImpl orExpression = new OrExpressionImpl();
    return orExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AndExpression createAndExpression()
  {
    AndExpressionImpl andExpression = new AndExpressionImpl();
    return andExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EqualityExpression createEqualityExpression()
  {
    EqualityExpressionImpl equalityExpression = new EqualityExpressionImpl();
    return equalityExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ComparisonExpression createComparisonExpression()
  {
    ComparisonExpressionImpl comparisonExpression = new ComparisonExpressionImpl();
    return comparisonExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PlusExpression createPlusExpression()
  {
    PlusExpressionImpl plusExpression = new PlusExpressionImpl();
    return plusExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MinusExpression createMinusExpression()
  {
    MinusExpressionImpl minusExpression = new MinusExpressionImpl();
    return minusExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MultiplicationExpression createMultiplicationExpression()
  {
    MultiplicationExpressionImpl multiplicationExpression = new MultiplicationExpressionImpl();
    return multiplicationExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DivisionExpression createDivisionExpression()
  {
    DivisionExpressionImpl divisionExpression = new DivisionExpressionImpl();
    return divisionExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotExpression createNotExpression()
  {
    NotExpressionImpl notExpression = new NotExpressionImpl();
    return notExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IntConstant createIntConstant()
  {
    IntConstantImpl intConstant = new IntConstantImpl();
    return intConstant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StringConstant createStringConstant()
  {
    StringConstantImpl stringConstant = new StringConstantImpl();
    return stringConstant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BoolConstant createBoolConstant()
  {
    BoolConstantImpl boolConstant = new BoolConstantImpl();
    return boolConstant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NullConstant createNullConstant()
  {
    NullConstantImpl nullConstant = new NullConstantImpl();
    return nullConstant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OldValueExpression createOldValueExpression()
  {
    OldValueExpressionImpl oldValueExpression = new OldValueExpressionImpl();
    return oldValueExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StatementsExpression createStatementsExpression()
  {
    StatementsExpressionImpl statementsExpression = new StatementsExpressionImpl();
    return statementsExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public QuerydslPackage getQuerydslPackage()
  {
    return (QuerydslPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static QuerydslPackage getPackage()
  {
    return QuerydslPackage.eINSTANCE;
  }

} //QuerydslFactoryImpl
