/*
 * generated by Xtext 2.23.0
 */
package de.unistuttgart.iste.sqa.mpw.modeling.querydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class QueryDslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.unistuttgart.iste.sqa.mpw.modeling.querydsl.QueryDsl.Model");
		private final RuleCall cContextParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Model:
		//	Context;
		@Override public ParserRule getRule() { return rule; }
		
		//Context
		public RuleCall getContextParserRuleCall() { return cContextParserRuleCall; }
	}
	public class ContextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.unistuttgart.iste.sqa.mpw.modeling.querydsl.QueryDsl.Context");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cClassContextParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCommandContextParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Context:
		//	ClassContext | CommandContext;
		@Override public ParserRule getRule() { return rule; }
		
		//ClassContext | CommandContext
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ClassContext
		public RuleCall getClassContextParserRuleCall_0() { return cClassContextParserRuleCall_0; }
		
		//CommandContext
		public RuleCall getCommandContextParserRuleCall_1() { return cCommandContextParserRuleCall_1; }
	}
	public class ClassContextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.unistuttgart.iste.sqa.mpw.modeling.querydsl.QueryDsl.ClassContext");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContextKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cClassNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cClassNameIDTerminalRuleCall_1_0 = (RuleCall)cClassNameAssignment_1.eContents().get(0);
		private final Assignment cElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementsElementParserRuleCall_2_0 = (RuleCall)cElementsAssignment_2.eContents().get(0);
		
		//ClassContext:
		//	'context' className=ID elements+=Element+;
		@Override public ParserRule getRule() { return rule; }
		
		//'context' className=ID elements+=Element+
		public Group getGroup() { return cGroup; }
		
		//'context'
		public Keyword getContextKeyword_0() { return cContextKeyword_0; }
		
		//className=ID
		public Assignment getClassNameAssignment_1() { return cClassNameAssignment_1; }
		
		//ID
		public RuleCall getClassNameIDTerminalRuleCall_1_0() { return cClassNameIDTerminalRuleCall_1_0; }
		
		//elements+=Element+
		public Assignment getElementsAssignment_2() { return cElementsAssignment_2; }
		
		//Element
		public RuleCall getElementsElementParserRuleCall_2_0() { return cElementsElementParserRuleCall_2_0; }
	}
	public class CommandContextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.unistuttgart.iste.sqa.mpw.modeling.querydsl.QueryDsl.CommandContext");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContextKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cClassNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cClassNameIDTerminalRuleCall_1_0 = (RuleCall)cClassNameAssignment_1.eContents().get(0);
		private final Keyword cColonColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCommandNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCommandNameIDTerminalRuleCall_3_0 = (RuleCall)cCommandNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cParameterListAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cParameterListParameterListParserRuleCall_4_1_0 = (RuleCall)cParameterListAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Assignment cElementsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cElementsElementParserRuleCall_5_0 = (RuleCall)cElementsAssignment_5.eContents().get(0);
		
		//CommandContext:
		//	'context' className=ID '::' commandName=ID ('(' parameterList=ParameterList ')')? elements+=Element+;
		@Override public ParserRule getRule() { return rule; }
		
		//'context' className=ID '::' commandName=ID ('(' parameterList=ParameterList ')')? elements+=Element+
		public Group getGroup() { return cGroup; }
		
		//'context'
		public Keyword getContextKeyword_0() { return cContextKeyword_0; }
		
		//className=ID
		public Assignment getClassNameAssignment_1() { return cClassNameAssignment_1; }
		
		//ID
		public RuleCall getClassNameIDTerminalRuleCall_1_0() { return cClassNameIDTerminalRuleCall_1_0; }
		
		//'::'
		public Keyword getColonColonKeyword_2() { return cColonColonKeyword_2; }
		
		//commandName=ID
		public Assignment getCommandNameAssignment_3() { return cCommandNameAssignment_3; }
		
		//ID
		public RuleCall getCommandNameIDTerminalRuleCall_3_0() { return cCommandNameIDTerminalRuleCall_3_0; }
		
		//('(' parameterList=ParameterList ')')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_0() { return cLeftParenthesisKeyword_4_0; }
		
		//parameterList=ParameterList
		public Assignment getParameterListAssignment_4_1() { return cParameterListAssignment_4_1; }
		
		//ParameterList
		public RuleCall getParameterListParameterListParserRuleCall_4_1_0() { return cParameterListParameterListParserRuleCall_4_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_2() { return cRightParenthesisKeyword_4_2; }
		
		//elements+=Element+
		public Assignment getElementsAssignment_5() { return cElementsAssignment_5; }
		
		//Element
		public RuleCall getElementsElementParserRuleCall_5_0() { return cElementsElementParserRuleCall_5_0; }
	}
	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.unistuttgart.iste.sqa.mpw.modeling.querydsl.QueryDsl.Element");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cQueryParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCommandConstraintParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cInvariantParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Element:
		//	Query | CommandConstraint | Invariant;
		@Override public ParserRule getRule() { return rule; }
		
		//Query | CommandConstraint | Invariant
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Query
		public RuleCall getQueryParserRuleCall_0() { return cQueryParserRuleCall_0; }
		
		//CommandConstraint
		public RuleCall getCommandConstraintParserRuleCall_1() { return cCommandConstraintParserRuleCall_1; }
		
		//Invariant
		public RuleCall getInvariantParserRuleCall_2() { return cInvariantParserRuleCall_2; }
	}
	public class QueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.unistuttgart.iste.sqa.mpw.modeling.querydsl.QueryDsl.Query");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDocumentationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDocumentationDOCUMENTATIONTerminalRuleCall_0_0 = (RuleCall)cDocumentationAssignment_0.eContents().get(0);
		private final Assignment cInternalAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cInternalInternalKeyword_1_0 = (Keyword)cInternalAssignment_1.eContents().get(0);
		private final Keyword cQueryKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cParameterListAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cParameterListParameterListParserRuleCall_4_1_0 = (RuleCall)cParameterListAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Keyword cColonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cExpressionsAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cExpressionsExpressionParserRuleCall_6_0_0 = (RuleCall)cExpressionsAssignment_6_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		
		//Query:
		//	documentation=DOCUMENTATION? internal?='internal'? 'query' name=ID ('(' parameterList=ParameterList ')')? ':'
		//	(expressions+=Expression ';');
		@Override public ParserRule getRule() { return rule; }
		
		//documentation=DOCUMENTATION? internal?='internal'? 'query' name=ID ('(' parameterList=ParameterList ')')? ':'
		//(expressions+=Expression ';')
		public Group getGroup() { return cGroup; }
		
		//documentation=DOCUMENTATION?
		public Assignment getDocumentationAssignment_0() { return cDocumentationAssignment_0; }
		
		//DOCUMENTATION
		public RuleCall getDocumentationDOCUMENTATIONTerminalRuleCall_0_0() { return cDocumentationDOCUMENTATIONTerminalRuleCall_0_0; }
		
		//internal?='internal'?
		public Assignment getInternalAssignment_1() { return cInternalAssignment_1; }
		
		//'internal'
		public Keyword getInternalInternalKeyword_1_0() { return cInternalInternalKeyword_1_0; }
		
		//'query'
		public Keyword getQueryKeyword_2() { return cQueryKeyword_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//('(' parameterList=ParameterList ')')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_0() { return cLeftParenthesisKeyword_4_0; }
		
		//parameterList=ParameterList
		public Assignment getParameterListAssignment_4_1() { return cParameterListAssignment_4_1; }
		
		//ParameterList
		public RuleCall getParameterListParameterListParserRuleCall_4_1_0() { return cParameterListParameterListParserRuleCall_4_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_2() { return cRightParenthesisKeyword_4_2; }
		
		//':'
		public Keyword getColonKeyword_5() { return cColonKeyword_5; }
		
		//(expressions+=Expression ';')
		public Group getGroup_6() { return cGroup_6; }
		
		//expressions+=Expression
		public Assignment getExpressionsAssignment_6_0() { return cExpressionsAssignment_6_0; }
		
		//Expression
		public RuleCall getExpressionsExpressionParserRuleCall_6_0_0() { return cExpressionsExpressionParserRuleCall_6_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_6_1() { return cSemicolonKeyword_6_1; }
	}
	public class CommandConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.unistuttgart.iste.sqa.mpw.modeling.querydsl.QueryDsl.CommandConstraint");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPreconditionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPostconditionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//CommandConstraint:
		//	Precondition | Postcondition;
		@Override public ParserRule getRule() { return rule; }
		
		//Precondition | Postcondition
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Precondition
		public RuleCall getPreconditionParserRuleCall_0() { return cPreconditionParserRuleCall_0; }
		
		//Postcondition
		public RuleCall getPostconditionParserRuleCall_1() { return cPostconditionParserRuleCall_1; }
	}
	public class PreconditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.unistuttgart.iste.sqa.mpw.modeling.querydsl.QueryDsl.Precondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDocumentationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDocumentationDOCUMENTATIONTerminalRuleCall_0_0 = (RuleCall)cDocumentationAssignment_0.eContents().get(0);
		private final Keyword cPreconditionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cExpressionsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cExpressionsExpressionParserRuleCall_4_0_0 = (RuleCall)cExpressionsAssignment_4_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		
		//Precondition:
		//	documentation=DOCUMENTATION? 'precondition' name=ID? ':' (expressions+=Expression ';');
		@Override public ParserRule getRule() { return rule; }
		
		//documentation=DOCUMENTATION? 'precondition' name=ID? ':' (expressions+=Expression ';')
		public Group getGroup() { return cGroup; }
		
		//documentation=DOCUMENTATION?
		public Assignment getDocumentationAssignment_0() { return cDocumentationAssignment_0; }
		
		//DOCUMENTATION
		public RuleCall getDocumentationDOCUMENTATIONTerminalRuleCall_0_0() { return cDocumentationDOCUMENTATIONTerminalRuleCall_0_0; }
		
		//'precondition'
		public Keyword getPreconditionKeyword_1() { return cPreconditionKeyword_1; }
		
		//name=ID?
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//(expressions+=Expression ';')
		public Group getGroup_4() { return cGroup_4; }
		
		//expressions+=Expression
		public Assignment getExpressionsAssignment_4_0() { return cExpressionsAssignment_4_0; }
		
		//Expression
		public RuleCall getExpressionsExpressionParserRuleCall_4_0_0() { return cExpressionsExpressionParserRuleCall_4_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4_1() { return cSemicolonKeyword_4_1; }
	}
	public class PostconditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.unistuttgart.iste.sqa.mpw.modeling.querydsl.QueryDsl.Postcondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDocumentationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDocumentationDOCUMENTATIONTerminalRuleCall_0_0 = (RuleCall)cDocumentationAssignment_0.eContents().get(0);
		private final Keyword cPostconditionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cExpressionsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cExpressionsExpressionParserRuleCall_4_0_0 = (RuleCall)cExpressionsAssignment_4_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		
		//Postcondition:
		//	documentation=DOCUMENTATION? 'postcondition' name=ID? ':' (expressions+=Expression ';');
		@Override public ParserRule getRule() { return rule; }
		
		//documentation=DOCUMENTATION? 'postcondition' name=ID? ':' (expressions+=Expression ';')
		public Group getGroup() { return cGroup; }
		
		//documentation=DOCUMENTATION?
		public Assignment getDocumentationAssignment_0() { return cDocumentationAssignment_0; }
		
		//DOCUMENTATION
		public RuleCall getDocumentationDOCUMENTATIONTerminalRuleCall_0_0() { return cDocumentationDOCUMENTATIONTerminalRuleCall_0_0; }
		
		//'postcondition'
		public Keyword getPostconditionKeyword_1() { return cPostconditionKeyword_1; }
		
		//name=ID?
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//(expressions+=Expression ';')
		public Group getGroup_4() { return cGroup_4; }
		
		//expressions+=Expression
		public Assignment getExpressionsAssignment_4_0() { return cExpressionsAssignment_4_0; }
		
		//Expression
		public RuleCall getExpressionsExpressionParserRuleCall_4_0_0() { return cExpressionsExpressionParserRuleCall_4_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4_1() { return cSemicolonKeyword_4_1; }
	}
	public class ParameterListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.unistuttgart.iste.sqa.mpw.modeling.querydsl.QueryDsl.ParameterList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParametersAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParametersParameterParserRuleCall_0_0 = (RuleCall)cParametersAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cParametersAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_1_1_0 = (RuleCall)cParametersAssignment_1_1.eContents().get(0);
		
		//ParameterList:
		//	parameters+=Parameter (',' parameters+=Parameter)*;
		@Override public ParserRule getRule() { return rule; }
		
		//parameters+=Parameter (',' parameters+=Parameter)*
		public Group getGroup() { return cGroup; }
		
		//parameters+=Parameter
		public Assignment getParametersAssignment_0() { return cParametersAssignment_0; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_0_0() { return cParametersParameterParserRuleCall_0_0; }
		
		//(',' parameters+=Parameter)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//parameters+=Parameter
		public Assignment getParametersAssignment_1_1() { return cParametersAssignment_1_1; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_1_1_0() { return cParametersParameterParserRuleCall_1_1_0; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.unistuttgart.iste.sqa.mpw.modeling.querydsl.QueryDsl.Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariableNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVariableNameIDTerminalRuleCall_0_0 = (RuleCall)cVariableNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeNameIDTerminalRuleCall_2_0 = (RuleCall)cTypeNameAssignment_2.eContents().get(0);
		
		//Parameter:
		//	variableName=ID ':' typeName=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//variableName=ID ':' typeName=ID
		public Group getGroup() { return cGroup; }
		
		//variableName=ID
		public Assignment getVariableNameAssignment_0() { return cVariableNameAssignment_0; }
		
		//ID
		public RuleCall getVariableNameIDTerminalRuleCall_0_0() { return cVariableNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//typeName=ID
		public Assignment getTypeNameAssignment_2() { return cTypeNameAssignment_2; }
		
		//ID
		public RuleCall getTypeNameIDTerminalRuleCall_2_0() { return cTypeNameIDTerminalRuleCall_2_0; }
	}
	public class InvariantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.unistuttgart.iste.sqa.mpw.modeling.querydsl.QueryDsl.Invariant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDocumentationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDocumentationDOCUMENTATIONTerminalRuleCall_0_0 = (RuleCall)cDocumentationAssignment_0.eContents().get(0);
		private final Keyword cInvariantKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cExpressionsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cExpressionsExpressionParserRuleCall_4_0_0 = (RuleCall)cExpressionsAssignment_4_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		
		//Invariant:
		//	documentation=DOCUMENTATION? 'invariant' name=ID? ':' (expressions+=Expression ';');
		@Override public ParserRule getRule() { return rule; }
		
		//documentation=DOCUMENTATION? 'invariant' name=ID? ':' (expressions+=Expression ';')
		public Group getGroup() { return cGroup; }
		
		//documentation=DOCUMENTATION?
		public Assignment getDocumentationAssignment_0() { return cDocumentationAssignment_0; }
		
		//DOCUMENTATION
		public RuleCall getDocumentationDOCUMENTATIONTerminalRuleCall_0_0() { return cDocumentationDOCUMENTATIONTerminalRuleCall_0_0; }
		
		//'invariant'
		public Keyword getInvariantKeyword_1() { return cInvariantKeyword_1; }
		
		//name=ID?
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//(expressions+=Expression ';')
		public Group getGroup_4() { return cGroup_4; }
		
		//expressions+=Expression
		public Assignment getExpressionsAssignment_4_0() { return cExpressionsAssignment_4_0; }
		
		//Expression
		public RuleCall getExpressionsExpressionParserRuleCall_4_0_0() { return cExpressionsExpressionParserRuleCall_4_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4_1() { return cSemicolonKeyword_4_1; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.unistuttgart.iste.sqa.mpw.modeling.querydsl.QueryDsl.Expression");
		private final RuleCall cImpliesExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Expression:
		//	ImpliesExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//ImpliesExpression
		public RuleCall getImpliesExpressionParserRuleCall() { return cImpliesExpressionParserRuleCall; }
	}
	public class ImpliesExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.unistuttgart.iste.sqa.mpw.modeling.querydsl.QueryDsl.ImpliesExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cOrExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cImpliesExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cImpliesKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightOrExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//ImpliesExpression Expression:
		//	OrExpression ({ImpliesExpression.left=current} 'implies' right=OrExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//OrExpression ({ImpliesExpression.left=current} 'implies' right=OrExpression)*
		public Group getGroup() { return cGroup; }
		
		//OrExpression
		public RuleCall getOrExpressionParserRuleCall_0() { return cOrExpressionParserRuleCall_0; }
		
		//({ImpliesExpression.left=current} 'implies' right=OrExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{ImpliesExpression.left=current}
		public Action getImpliesExpressionLeftAction_1_0() { return cImpliesExpressionLeftAction_1_0; }
		
		//'implies'
		public Keyword getImpliesKeyword_1_1() { return cImpliesKeyword_1_1; }
		
		//right=OrExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//OrExpression
		public RuleCall getRightOrExpressionParserRuleCall_1_2_0() { return cRightOrExpressionParserRuleCall_1_2_0; }
	}
	public class OrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.unistuttgart.iste.sqa.mpw.modeling.querydsl.QueryDsl.OrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cOrKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAndExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//OrExpression Expression:
		//	AndExpression ({OrExpression.left=current} 'or' right=AndExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//AndExpression ({OrExpression.left=current} 'or' right=AndExpression)*
		public Group getGroup() { return cGroup; }
		
		//AndExpression
		public RuleCall getAndExpressionParserRuleCall_0() { return cAndExpressionParserRuleCall_0; }
		
		//({OrExpression.left=current} 'or' right=AndExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{OrExpression.left=current}
		public Action getOrExpressionLeftAction_1_0() { return cOrExpressionLeftAction_1_0; }
		
		//'or'
		public Keyword getOrKeyword_1_1() { return cOrKeyword_1_1; }
		
		//right=AndExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//AndExpression
		public RuleCall getRightAndExpressionParserRuleCall_1_2_0() { return cRightAndExpressionParserRuleCall_1_2_0; }
	}
	public class AndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.unistuttgart.iste.sqa.mpw.modeling.querydsl.QueryDsl.AndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEqualityExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAndKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightEqualityExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AndExpression Expression:
		//	EqualityExpression ({AndExpression.left=current} 'and' right=EqualityExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//EqualityExpression ({AndExpression.left=current} 'and' right=EqualityExpression)*
		public Group getGroup() { return cGroup; }
		
		//EqualityExpression
		public RuleCall getEqualityExpressionParserRuleCall_0() { return cEqualityExpressionParserRuleCall_0; }
		
		//({AndExpression.left=current} 'and' right=EqualityExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{AndExpression.left=current}
		public Action getAndExpressionLeftAction_1_0() { return cAndExpressionLeftAction_1_0; }
		
		//'and'
		public Keyword getAndKeyword_1_1() { return cAndKeyword_1_1; }
		
		//right=EqualityExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//EqualityExpression
		public RuleCall getRightEqualityExpressionParserRuleCall_1_2_0() { return cRightEqualityExpressionParserRuleCall_1_2_0; }
	}
	public class EqualityExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.unistuttgart.iste.sqa.mpw.modeling.querydsl.QueryDsl.EqualityExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cComparisonExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cEqualityExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperationAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperationAlternatives_1_1_0 = (Alternatives)cOperationAssignment_1_1.eContents().get(0);
		private final Keyword cOperationEqualsSignKeyword_1_1_0_0 = (Keyword)cOperationAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOperationLessThanSignGreaterThanSignKeyword_1_1_0_1 = (Keyword)cOperationAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightComparisonExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//EqualityExpression Expression:
		//	ComparisonExpression ({EqualityExpression.left=current} operation=('=' | '<>') right=ComparisonExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ComparisonExpression ({EqualityExpression.left=current} operation=('=' | '<>') right=ComparisonExpression)*
		public Group getGroup() { return cGroup; }
		
		//ComparisonExpression
		public RuleCall getComparisonExpressionParserRuleCall_0() { return cComparisonExpressionParserRuleCall_0; }
		
		//({EqualityExpression.left=current} operation=('=' | '<>') right=ComparisonExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{EqualityExpression.left=current}
		public Action getEqualityExpressionLeftAction_1_0() { return cEqualityExpressionLeftAction_1_0; }
		
		//operation=('=' | '<>')
		public Assignment getOperationAssignment_1_1() { return cOperationAssignment_1_1; }
		
		//('=' | '<>')
		public Alternatives getOperationAlternatives_1_1_0() { return cOperationAlternatives_1_1_0; }
		
		//'='
		public Keyword getOperationEqualsSignKeyword_1_1_0_0() { return cOperationEqualsSignKeyword_1_1_0_0; }
		
		//'<>'
		public Keyword getOperationLessThanSignGreaterThanSignKeyword_1_1_0_1() { return cOperationLessThanSignGreaterThanSignKeyword_1_1_0_1; }
		
		//right=ComparisonExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//ComparisonExpression
		public RuleCall getRightComparisonExpressionParserRuleCall_1_2_0() { return cRightComparisonExpressionParserRuleCall_1_2_0; }
	}
	public class ComparisonExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.unistuttgart.iste.sqa.mpw.modeling.querydsl.QueryDsl.ComparisonExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPlusOrMinusExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cComparisonExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpGreaterThanSignEqualsSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpLessThanSignEqualsSignKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOpGreaterThanSignKeyword_1_1_0_2 = (Keyword)cOpAlternatives_1_1_0.eContents().get(2);
		private final Keyword cOpLessThanSignKeyword_1_1_0_3 = (Keyword)cOpAlternatives_1_1_0.eContents().get(3);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPlusOrMinusExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//ComparisonExpression Expression:
		//	PlusOrMinusExpression ({ComparisonExpression.left=current} op=(">=" | "<=" | ">" | "<") right=PlusOrMinusExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//PlusOrMinusExpression ({ComparisonExpression.left=current} op=(">=" | "<=" | ">" | "<") right=PlusOrMinusExpression)*
		public Group getGroup() { return cGroup; }
		
		//PlusOrMinusExpression
		public RuleCall getPlusOrMinusExpressionParserRuleCall_0() { return cPlusOrMinusExpressionParserRuleCall_0; }
		
		//({ComparisonExpression.left=current} op=(">=" | "<=" | ">" | "<") right=PlusOrMinusExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{ComparisonExpression.left=current}
		public Action getComparisonExpressionLeftAction_1_0() { return cComparisonExpressionLeftAction_1_0; }
		
		//op=(">=" | "<=" | ">" | "<")
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//(">=" | "<=" | ">" | "<")
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//">="
		public Keyword getOpGreaterThanSignEqualsSignKeyword_1_1_0_0() { return cOpGreaterThanSignEqualsSignKeyword_1_1_0_0; }
		
		//"<="
		public Keyword getOpLessThanSignEqualsSignKeyword_1_1_0_1() { return cOpLessThanSignEqualsSignKeyword_1_1_0_1; }
		
		//">"
		public Keyword getOpGreaterThanSignKeyword_1_1_0_2() { return cOpGreaterThanSignKeyword_1_1_0_2; }
		
		//"<"
		public Keyword getOpLessThanSignKeyword_1_1_0_3() { return cOpLessThanSignKeyword_1_1_0_3; }
		
		//right=PlusOrMinusExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//PlusOrMinusExpression
		public RuleCall getRightPlusOrMinusExpressionParserRuleCall_1_2_0() { return cRightPlusOrMinusExpressionParserRuleCall_1_2_0; }
	}
	public class PlusOrMinusExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.unistuttgart.iste.sqa.mpw.modeling.querydsl.QueryDsl.PlusOrMinusExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicationOrDivisionExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cPlusExpressionLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cMinusExpressionLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightMultiplicationOrDivisionExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//PlusOrMinusExpression Expression:
		//	MultiplicationOrDivisionExpression (({PlusExpression.left=current} '+' | {MinusExpression.left=current} '-')
		//	right=MultiplicationOrDivisionExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//MultiplicationOrDivisionExpression (({PlusExpression.left=current} '+' | {MinusExpression.left=current} '-')
		//right=MultiplicationOrDivisionExpression)*
		public Group getGroup() { return cGroup; }
		
		//MultiplicationOrDivisionExpression
		public RuleCall getMultiplicationOrDivisionExpressionParserRuleCall_0() { return cMultiplicationOrDivisionExpressionParserRuleCall_0; }
		
		//(({PlusExpression.left=current} '+' | {MinusExpression.left=current} '-') right=MultiplicationOrDivisionExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//({PlusExpression.left=current} '+' | {MinusExpression.left=current} '-')
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//{PlusExpression.left=current} '+'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{PlusExpression.left=current}
		public Action getPlusExpressionLeftAction_1_0_0_0() { return cPlusExpressionLeftAction_1_0_0_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_0_0_1() { return cPlusSignKeyword_1_0_0_1; }
		
		//{MinusExpression.left=current} '-'
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//{MinusExpression.left=current}
		public Action getMinusExpressionLeftAction_1_0_1_0() { return cMinusExpressionLeftAction_1_0_1_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_0_1_1() { return cHyphenMinusKeyword_1_0_1_1; }
		
		//right=MultiplicationOrDivisionExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//MultiplicationOrDivisionExpression
		public RuleCall getRightMultiplicationOrDivisionExpressionParserRuleCall_1_1_0() { return cRightMultiplicationOrDivisionExpressionParserRuleCall_1_1_0; }
	}
	public class MultiplicationOrDivisionExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.unistuttgart.iste.sqa.mpw.modeling.querydsl.QueryDsl.MultiplicationOrDivisionExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cMultiplicationExpressionLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cDivisionExpressionLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cSolidusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightPrimaryExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//MultiplicationOrDivisionExpression Expression:
		//	PrimaryExpression (({MultiplicationExpression.left=current} '*' | {DivisionExpression.left=current} '/')
		//	right=PrimaryExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//PrimaryExpression (({MultiplicationExpression.left=current} '*' | {DivisionExpression.left=current} '/')
		//right=PrimaryExpression)*
		public Group getGroup() { return cGroup; }
		
		//PrimaryExpression
		public RuleCall getPrimaryExpressionParserRuleCall_0() { return cPrimaryExpressionParserRuleCall_0; }
		
		//(({MultiplicationExpression.left=current} '*' | {DivisionExpression.left=current} '/') right=PrimaryExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//({MultiplicationExpression.left=current} '*' | {DivisionExpression.left=current} '/')
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//{MultiplicationExpression.left=current} '*'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{MultiplicationExpression.left=current}
		public Action getMultiplicationExpressionLeftAction_1_0_0_0() { return cMultiplicationExpressionLeftAction_1_0_0_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_0_0_1() { return cAsteriskKeyword_1_0_0_1; }
		
		//{DivisionExpression.left=current} '/'
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//{DivisionExpression.left=current}
		public Action getDivisionExpressionLeftAction_1_0_1_0() { return cDivisionExpressionLeftAction_1_0_1_0; }
		
		//'/'
		public Keyword getSolidusKeyword_1_0_1_1() { return cSolidusKeyword_1_0_1_1; }
		
		//right=PrimaryExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//PrimaryExpression
		public RuleCall getRightPrimaryExpressionParserRuleCall_1_1_0() { return cRightPrimaryExpressionParserRuleCall_1_1_0; }
	}
	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.unistuttgart.iste.sqa.mpw.modeling.querydsl.QueryDsl.PrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cNotExpressionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cExpressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExpressionPrimaryExpressionParserRuleCall_1_2_0 = (RuleCall)cExpressionAssignment_1_2.eContents().get(0);
		private final RuleCall cPropertyPathExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cOldValueExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cConstantExpressionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//PrimaryExpression Expression:
		//	'(' Expression ')' | {NotExpression} "!" expression=PrimaryExpression | PropertyPathExpression | OldValueExpression |
		//	ConstantExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' Expression ')' | {NotExpression} "!" expression=PrimaryExpression | PropertyPathExpression | OldValueExpression |
		//ConstantExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'(' Expression ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_0_1() { return cExpressionParserRuleCall_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }
		
		//{NotExpression} "!" expression=PrimaryExpression
		public Group getGroup_1() { return cGroup_1; }
		
		//{NotExpression}
		public Action getNotExpressionAction_1_0() { return cNotExpressionAction_1_0; }
		
		//"!"
		public Keyword getExclamationMarkKeyword_1_1() { return cExclamationMarkKeyword_1_1; }
		
		//expression=PrimaryExpression
		public Assignment getExpressionAssignment_1_2() { return cExpressionAssignment_1_2; }
		
		//PrimaryExpression
		public RuleCall getExpressionPrimaryExpressionParserRuleCall_1_2_0() { return cExpressionPrimaryExpressionParserRuleCall_1_2_0; }
		
		//PropertyPathExpression
		public RuleCall getPropertyPathExpressionParserRuleCall_2() { return cPropertyPathExpressionParserRuleCall_2; }
		
		//OldValueExpression
		public RuleCall getOldValueExpressionParserRuleCall_3() { return cOldValueExpressionParserRuleCall_3; }
		
		//ConstantExpression
		public RuleCall getConstantExpressionParserRuleCall_4() { return cConstantExpressionParserRuleCall_4; }
	}
	public class ConstantExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.unistuttgart.iste.sqa.mpw.modeling.querydsl.QueryDsl.ConstantExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cIntConstantAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cStringConstantAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cBoolConstantAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Alternatives cValueAlternatives_2_1_0 = (Alternatives)cValueAssignment_2_1.eContents().get(0);
		private final Keyword cValueTrueKeyword_2_1_0_0 = (Keyword)cValueAlternatives_2_1_0.eContents().get(0);
		private final Keyword cValueFalseKeyword_2_1_0_1 = (Keyword)cValueAlternatives_2_1_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cNullConstantAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final Keyword cValueNullKeyword_3_1_0 = (Keyword)cValueAssignment_3_1.eContents().get(0);
		
		//ConstantExpression Expression:
		//	{IntConstant} value=INT | {StringConstant} value=STRING | {BoolConstant} value=('true' | 'false') | {NullConstant}
		//	value='null';
		@Override public ParserRule getRule() { return rule; }
		
		//{IntConstant} value=INT | {StringConstant} value=STRING | {BoolConstant} value=('true' | 'false') | {NullConstant}
		//value='null'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{IntConstant} value=INT
		public Group getGroup_0() { return cGroup_0; }
		
		//{IntConstant}
		public Action getIntConstantAction_0_0() { return cIntConstantAction_0_0; }
		
		//value=INT
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0_1_0() { return cValueINTTerminalRuleCall_0_1_0; }
		
		//{StringConstant} value=STRING
		public Group getGroup_1() { return cGroup_1; }
		
		//{StringConstant}
		public Action getStringConstantAction_1_0() { return cStringConstantAction_1_0; }
		
		//value=STRING
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_1_0() { return cValueSTRINGTerminalRuleCall_1_1_0; }
		
		//{BoolConstant} value=('true' | 'false')
		public Group getGroup_2() { return cGroup_2; }
		
		//{BoolConstant}
		public Action getBoolConstantAction_2_0() { return cBoolConstantAction_2_0; }
		
		//value=('true' | 'false')
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }
		
		//('true' | 'false')
		public Alternatives getValueAlternatives_2_1_0() { return cValueAlternatives_2_1_0; }
		
		//'true'
		public Keyword getValueTrueKeyword_2_1_0_0() { return cValueTrueKeyword_2_1_0_0; }
		
		//'false'
		public Keyword getValueFalseKeyword_2_1_0_1() { return cValueFalseKeyword_2_1_0_1; }
		
		//{NullConstant} value='null'
		public Group getGroup_3() { return cGroup_3; }
		
		//{NullConstant}
		public Action getNullConstantAction_3_0() { return cNullConstantAction_3_0; }
		
		//value='null'
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }
		
		//'null'
		public Keyword getValueNullKeyword_3_1_0() { return cValueNullKeyword_3_1_0; }
	}
	public class OldValueExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.unistuttgart.iste.sqa.mpw.modeling.querydsl.QueryDsl.OldValueExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOldValueExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cOldKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionPropertyPathExpressionParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//OldValueExpression Expression:
		//	{OldValueExpression} 'old' '(' expression=PropertyPathExpression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{OldValueExpression} 'old' '(' expression=PropertyPathExpression ')'
		public Group getGroup() { return cGroup; }
		
		//{OldValueExpression}
		public Action getOldValueExpressionAction_0() { return cOldValueExpressionAction_0; }
		
		//'old'
		public Keyword getOldKeyword_1() { return cOldKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//expression=PropertyPathExpression
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }
		
		//PropertyPathExpression
		public RuleCall getExpressionPropertyPathExpressionParserRuleCall_3_0() { return cExpressionPropertyPathExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class PropertyPathExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.unistuttgart.iste.sqa.mpw.modeling.querydsl.QueryDsl.PropertyPathExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStatementsExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cStatementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStatementsStatementParserRuleCall_1_0 = (RuleCall)cStatementsAssignment_1.eContents().get(0);
		private final Assignment cStatementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementsNavigatedStatementParserRuleCall_2_0 = (RuleCall)cStatementsAssignment_2.eContents().get(0);
		
		//PropertyPathExpression Expression:
		//	{StatementsExpression} statements+=Statement statements+=NavigatedStatement*;
		@Override public ParserRule getRule() { return rule; }
		
		//{StatementsExpression} statements+=Statement statements+=NavigatedStatement*
		public Group getGroup() { return cGroup; }
		
		//{StatementsExpression}
		public Action getStatementsExpressionAction_0() { return cStatementsExpressionAction_0; }
		
		//statements+=Statement
		public Assignment getStatementsAssignment_1() { return cStatementsAssignment_1; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_1_0() { return cStatementsStatementParserRuleCall_1_0; }
		
		//statements+=NavigatedStatement*
		public Assignment getStatementsAssignment_2() { return cStatementsAssignment_2; }
		
		//NavigatedStatement
		public RuleCall getStatementsNavigatedStatementParserRuleCall_2_0() { return cStatementsNavigatedStatementParserRuleCall_2_0; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.unistuttgart.iste.sqa.mpw.modeling.querydsl.QueryDsl.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cTargetAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cTargetSelfKeyword_0_0 = (Keyword)cTargetAssignment_0.eContents().get(0);
		private final Assignment cTargetAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cTargetDirectionParserRuleCall_1_0 = (RuleCall)cTargetAssignment_1.eContents().get(0);
		private final Assignment cTargetAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cTargetIDTerminalRuleCall_2_0 = (RuleCall)cTargetAssignment_2.eContents().get(0);
		
		//Statement:
		//	target='self' | target=Direction | target=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//target='self' | target=Direction | target=ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//target='self'
		public Assignment getTargetAssignment_0() { return cTargetAssignment_0; }
		
		//'self'
		public Keyword getTargetSelfKeyword_0_0() { return cTargetSelfKeyword_0_0; }
		
		//target=Direction
		public Assignment getTargetAssignment_1() { return cTargetAssignment_1; }
		
		//Direction
		public RuleCall getTargetDirectionParserRuleCall_1_0() { return cTargetDirectionParserRuleCall_1_0; }
		
		//target=ID
		public Assignment getTargetAssignment_2() { return cTargetAssignment_2; }
		
		//ID
		public RuleCall getTargetIDTerminalRuleCall_2_0() { return cTargetIDTerminalRuleCall_2_0; }
	}
	public class NavigatedStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.unistuttgart.iste.sqa.mpw.modeling.querydsl.QueryDsl.NavigatedStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cFullStopKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cMethodCallAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cMethodCallMethodCallParserRuleCall_0_1_0 = (RuleCall)cMethodCallAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTargetAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTargetIDTerminalRuleCall_1_1_0 = (RuleCall)cTargetAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cCollectionTargetAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cCollectionTargetCollectionMethodParserRuleCall_2_1_0 = (RuleCall)cCollectionTargetAssignment_2_1.eContents().get(0);
		
		//NavigatedStatement Statement:
		//	'.' methodCall=MethodCall | '.' target=ID | '->' collectionTarget=CollectionMethod;
		@Override public ParserRule getRule() { return rule; }
		
		//'.' methodCall=MethodCall | '.' target=ID | '->' collectionTarget=CollectionMethod
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'.' methodCall=MethodCall
		public Group getGroup_0() { return cGroup_0; }
		
		//'.'
		public Keyword getFullStopKeyword_0_0() { return cFullStopKeyword_0_0; }
		
		//methodCall=MethodCall
		public Assignment getMethodCallAssignment_0_1() { return cMethodCallAssignment_0_1; }
		
		//MethodCall
		public RuleCall getMethodCallMethodCallParserRuleCall_0_1_0() { return cMethodCallMethodCallParserRuleCall_0_1_0; }
		
		//'.' target=ID
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//target=ID
		public Assignment getTargetAssignment_1_1() { return cTargetAssignment_1_1; }
		
		//ID
		public RuleCall getTargetIDTerminalRuleCall_1_1_0() { return cTargetIDTerminalRuleCall_1_1_0; }
		
		//'->' collectionTarget=CollectionMethod
		public Group getGroup_2() { return cGroup_2; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_2_0() { return cHyphenMinusGreaterThanSignKeyword_2_0; }
		
		//collectionTarget=CollectionMethod
		public Assignment getCollectionTargetAssignment_2_1() { return cCollectionTargetAssignment_2_1; }
		
		//CollectionMethod
		public RuleCall getCollectionTargetCollectionMethodParserRuleCall_2_1_0() { return cCollectionTargetCollectionMethodParserRuleCall_2_1_0; }
	}
	public class MethodCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.unistuttgart.iste.sqa.mpw.modeling.querydsl.QueryDsl.MethodCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTargetMethodAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTargetMethodIDTerminalRuleCall_0_0 = (RuleCall)cTargetMethodAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cParametersAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cParametersIDTerminalRuleCall_1_0_1_0 = (RuleCall)cParametersAssignment_1_0_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_0_2 = (Keyword)cGroup_1_0.eContents().get(2);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//MethodCall:
		//	targetMethod=ID ('(' parameters+=ID* ')' | '()');
		@Override public ParserRule getRule() { return rule; }
		
		//targetMethod=ID ('(' parameters+=ID* ')' | '()')
		public Group getGroup() { return cGroup; }
		
		//targetMethod=ID
		public Assignment getTargetMethodAssignment_0() { return cTargetMethodAssignment_0; }
		
		//ID
		public RuleCall getTargetMethodIDTerminalRuleCall_0_0() { return cTargetMethodIDTerminalRuleCall_0_0; }
		
		//('(' parameters+=ID* ')' | '()')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'(' parameters+=ID* ')'
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0_0() { return cLeftParenthesisKeyword_1_0_0; }
		
		//parameters+=ID*
		public Assignment getParametersAssignment_1_0_1() { return cParametersAssignment_1_0_1; }
		
		//ID
		public RuleCall getParametersIDTerminalRuleCall_1_0_1_0() { return cParametersIDTerminalRuleCall_1_0_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_0_2() { return cRightParenthesisKeyword_1_0_2; }
		
		//'()'
		public Keyword getLeftParenthesisRightParenthesisKeyword_1_1() { return cLeftParenthesisRightParenthesisKeyword_1_1; }
	}
	public class CollectionMethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.unistuttgart.iste.sqa.mpw.modeling.querydsl.QueryDsl.CollectionMethod");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSimpleCollectionMethodParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cParametrizedCollectionMethodParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//CollectionMethod:
		//	SimpleCollectionMethod | ParametrizedCollectionMethod;
		@Override public ParserRule getRule() { return rule; }
		
		//SimpleCollectionMethod | ParametrizedCollectionMethod
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SimpleCollectionMethod
		public RuleCall getSimpleCollectionMethodParserRuleCall_0() { return cSimpleCollectionMethodParserRuleCall_0; }
		
		//ParametrizedCollectionMethod
		public RuleCall getParametrizedCollectionMethodParserRuleCall_1() { return cParametrizedCollectionMethodParserRuleCall_1; }
	}
	public class SimpleCollectionMethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.unistuttgart.iste.sqa.mpw.modeling.querydsl.QueryDsl.SimpleCollectionMethod");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMethodAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cMethodAlternatives_0_0 = (Alternatives)cMethodAssignment_0.eContents().get(0);
		private final Keyword cMethodNotEmptyKeyword_0_0_0 = (Keyword)cMethodAlternatives_0_0.eContents().get(0);
		private final Keyword cMethodIsEmptyKeyword_0_0_1 = (Keyword)cMethodAlternatives_0_0.eContents().get(1);
		private final Keyword cMethodSizeKeyword_0_0_2 = (Keyword)cMethodAlternatives_0_0.eContents().get(2);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//SimpleCollectionMethod:
		//	method=('notEmpty' | 'isEmpty' | 'size') '()';
		@Override public ParserRule getRule() { return rule; }
		
		//method=('notEmpty' | 'isEmpty' | 'size') '()'
		public Group getGroup() { return cGroup; }
		
		//method=('notEmpty' | 'isEmpty' | 'size')
		public Assignment getMethodAssignment_0() { return cMethodAssignment_0; }
		
		//('notEmpty' | 'isEmpty' | 'size')
		public Alternatives getMethodAlternatives_0_0() { return cMethodAlternatives_0_0; }
		
		//'notEmpty'
		public Keyword getMethodNotEmptyKeyword_0_0_0() { return cMethodNotEmptyKeyword_0_0_0; }
		
		//'isEmpty'
		public Keyword getMethodIsEmptyKeyword_0_0_1() { return cMethodIsEmptyKeyword_0_0_1; }
		
		//'size'
		public Keyword getMethodSizeKeyword_0_0_2() { return cMethodSizeKeyword_0_0_2; }
		
		//'()'
		public Keyword getLeftParenthesisRightParenthesisKeyword_1() { return cLeftParenthesisRightParenthesisKeyword_1; }
	}
	public class ParametrizedCollectionMethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.unistuttgart.iste.sqa.mpw.modeling.querydsl.QueryDsl.ParametrizedCollectionMethod");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cTypeSelectKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cTypeSelectAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cTypeSelectIDTerminalRuleCall_0_1_0 = (RuleCall)cTypeSelectAssignment_0_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cAtKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cIndexExpressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cIndexExpressionExpressionParserRuleCall_1_1_0 = (RuleCall)cIndexExpressionAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//ParametrizedCollectionMethod:
		//	'typeSelect(' typeSelect=ID ')' | 'at(' indexExpression=Expression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'typeSelect(' typeSelect=ID ')' | 'at(' indexExpression=Expression ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'typeSelect(' typeSelect=ID ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//'typeSelect('
		public Keyword getTypeSelectKeyword_0_0() { return cTypeSelectKeyword_0_0; }
		
		//typeSelect=ID
		public Assignment getTypeSelectAssignment_0_1() { return cTypeSelectAssignment_0_1; }
		
		//ID
		public RuleCall getTypeSelectIDTerminalRuleCall_0_1_0() { return cTypeSelectIDTerminalRuleCall_0_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }
		
		//'at(' indexExpression=Expression ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'at('
		public Keyword getAtKeyword_1_0() { return cAtKeyword_1_0; }
		
		//indexExpression=Expression
		public Assignment getIndexExpressionAssignment_1_1() { return cIndexExpressionAssignment_1_1; }
		
		//Expression
		public RuleCall getIndexExpressionExpressionParserRuleCall_1_1_0() { return cIndexExpressionExpressionParserRuleCall_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}
	public class DirectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.unistuttgart.iste.sqa.mpw.modeling.querydsl.QueryDsl.Direction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEASTKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cWESTKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cSOUTHKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cNORTHKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//Direction:
		//	'EAST' | 'WEST' | 'SOUTH' | 'NORTH';
		@Override public ParserRule getRule() { return rule; }
		
		//'EAST' | 'WEST' | 'SOUTH' | 'NORTH'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'EAST'
		public Keyword getEASTKeyword_0() { return cEASTKeyword_0; }
		
		//'WEST'
		public Keyword getWESTKeyword_1() { return cWESTKeyword_1; }
		
		//'SOUTH'
		public Keyword getSOUTHKeyword_2() { return cSOUTHKeyword_2; }
		
		//'NORTH'
		public Keyword getNORTHKeyword_3() { return cNORTHKeyword_3; }
	}
	
	
	private final ModelElements pModel;
	private final ContextElements pContext;
	private final ClassContextElements pClassContext;
	private final CommandContextElements pCommandContext;
	private final ElementElements pElement;
	private final QueryElements pQuery;
	private final CommandConstraintElements pCommandConstraint;
	private final PreconditionElements pPrecondition;
	private final PostconditionElements pPostcondition;
	private final ParameterListElements pParameterList;
	private final ParameterElements pParameter;
	private final InvariantElements pInvariant;
	private final ExpressionElements pExpression;
	private final ImpliesExpressionElements pImpliesExpression;
	private final OrExpressionElements pOrExpression;
	private final AndExpressionElements pAndExpression;
	private final EqualityExpressionElements pEqualityExpression;
	private final ComparisonExpressionElements pComparisonExpression;
	private final PlusOrMinusExpressionElements pPlusOrMinusExpression;
	private final MultiplicationOrDivisionExpressionElements pMultiplicationOrDivisionExpression;
	private final PrimaryExpressionElements pPrimaryExpression;
	private final ConstantExpressionElements pConstantExpression;
	private final OldValueExpressionElements pOldValueExpression;
	private final PropertyPathExpressionElements pPropertyPathExpression;
	private final StatementElements pStatement;
	private final NavigatedStatementElements pNavigatedStatement;
	private final MethodCallElements pMethodCall;
	private final CollectionMethodElements pCollectionMethod;
	private final SimpleCollectionMethodElements pSimpleCollectionMethod;
	private final ParametrizedCollectionMethodElements pParametrizedCollectionMethod;
	private final DirectionElements pDirection;
	private final TerminalRule tDOCUMENTATION;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tSL_COMMENT;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public QueryDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pContext = new ContextElements();
		this.pClassContext = new ClassContextElements();
		this.pCommandContext = new CommandContextElements();
		this.pElement = new ElementElements();
		this.pQuery = new QueryElements();
		this.pCommandConstraint = new CommandConstraintElements();
		this.pPrecondition = new PreconditionElements();
		this.pPostcondition = new PostconditionElements();
		this.pParameterList = new ParameterListElements();
		this.pParameter = new ParameterElements();
		this.pInvariant = new InvariantElements();
		this.pExpression = new ExpressionElements();
		this.pImpliesExpression = new ImpliesExpressionElements();
		this.pOrExpression = new OrExpressionElements();
		this.pAndExpression = new AndExpressionElements();
		this.pEqualityExpression = new EqualityExpressionElements();
		this.pComparisonExpression = new ComparisonExpressionElements();
		this.pPlusOrMinusExpression = new PlusOrMinusExpressionElements();
		this.pMultiplicationOrDivisionExpression = new MultiplicationOrDivisionExpressionElements();
		this.pPrimaryExpression = new PrimaryExpressionElements();
		this.pConstantExpression = new ConstantExpressionElements();
		this.pOldValueExpression = new OldValueExpressionElements();
		this.pPropertyPathExpression = new PropertyPathExpressionElements();
		this.pStatement = new StatementElements();
		this.pNavigatedStatement = new NavigatedStatementElements();
		this.pMethodCall = new MethodCallElements();
		this.pCollectionMethod = new CollectionMethodElements();
		this.pSimpleCollectionMethod = new SimpleCollectionMethodElements();
		this.pParametrizedCollectionMethod = new ParametrizedCollectionMethodElements();
		this.pDirection = new DirectionElements();
		this.tDOCUMENTATION = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.unistuttgart.iste.sqa.mpw.modeling.querydsl.QueryDsl.DOCUMENTATION");
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.unistuttgart.iste.sqa.mpw.modeling.querydsl.QueryDsl.ML_COMMENT");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.unistuttgart.iste.sqa.mpw.modeling.querydsl.QueryDsl.SL_COMMENT");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.unistuttgart.iste.sqa.mpw.modeling.querydsl.QueryDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	Context;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Context:
	//	ClassContext | CommandContext;
	public ContextElements getContextAccess() {
		return pContext;
	}
	
	public ParserRule getContextRule() {
		return getContextAccess().getRule();
	}
	
	//ClassContext:
	//	'context' className=ID elements+=Element+;
	public ClassContextElements getClassContextAccess() {
		return pClassContext;
	}
	
	public ParserRule getClassContextRule() {
		return getClassContextAccess().getRule();
	}
	
	//CommandContext:
	//	'context' className=ID '::' commandName=ID ('(' parameterList=ParameterList ')')? elements+=Element+;
	public CommandContextElements getCommandContextAccess() {
		return pCommandContext;
	}
	
	public ParserRule getCommandContextRule() {
		return getCommandContextAccess().getRule();
	}
	
	//Element:
	//	Query | CommandConstraint | Invariant;
	public ElementElements getElementAccess() {
		return pElement;
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}
	
	//Query:
	//	documentation=DOCUMENTATION? internal?='internal'? 'query' name=ID ('(' parameterList=ParameterList ')')? ':'
	//	(expressions+=Expression ';');
	public QueryElements getQueryAccess() {
		return pQuery;
	}
	
	public ParserRule getQueryRule() {
		return getQueryAccess().getRule();
	}
	
	//CommandConstraint:
	//	Precondition | Postcondition;
	public CommandConstraintElements getCommandConstraintAccess() {
		return pCommandConstraint;
	}
	
	public ParserRule getCommandConstraintRule() {
		return getCommandConstraintAccess().getRule();
	}
	
	//Precondition:
	//	documentation=DOCUMENTATION? 'precondition' name=ID? ':' (expressions+=Expression ';');
	public PreconditionElements getPreconditionAccess() {
		return pPrecondition;
	}
	
	public ParserRule getPreconditionRule() {
		return getPreconditionAccess().getRule();
	}
	
	//Postcondition:
	//	documentation=DOCUMENTATION? 'postcondition' name=ID? ':' (expressions+=Expression ';');
	public PostconditionElements getPostconditionAccess() {
		return pPostcondition;
	}
	
	public ParserRule getPostconditionRule() {
		return getPostconditionAccess().getRule();
	}
	
	//ParameterList:
	//	parameters+=Parameter (',' parameters+=Parameter)*;
	public ParameterListElements getParameterListAccess() {
		return pParameterList;
	}
	
	public ParserRule getParameterListRule() {
		return getParameterListAccess().getRule();
	}
	
	//Parameter:
	//	variableName=ID ':' typeName=ID;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//Invariant:
	//	documentation=DOCUMENTATION? 'invariant' name=ID? ':' (expressions+=Expression ';');
	public InvariantElements getInvariantAccess() {
		return pInvariant;
	}
	
	public ParserRule getInvariantRule() {
		return getInvariantAccess().getRule();
	}
	
	//Expression:
	//	ImpliesExpression;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//ImpliesExpression Expression:
	//	OrExpression ({ImpliesExpression.left=current} 'implies' right=OrExpression)*;
	public ImpliesExpressionElements getImpliesExpressionAccess() {
		return pImpliesExpression;
	}
	
	public ParserRule getImpliesExpressionRule() {
		return getImpliesExpressionAccess().getRule();
	}
	
	//OrExpression Expression:
	//	AndExpression ({OrExpression.left=current} 'or' right=AndExpression)*;
	public OrExpressionElements getOrExpressionAccess() {
		return pOrExpression;
	}
	
	public ParserRule getOrExpressionRule() {
		return getOrExpressionAccess().getRule();
	}
	
	//AndExpression Expression:
	//	EqualityExpression ({AndExpression.left=current} 'and' right=EqualityExpression)*;
	public AndExpressionElements getAndExpressionAccess() {
		return pAndExpression;
	}
	
	public ParserRule getAndExpressionRule() {
		return getAndExpressionAccess().getRule();
	}
	
	//EqualityExpression Expression:
	//	ComparisonExpression ({EqualityExpression.left=current} operation=('=' | '<>') right=ComparisonExpression)*;
	public EqualityExpressionElements getEqualityExpressionAccess() {
		return pEqualityExpression;
	}
	
	public ParserRule getEqualityExpressionRule() {
		return getEqualityExpressionAccess().getRule();
	}
	
	//ComparisonExpression Expression:
	//	PlusOrMinusExpression ({ComparisonExpression.left=current} op=(">=" | "<=" | ">" | "<") right=PlusOrMinusExpression)*;
	public ComparisonExpressionElements getComparisonExpressionAccess() {
		return pComparisonExpression;
	}
	
	public ParserRule getComparisonExpressionRule() {
		return getComparisonExpressionAccess().getRule();
	}
	
	//PlusOrMinusExpression Expression:
	//	MultiplicationOrDivisionExpression (({PlusExpression.left=current} '+' | {MinusExpression.left=current} '-')
	//	right=MultiplicationOrDivisionExpression)*;
	public PlusOrMinusExpressionElements getPlusOrMinusExpressionAccess() {
		return pPlusOrMinusExpression;
	}
	
	public ParserRule getPlusOrMinusExpressionRule() {
		return getPlusOrMinusExpressionAccess().getRule();
	}
	
	//MultiplicationOrDivisionExpression Expression:
	//	PrimaryExpression (({MultiplicationExpression.left=current} '*' | {DivisionExpression.left=current} '/')
	//	right=PrimaryExpression)*;
	public MultiplicationOrDivisionExpressionElements getMultiplicationOrDivisionExpressionAccess() {
		return pMultiplicationOrDivisionExpression;
	}
	
	public ParserRule getMultiplicationOrDivisionExpressionRule() {
		return getMultiplicationOrDivisionExpressionAccess().getRule();
	}
	
	//PrimaryExpression Expression:
	//	'(' Expression ')' | {NotExpression} "!" expression=PrimaryExpression | PropertyPathExpression | OldValueExpression |
	//	ConstantExpression;
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return pPrimaryExpression;
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}
	
	//ConstantExpression Expression:
	//	{IntConstant} value=INT | {StringConstant} value=STRING | {BoolConstant} value=('true' | 'false') | {NullConstant}
	//	value='null';
	public ConstantExpressionElements getConstantExpressionAccess() {
		return pConstantExpression;
	}
	
	public ParserRule getConstantExpressionRule() {
		return getConstantExpressionAccess().getRule();
	}
	
	//OldValueExpression Expression:
	//	{OldValueExpression} 'old' '(' expression=PropertyPathExpression ')';
	public OldValueExpressionElements getOldValueExpressionAccess() {
		return pOldValueExpression;
	}
	
	public ParserRule getOldValueExpressionRule() {
		return getOldValueExpressionAccess().getRule();
	}
	
	//PropertyPathExpression Expression:
	//	{StatementsExpression} statements+=Statement statements+=NavigatedStatement*;
	public PropertyPathExpressionElements getPropertyPathExpressionAccess() {
		return pPropertyPathExpression;
	}
	
	public ParserRule getPropertyPathExpressionRule() {
		return getPropertyPathExpressionAccess().getRule();
	}
	
	//Statement:
	//	target='self' | target=Direction | target=ID;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//NavigatedStatement Statement:
	//	'.' methodCall=MethodCall | '.' target=ID | '->' collectionTarget=CollectionMethod;
	public NavigatedStatementElements getNavigatedStatementAccess() {
		return pNavigatedStatement;
	}
	
	public ParserRule getNavigatedStatementRule() {
		return getNavigatedStatementAccess().getRule();
	}
	
	//MethodCall:
	//	targetMethod=ID ('(' parameters+=ID* ')' | '()');
	public MethodCallElements getMethodCallAccess() {
		return pMethodCall;
	}
	
	public ParserRule getMethodCallRule() {
		return getMethodCallAccess().getRule();
	}
	
	//CollectionMethod:
	//	SimpleCollectionMethod | ParametrizedCollectionMethod;
	public CollectionMethodElements getCollectionMethodAccess() {
		return pCollectionMethod;
	}
	
	public ParserRule getCollectionMethodRule() {
		return getCollectionMethodAccess().getRule();
	}
	
	//SimpleCollectionMethod:
	//	method=('notEmpty' | 'isEmpty' | 'size') '()';
	public SimpleCollectionMethodElements getSimpleCollectionMethodAccess() {
		return pSimpleCollectionMethod;
	}
	
	public ParserRule getSimpleCollectionMethodRule() {
		return getSimpleCollectionMethodAccess().getRule();
	}
	
	//ParametrizedCollectionMethod:
	//	'typeSelect(' typeSelect=ID ')' | 'at(' indexExpression=Expression ')';
	public ParametrizedCollectionMethodElements getParametrizedCollectionMethodAccess() {
		return pParametrizedCollectionMethod;
	}
	
	public ParserRule getParametrizedCollectionMethodRule() {
		return getParametrizedCollectionMethodAccess().getRule();
	}
	
	//Direction:
	//	'EAST' | 'WEST' | 'SOUTH' | 'NORTH';
	public DirectionElements getDirectionAccess() {
		return pDirection;
	}
	
	public ParserRule getDirectionRule() {
		return getDirectionAccess().getRule();
	}
	
	//terminal DOCUMENTATION:
	//	'/**'->'*/';
	public TerminalRule getDOCUMENTATIONRule() {
		return tDOCUMENTATION;
	}
	
	//@Override
	//terminal ML_COMMENT:
	//	'/*' !'*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	}
	
	//@Override
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
