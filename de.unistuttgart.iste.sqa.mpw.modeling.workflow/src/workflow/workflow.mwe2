module modeling.Workflow

import org.eclipse.emf.mwe.utils.StandaloneSetup
import org.eclipse.xtend.typesystem.emf.EmfRegistryMetaModel
import org.eclipse.xtend.check.CheckComponent
import components.readers.*
import components.writers.*
import components.transformators.*

var sourceProjectName = "default.project" // has to be set by calling workflow
var generatedProjectBasePackage  = "'de.unistuttgart.sample'" // has to be set by calling workflow
var targetSimulatorProjectBaseName = "sample" // has to be set by calling workflow

var platformUriPrefix = "platform:/resource"
var moduleBaseName = "de.unistuttgart.iste.sqa.mpw"
var modelingModuleBaseName = "${moduleBaseName}.modeling"

var rootPath = ".."
var mpwModelProject  = "${modelingModuleBaseName}.mpw"
var transformationsProject = "${modelingModuleBaseName}.transformations"

var roleTransformationUri  = "${platformUriPrefix}/${transformationsProject}/transforms/RoleTransformation.qvto"
var commandTransformationUri  = "${platformUriPrefix}/${transformationsProject}/transforms/CommandTransformation.qvto"
var queryTransformationUri  = "${platformUriPrefix}/${transformationsProject}/transforms/QueryTransformation.qvto"
var generationClassesTransformationUri  = "${platformUriPrefix}/${transformationsProject}/transforms/GenerationClassesTransformation.qvto"

Workflow {
	/* set up EMF for standalone execution */
	bean = StandaloneSetup { 
        scanClassPath = true
		platformUri="../"
		registerGeneratedEPackage="org.eclipse.emf.henshin.model.HenshinPackage"
		registerGeneratedEPackage="commandBehavior.CommandPackage"
        registerGeneratedEPackage="queryBehavior.QueryPackage"
        registerGeneratedEPackage="behaviorInputs.InputsPackage"
        registerGeneratedEPackage="generationAnnotations.GenerationAnnotationsPackage"
	}
	
	/** instantiate metamodel */
	bean = EmfRegistryMetaModel : mm_emf { }

	/* load models and store in slot */
	component = MultiEcoreReader {
		rootPath = rootPath
		projectName = mpwModelProject
		excludeModel = "stereotypes/*"
		modelSlot = "entityModels"
	}
    component = MultiEcoreReader {
        rootPath = rootPath
        projectName = sourceProjectName
        modelSlot = "entityModels"
    }
	
	component = QueryReader {
		rootPath = rootPath
		projectName = sourceProjectName
		modelSlot = "queries"
	}
	
	component = CommandReader {
		rootPath = rootPath
		projectName = sourceProjectName
		modelSlot = "commands"
	}
	
	component = QvtoTransformator {
		transformationUri = queryTransformationUri
		modelSlot = "queriesComposition"
		targetModelSlot = "queries"
		sourceTargetRelationship = "NEW_TARGET"
	}
	
    component = XmiWriter {
        rootPath = rootPath
        modelSlot = "queries"
    }
	
	component = QvtoTransformator {
		transformationUri = commandTransformationUri
		modelSlot = "commands"
		sourceTargetRelationship = "NEW_TARGET"
	}
	
	component = XmiWriter {
        rootPath = rootPath
		modelSlot = "commands"
	}
	
    component = QvtoTransformator {
		transformationUri = roleTransformationUri
		modelSlot = "entityModels"
	}
	
	component = XmiWriter {
        rootPath = rootPath
		modelSlot = "entityModels"
		fileExtension = "ecore"
	}
    
    component = QvtoTransformator {
        transformationUri = generationClassesTransformationUri
        modelSlot = "entityModels"
        targetModelSlot = "generationEcoreModels"
    }
    
    component = XmiWriter {
        rootPath = rootPath
        modelSlot = "generationEcoreModels"
        fileExtension = "ecore"
        directorySuffix = "_generation"
    }
	
	/* check model */
	component = CheckComponent {
		metaModel = mm_emf
		checkFile = "util::Checks"
		emfAllChildrenSlot = "entityModels"
	}
	
	component = CheckComponent {
		metaModel = mm_emf
		checkFile = "util::Checks"
		emfAllChildrenSlot = "generationEcoreModels"
	}
	
    component = @JavaGenerator auto-inject {
        generatedProjectBasePackage = generatedProjectBasePackage
        targetSimulatorProject = "${targetSimulatorProjectBaseName}.java"
    }
    component = @CppGenerator auto-inject {
        generatedProjectBasePackage = generatedProjectBasePackage
        targetSimulatorProject = "${targetSimulatorProjectBaseName}.cpp"
    }
}
