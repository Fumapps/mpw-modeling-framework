«IMPORT ecore»

«EXTENSION template::cpp::CppGeneratorExtensions»
«EXTENSION org::eclipse::xtend::util::stdlib::counter»

«REM»Template for reflective keys«ENDREM»
«DEFINE ReflectivePropertyKeyDefinitions FOR EClass»
      «LET eAllStructuralFeatures.without(eStructuralFeatures).size AS offset-»
      «FOREACH eStructuralFeatures AS f-»
      static constexpr unsigned «f.name.toFeatureKeyName()» = «offset+counterInc(this.name)»;
      «ENDFOREACH-»
      «ENDLET-»
«ENDDEFINE»

«DEFINE ReflectivePropertyKeyDefinitionsForNamedElements(List[ecore::ENamedElement] elements) FOR EClass»
      «LET elements.size AS offset-»
      «FOREACH elements AS e-»
      static constexpr unsigned «e.name.toFeatureKeyName()» = «offset+counterInc(this.name)»;
      «ENDFOREACH-»
      «ENDLET-»
«ENDDEFINE»

«REM»Template for reflective operation in C++«ENDREM»
«DEFINE ReflectivePropertyMethodDeclarations FOR EClass»
      «IF isInheritedEntity()-»
      void «EXPAND ReflectiveSetPropertyMethodSignature FOR this» override;
      void «EXPAND ReflectiveAddToCollectionMethodSignature FOR this» override;
      void «EXPAND ReflectiveRemoveFromCollectionMethodSignature FOR this» override;
      «ENDIF-»
«ENDDEFINE»

«DEFINE ReflectiveSetPropertyMethodSignature FOR Object-»
setProperty(unsigned featureKey, Any value)
«ENDDEFINE»

«DEFINE ReflectiveAddToCollectionMethodSignature FOR Object-»
addToCollection(unsigned featureKey, EntityReference reference)
«ENDDEFINE»

«DEFINE ReflectiveRemoveFromCollectionMethodSignature FOR Object-»
removeFromCollection(unsigned featureKey, EntityReference reference)
«ENDDEFINE»

«DEFINE ReflectivePropertyMethodSources FOR EClass»
        «IF isInheritedEntity()-»
        «EXPAND ReflectiveSetPropertyMethod FOR this»
        
        «EXPAND ReflectiveAddToCollectionMethod FOR this»
        
        «EXPAND ReflectiveRemoveFromCollectionMethod FOR this»
        «ENDIF-»
«ENDDEFINE»

«REM»
    Set Property
«ENDREM»
«DEFINE ReflectiveSetPropertyMethod FOR EClass»
        void «name»::«EXPAND ReflectiveSetPropertyMethodSignature FOR this» {
            switch (featureKey) {
            «FOREACH eStructuralFeatures.select(f|f.changeable && f.upperBound == 1) AS f-»
            case «f.name.toFeatureKeyName()»: {
                «IF f.eType.isValueType()-»
                    «EXPAND SetValueTypeProperty FOR f»
                «ELSEIF EReference.isInstance(f)-»
                    «EXPAND SetEntityReferenceProperty FOR f»
                «ELSEIF f.eType.isEnum()-»
                    «EXPAND SetEnumProperty FOR f»
                «ELSE-»
                    «EXPAND SetSimpleProperty FOR f»
                «ENDIF-»
                return;
            }
            «ENDFOREACH-»
            }
            
            «IF getBaseClass() != null-»
            inherited::setProperty(featureKey, value);
            «ELSE-»
            throw std::runtime_error("property with key " + std::to_string(featureKey) + " is not supported");
            «ENDIF-»
        }
«ENDDEFINE»

«DEFINE SetValueTypeProperty FOR EStructuralFeature»
    auto reference = std::get<ValueReference>(value);
    auto valuePtr = reinterpret_cast<«eType.name»*>(reference);
    «name.setter()»(*valuePtr);
«ENDDEFINE»

«DEFINE SetEntityReferenceProperty FOR EStructuralFeature»
    auto reference = std::get<EntityReference>(value);
    auto typedElement = dynamic_cast<«eType.name»*>(reinterpret_cast<basetypes::Entity*>(reference));
    auto sharedPtr = typedElement != nullptr ? typedElement->shared_from_this() : nullptr;
    «name.setter()»(sharedPtr);
«ENDDEFINE»

«DEFINE SetEnumProperty FOR EStructuralFeature»
    int raw = std::get<int>(value);
    auto enumValue = static_cast<«eType.name»>(raw);
    «name.setter()»(enumValue);
«ENDDEFINE»

«DEFINE SetSimpleProperty FOR EStructuralFeature»
    auto typedValue = std::get<«toCppType()»>(value);
    «name.setter()»(typedValue);
«ENDDEFINE»

«REM»
    Add to collection
«ENDREM»
«DEFINE ReflectiveAddToCollectionMethod FOR EClass»
        void «name»::«EXPAND ReflectiveAddToCollectionMethodSignature FOR this» {
            switch (featureKey) {
            «FOREACH eStructuralFeatures.select(f|f.changeable && f.upperBound == -1) AS f-»
            case «f.name.toFeatureKeyName()»: {
                «IF EReference.isInstance(f)-»
                    «EXPAND AddEntityReference FOR f»
                «ELSE-»
                    «EXPAND AddSimpleReference FOR f»
                «ENDIF-»
                return;
            }
            «ENDFOREACH-»
            }
            
            «IF getBaseClass() != null-»
            inherited::addToCollection(featureKey, reference);
            «ELSE-»
            throw std::runtime_error("property with key " + std::to_string(featureKey) + " is not supported");
            «ENDIF-»
        }
«ENDDEFINE»

«DEFINE AddEntityReference FOR EStructuralFeature»
    auto typedElement = dynamic_cast<«eType.name»*>(reinterpret_cast<basetypes::Entity*>(reference));
    auto sharedPtr = typedElement->shared_from_this();
    «name.adder()»(sharedPtr);
«ENDDEFINE»

«DEFINE AddSimpleReference FOR EStructuralFeature»
    auto typedValue = std::get<«toCppType()»>(value);
    «name.adder()»(typedValue);
«ENDDEFINE»


«REM»
    Remove from collection
«ENDREM»
«DEFINE ReflectiveRemoveFromCollectionMethod FOR EClass»
        void «name»::«EXPAND ReflectiveRemoveFromCollectionMethodSignature FOR this» {
            switch (featureKey) {
            «FOREACH eStructuralFeatures.select(f|f.changeable && f.upperBound == -1) AS f-»
            case «f.name.toFeatureKeyName()»: {
                «IF EReference.isInstance(f)-»
                    «EXPAND RemoveEntityReference FOR f»
                «ELSE-»
                    «EXPAND RemoveSimpleReference FOR f»
                «ENDIF-»
                return;
            }
            «ENDFOREACH-»
            }
            
            «IF getBaseClass() != null-»
            inherited::removeFromCollection(featureKey, reference);
            «ELSE-»
            throw std::runtime_error("property with key " + std::to_string(featureKey) + " is not supported");
            «ENDIF-»
        }
«ENDDEFINE»

«DEFINE RemoveEntityReference FOR EStructuralFeature»
    auto typedElement = dynamic_cast<«eType.name»*>(reinterpret_cast<basetypes::Entity*>(reference));
    auto sharedPtr = typedElement->shared_from_this();
    «name.remover()»(sharedPtr);
«ENDDEFINE»

«DEFINE RemoveSimpleReference FOR EStructuralFeature»
    auto typedValue = std::get<«toCppType()»>(value);
    «name.remover()»(typedValue);
«ENDDEFINE»
