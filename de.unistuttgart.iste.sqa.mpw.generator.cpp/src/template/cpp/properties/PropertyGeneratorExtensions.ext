import ecore;

extension template::cpp::properties::ObservablePropertyGeneratorExtensions reexport;
extension template::cpp::types::EmfGeneratorExtensions;
extension template::cpp::types::MetaModelGeneratorExtensions;

/*
 * Extensions related to the generation of Properties and transitive property getters.
 * Note: currently duplicated, later refactored into central place.
 */

featureToSimpleFieldType(ETypedElement this) :
    if (EReference.isInstance(this) && !this.eType.isValueType()) then ((EReference)this).referenceToSimpleFieldType()
    else ((EAttribute)this).attributeToSimpleFieldType();
    
private referenceToSimpleFieldType(EReference this) :
    if (this.upperBound == -1) then (
        if (this.containment) then "framework::SimpleObjectContainmentListProperty<" + this.eType.toQualifiedTypeName() + ">"
        else "framework::SimpleObjectReferenceListProperty<" + this.eType.toQualifiedTypeName() + ">" )
    else (
        if (this.containment || hasSharedOwnership() || eType.isDependency()) then "std::shared_ptr<" + this.eType.toQualifiedTypeName() + ">"
        else "std::weak_ptr<" + this.eType.toQualifiedTypeName() + ">" );

// checks wheter the field needs a shared_ptr, since the lifecycle has to be protected
// Note: used for commands
private hasSharedOwnership(EReference this) :
    this.isMarkedWithAnnotation("sharedOwnership");
    
private attributeToSimpleFieldType(EStructuralFeature this) :
    if (this.upperBound == -1) then "std::list<" + this.toCppType() + ">"
    else this.toCppType();
   
// ensures the feature value is "unpacked" for access
// e.g. weak_ptr has to be locked
resolveFieldValue(EStructuralFeature this) : 
    let reference = (EReference)this :
    if (isWeakPtr()) then name + ".lock()"
    else name;
    
isWeakPtr(EStructuralFeature this) :
    let reference = (EReference)this :
    isReference() && reference.upperBound == 1 && !reference.containment && !reference.hasSharedOwnership() && !reference.eType.isDependency();

getSharedFromThisParentReference(EClass this) :
    if (eSuperTypes.reject(t|t.interface).size > 0) then "inherited"
    else "basetypes::Entity";

toFeatureKeyName(String this) :
    "cFeatureKey" + toFirstUpper();

toFeatureKeyAccess(String this, EClassifier basedOnClass) :
    let eClass = (EClass)basedOnClass :
    if (eClass != null && eClass.interface && eClass.isMarkedWithAnnotation("baseName")) 
        // handle e.g. actor classes like Hamster, which interface roles might be used
        then eClass.ePackage.name + "::Concrete" + eClass.getAnnotationValue("baseName") + "::" + toFeatureKeyName() 
        else basedOnClass.toQualifiedTypeName() + "::" + toFeatureKeyName();
