«IMPORT ecore»

«EXTENSION template::cpp::GeneratorExtensions»

«DEFINE PropertyDefinitions FOR EClass»
      «FOREACH eStructuralFeatures AS f»
      «IF f.isObservableProperty()»
      «f.featureToObservableFieldType()» «f.name»;
      «ELSE-»
      «f.featureToSimpleFieldType()» «f.name»;
      «ENDIF-»
      «IF f.isCollection() && f.isReference() && !f.eType.isValueType()-»
      /// \brief internal lookup for «f.name»
      std::unordered_set<«f.eType.toQualifiedTypeName()»*> «f.name»Lookup;
      «ENDIF-»
      «ENDFOREACH»
«ENDDEFINE»

«REM»Generates a convenience shared_from_this method which statically returns the "this" type«ENDREM»
«DEFINE StaticSharedFromThisDefinition FOR EClass»
      «IF eSuperTypes.reject(t|t.interface).size > 0 || isInheritedEntity()-»
      /// \brief returns a shared_ptr of type «this.name» which shares ownership of *this
	  std::shared_ptr<«this.name»> shared_from_this() {
	    return std::dynamic_pointer_cast<«this.name»>(«getSharedFromThisParentReference()»::shared_from_this());
	  }
      «ENDIF-»
«ENDDEFINE»

«DEFINE ConstructorDeclaration FOR EClass»
      «LET eAllStructuralFeatures.select(f|f.isConstructorInjectedProperty()) AS injectedProperties»
      «IF needsStaticFactoryConstructorMethod()-»
          static std::shared_ptr<«name»> create(«FOREACH injectedProperties AS f SEPARATOR ", "»«f.featureToCppType()» «f.name»«ENDFOREACH»);
          private:
          «name»() = default;
          void init(«FOREACH injectedProperties AS f SEPARATOR ", "»«f.featureToCppType()» «f.name»«ENDFOREACH»);
          public:
      «ELSE-»
          «name»(«FOREACH injectedProperties AS f SEPARATOR ", "»«f.featureToCppType()» «f.name»«ENDFOREACH»);
      «ENDIF-»
      «ENDLET»
«ENDDEFINE»

«DEFINE ConstructorDefinition FOR EClass»
      «LET eAllStructuralFeatures.select(f|f.isConstructorInjectedProperty()) AS injectedProperties-»
      «LET injectedProperties.without(eStructuralFeatures) AS injectedForParentProperties-»
      «LET injectedProperties.without(injectedForParentProperties) AS injectedForThisProperties-»
      «IF needsStaticFactoryConstructorMethod()-»
	      std::shared_ptr<«name»> «name»::create(«FOREACH injectedProperties AS f SEPARATOR ", "»«f.featureToCppType()» «f.name»«ENDFOREACH») {
	          auto instance = std::shared_ptr<«name»>(new «name»);«REM»need raw new, since make_shared doesn't work with private constructor«ENDREM»
	          instance->init(«FOREACH injectedProperties AS p SEPARATOR ", "»«p.name»«ENDFOREACH»);
	          return instance;
	      }
	      
	      void «name»::init(«FOREACH injectedProperties AS f SEPARATOR ", "»«f.featureToCppType()» «f.name»«ENDFOREACH»)
	      «IF injectedForParentProperties.size > 0-»
	      inherited::init(«FOREACH injectedForParentProperties AS p SEPARATOR ", "»«p.name»«ENDFOREACH»)
	      «ENDIF-» {
	      «EXPAND FieldInitializationDefinition(injectedForThisProperties) FOR this-»
	      }
      «ELSE-»
	      «name»::«name»(«FOREACH injectedProperties AS f SEPARATOR ", "»«f.featureToCppType()» «f.name»«ENDFOREACH»)
	      «IF injectedForParentProperties.size > 0-»
	      : («FOREACH injectedForParentProperties AS p SEPARATOR ", "»«p.name»«ENDFOREACH»)
	      «ENDIF-» {
	      «EXPAND FieldInitializationDefinition(injectedForThisProperties) FOR this-»
	      }
      «ENDIF-»
      «ENDLET-»«ENDLET-»«ENDLET-»
«ENDDEFINE»

«DEFINE FieldInitializationDefinition(Set[EStructuralFeature] injectedForThisProperties) FOR EClass»
      «FOREACH injectedForThisProperties AS f-»
      this->«f.name» = «f.name»;
      «ENDFOREACH-»
      «FOREACH eAllStructuralFeatures.select(f|f.isStageField()) AS f-»
      «"stage".setter()»(«f.name»);
      «ENDFOREACH-»
      «FOREACH eStructuralFeatures.select(f|f.needsConstructorInstantiation()) AS f-»
          this->«f.name» = «EXPAND FeatureFieldInstantiation FOR f»;
      «ENDFOREACH-»
«ENDDEFINE»

«DEFINE FeatureFieldInstantiation FOR EStructuralFeature-»
    «IF hasInitializationAnnotation()-»
        «LET getInitializationAnnotation() AS annotation-»
        std::make_shared<«annotation.field.eType.toQualifiedTypeName()»>(«EXPAND template::cpp::QueriesTemplate::ExpressionDefinition FOREACH annotation.parameterInputVariableExpressions SEPARATOR ", "»)
        «ENDLET-»
    «ELSE-»
        «featureToFieldInstantiation()»
    «ENDIF-»
«ENDDEFINE»

«DEFINE ImplConstructorDeclaration FOR EClass-»
      «LET eAllStructuralFeatures.select(f|f.isConstructorInjectedProperty()) AS injectedProperties»
      «name»Impl(«FOREACH injectedProperties AS f SEPARATOR ", "»«f.featureToCppType()» «f.name»«ENDFOREACH»);
      «ENDLET»
«ENDDEFINE»

«DEFINE ImplConstructorDefinition FOR EClass»
      «LET eAllStructuralFeatures.select(f|f.isConstructorInjectedProperty()) AS injectedProperties»
      «name»Impl::«name»Impl(«FOREACH injectedProperties AS f SEPARATOR ", "»«f.featureToCppType()» «f.name»«ENDFOREACH»)
      «IF injectedProperties.size > 0-»
      : («FOREACH injectedProperties AS p SEPARATOR ", "»«p.name»«ENDFOREACH»)
      «ENDIF-» {
      }
      «ENDLET»
«ENDDEFINE»

«DEFINE DestructorDefinition FOR EClass»
    «IF needsImplSubclass() || abstract»«name»::~«name»() = default;«ENDIF»
«ENDDEFINE»

«DEFINE GetPropertyValueDeclarations FOR EClass»
      «FOREACH eStructuralFeatures AS f»
      «IF !f.hasPropertyGetterOperation()»virtual «ENDIF-»«f.featureToCppType()» «f.name.getter()»() noexcept «IF f.hasPropertyGetterOperation()»override«ENDIF-»;
      «ENDFOREACH»
«ENDDEFINE»

«DEFINE GetPropertyValueDefinitions FOR EClass»
      «FOREACH eStructuralFeatures AS f»
      «f.featureToCppType()» «name»::«f.name.getter()»() noexcept {
        «IF f.isObservableProperty()-»
        return this->«f.name».get();
        «ELSE-»
        return this->«f.resolveFieldValue()»;
        «ENDIF-»
      }
      «ENDFOREACH»
«ENDDEFINE»

«DEFINE SetPropertyValueDeclarations FOR EClass»
    «FOREACH eStructuralFeatures.select(e|e.changeable) AS f»
    virtual void «f.adderOrSetter()»(«f.featureToSingleCppType()» «f.modifierParameterName()») noexcept;
    «IF f.isCollection()-»
    virtual void «f.name.remover()»(«f.featureToSingleCppType()» «f.modifierParameterName()») noexcept;
    virtual void «f.name.clearer()»() noexcept;
    «ENDIF-»
    «ENDFOREACH»
«ENDDEFINE»

«DEFINE SetPropertyValueDefinitions FOR EClass-»
    «FOREACH eStructuralFeatures.select(e|e.changeable) AS f»
    void «name»::«f.adderOrSetter()»(«f.featureToSingleCppType()» «f.modifierParameterName()») noexcept {
        «IF f.isCollection()-»
            «IF f.isReference()-»
                «EXPAND MultiReferenceAdderForFeatureDefinition FOR (EReference)f-»
            «ELSE-»
                «EXPAND SimpleAdderForFeatureDefinition FOR f-»
            «ENDIF-»
        «ELSE-»
            «EXPAND SimpleSetterForFeatureDefinition FOR f-»
        «ENDIF-»
     }
     «IF f.isCollection()-»
     void «name»::«f.name.remover()»(«f.featureToSingleCppType()» «f.modifierParameterName()») noexcept {
         «IF f.isReference()-»
             «EXPAND MultiReferenceRemoverForFeatureDefinition FOR (EReference)f-»
         «ELSE-»
             «EXPAND SimpleRemoverForFeatureDefinition FOR f-»
         «ENDIF-»
     }
     
     void «name»::«f.name.clearer()»() noexcept {
         while (!this->«f.name».empty()) {
	        «f.name.remover()»(this->«f.name».front());
         }
     }
     «ENDIF-»
    «ENDFOREACH»
«ENDDEFINE»

«DEFINE MultiReferenceAdderForFeatureDefinition FOR EReference-»
    if (this->«name»Lookup.find(«modifierParameterName()».get()) == this->«name»Lookup.end()) {
        «IF isObservableProperty()-»
            this->«name».add(«modifierParameterName()»);
        «ELSE-»
            this->«name».push_back(«modifierParameterName()»);
        «ENDIF-»
        this->«name»Lookup.insert(«modifierParameterName()».get());
        «EXPAND CallSetterForOppositeDefinition FOR (EReference)this-»
    }
«ENDDEFINE»

«DEFINE MultiReferenceRemoverForFeatureDefinition FOR EReference-»
    if (this->«name»Lookup.find(«modifierParameterName()».get()) != this->«name»Lookup.end()) {
        this->«name».remove(«modifierParameterName()»);
        this->«name»Lookup.erase(«modifierParameterName()».get());
        «EXPAND CallSetterForUnsetOppositeDefinition FOR (EReference)this-»
    }
«ENDDEFINE»

«DEFINE SimpleSetterForFeatureDefinition FOR EStructuralFeature-»
    «IF isReference()-»
        auto «previousFieldName()» = this->«name.getter()»();
        if («previousFieldName()» != «name») {
    «ENDIF-»
    «IF isObservableProperty()-»
        this->«name».set(«name»);
    «ELSE-»
        this->«name» = «name»;
    «ENDIF-»
    «IF isReference()-»
        «EXPAND CallSetterForUnsetPreviousOppositeDefinition FOR (EReference)this-»
        «EXPAND CallSetterForOppositeDefinition FOR (EReference)this-»
        }
    «ENDIF-»
«ENDDEFINE»

«DEFINE SimpleAdderForFeatureDefinition FOR EStructuralFeature-»
    this->«name».add(«modifierParameterName()»);
«ENDDEFINE»

«DEFINE SimpleRemoverForFeatureDefinition FOR EStructuralFeature-»
    this->«name».remove(«modifierParameterName()»);
«ENDDEFINE»

«DEFINE CallSetterForOppositeDefinition FOR EReference-»
      «IF eOpposite != null-»
      if («modifierParameterName()» != nullptr) {
          auto thisPtr = this->shared_from_this();
          «modifierParameterName()»->«eOpposite.adderOrSetter()»(thisPtr);
      }
      «ENDIF-»
«ENDDEFINE»

«DEFINE CallSetterForUnsetOppositeDefinition FOR EReference-»
      «IF eOpposite != null-»
      if («modifierParameterName()» != nullptr && «modifierParameterName()»->«eOpposite.name.getter()»().get() == this) {
          «modifierParameterName()»->«eOpposite.name.setter()»(nullptr);
      }
      «ENDIF-»
«ENDDEFINE»

«DEFINE CallSetterForUnsetPreviousOppositeDefinition FOR EReference-»
    «IF eOpposite != null-»
        «IF eOpposite.isCollection()-»
            if («previousFieldName()» != nullptr) {
                auto thisPtr = this->shared_from_this();
                «previousFieldName()»->«eOpposite.name.remover()»(thisPtr);
            }
        «ELSE-»
            if («previousFieldName()» != nullptr && «previousFieldName()»->«eOpposite.name.getter()»().get() == this) {
                «previousFieldName()»->«eOpposite.name.setter()»(nullptr);
            }
        «ENDIF-»
    «ENDIF-»
«ENDDEFINE»

«DEFINE GetPropertyDeclarations FOR EClass»
      «FOREACH eStructuralFeatures.select(f|f.isObservableProperty()) AS f»
      «IF !f.hasPropertyGetterOperation()»virtual «ENDIF-»const «f.propertyGetterToObservableFieldType()»& «f.name»Property() noexcept «IF f.hasPropertyGetterOperation()»override«ENDIF-»;
      «ENDFOREACH»
«ENDDEFINE»

«DEFINE GetPropertyDefinitions FOR EClass»
      «FOREACH eStructuralFeatures.select(f|f.isObservableProperty()) AS f»
      const «f.propertyGetterToObservableFieldType()»& «name»::«f.name»Property() noexcept {
        return this->«f.name»;
      }
      «ENDFOREACH»
«ENDDEFINE»

«DEFINE VirtualBaseMethodDelegateDefinitions FOR EClass»
    «IF !abstract-»
	    «FOREACH eAllStructuralFeatures.without(eStructuralFeatures).select(f|f.hasPropertyGetterOperation(this)) AS f»
	    const «f.propertyGetterToObservableFieldType()»& «f.name»Property() noexcept override {
	        return inherited::«f.name»Property();
	    }
	    
	    «f.featureToCppType()» «f.name.getter()»() noexcept override {
	        return inherited::«f.name.getter()»();
	    }
	    «ENDFOREACH»
    «ENDIF-»
«ENDDEFINE»
