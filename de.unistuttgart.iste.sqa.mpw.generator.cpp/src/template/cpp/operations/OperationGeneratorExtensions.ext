import ecore;
import generationAnnotations;

extension template::cpp::types::EmfGeneratorExtensions;
extension template::cpp::queries::QueryGeneratorExtensions;
extension util::Extensions;

/*
 * Extensions related to EOperations.
 * Note: currently duplicated, later refactored into central place.
 */

operationToVirtualSignature(EOperation this) :
    documentationToCppDoc() + "virtual " + operationToReturnType() + " " + effectiveOperationName() + "(" + getOperationParameters() + ")";

operationToOverrideSignature(EOperation this) :
    operationToReturnType() + " " + effectiveOperationName() + "(" + getOperationParameters() + ") override";

operationToSourceSignature(EOperation this, String className) :
    operationToReturnType() + " " + className + "::" + effectiveOperationName() + "(" + getOperationParameters() + ")";

private getOperationParameters(EOperation this) :
    if (isCommand()) then "commands::" + name.toFirstUpper() + "CommandParameters& parameters" 
    else eParameters.collect(e|e.toCppType() + " " + e.name).joinToString(", ");

private operationToReturnType(EOperation this) :
    if (isQuery()) then this.getQueryForOperation().toCppQueryReturnType()
    else operationToCppType();

documentationToCppDoc(EOperation this) :
    let documentationDetail = eAnnotations.collect(a|a.details.selectFirst(d|d.key == "documentation")).selectFirst(d|d != null) :
    if (documentationDetail != null) then documentationDetail.value.toCppDoc() else "";

private effectiveOperationName(EOperation this) :
    if (isPropertyGetter()) then name.getter() else name;

hasPropertyGetterOperation(EStructuralFeature this) :
    hasPropertyGetterOperation(this.eContainingClass);

hasPropertyGetterOperation(EStructuralFeature this, EClass targetClass) :
    targetClass.eAllSuperTypes.exists(t|t.eOperations.exists(o|o.isPropertyGetter() && o.name == name));
    
isPropertyGetter(EOperation this) : isMarkedWith("isPropertyGetter");
    
isCommand(EOperation this) : isMarkedWith("command");
    
isQuery(EOperation this) : isMarkedWith("query");

private isMarkedWith(EOperation this, String key) :
    eAnnotations.exists(a|a.source == key || a.details.exists(d|d.key == key));
    
toOptionalDereferencingStar(ReturnAnnotation this) :
    let operation = (EOperation)eContainer :
    if (operation.isMarkedWith("fluent")) then "*"
    else "";
