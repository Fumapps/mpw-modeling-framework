«IMPORT ecore»
«IMPORT queryBehavior»

«EXTENSION template::cpp::GeneratorExtensions»

«DEFINE StatementsDefinitions FOR StatementsExpression-»
    «IF statements.size == 0»nullptr«ENDIF-»
    «FOREACH statements.reverse() AS s-»
        «IF s.isFunctionStatement()-»
            «s.getFunctionStatementCall()-»
        «ENDIF-»
    «ENDFOREACH-»
    «FOREACH statements AS s-»
        «IF s.previous != null && !s.isFunctionStatement() && !IntermediaryResultStatement.isInstance(s)-»
            «IF s.isObjectReferenceAccess()-»->«ELSE».«ENDIF-»
        «ENDIF-»
        «EXPAND StatementDefinition FOR s-»
        «IF CollectionMethodStatement.isInstance(s) && s.isOptional-»
            .value()«REM»TODO implement safe optional access«ENDREM-»
        «ENDIF-»
    «ENDFOREACH-»
«ENDDEFINE»

«DEFINE StatementDefinition FOR Statement»«ENDDEFINE»

«DEFINE StatementDefinition FOR IntermediaryResultStatement-»
    «type.toCppType()» «variableName» = «EXPAND StatementsDefinitions FOR internalStatementsExpression»;
    «IF next == null-»
        return «variableName»;
    «ELSE-»
        if («variableName» == nullptr) {
            return «getDefaultValueLiteralString()»;
        }
    «ENDIF-»
«ENDDEFINE»

«DEFINE StatementDefinition FOR SelfStatement-»
    «selfAlias-»
    «IF previous == null && next == null-»
        ->shared_from_this()«REM»for usages of single "this" statements, usually a shared_ptr variable is required, e.g. in field instantiations«ENDREM-»
    «ENDIF-»
«ENDDEFINE»

«DEFINE StatementDefinition FOR ParameterUsageStatement-»
    «parameterName-»
«ENDDEFINE»

«DEFINE StatementDefinition FOR FeatureStatement-»
    «IF directAccessible-»
        «feature.resolveFieldValue()»
    «ELSE-»
        «feature.name.getter()»()
    «ENDIF-»
«ENDDEFINE»

«DEFINE StatementDefinition FOR CollectionMethodStatement-»
    «IF methodType == CollectionMethodType::NOT_EMPTY-»
        size() > 0«REM»avoid newline«ENDREM-»
    «ELSEIF methodType == CollectionMethodType::IS_EMPTY-»
        empty()«REM»avoid newline«ENDREM-»
    «ELSEIF methodType == CollectionMethodType::SIZE-»
        size()«REM»avoid newline«ENDREM-»
    «ELSEIF methodType == CollectionMethodType::TYPE_SELECT-»
        )«REM»avoid newline«ENDREM-»
    «ELSEIF methodType == CollectionMethodType::AT-»
        «LET (Expression)parameters.get(0) AS indexExpression-»
        , «EXPAND template::cpp::QueriesTemplate::ExpressionDefinition FOR indexExpression»)«REM»avoid newline«ENDREM-»
        «ENDLET-»
    «ENDIF-»
«ENDDEFINE»

«DEFINE StatementDefinition FOR EnumLiteralStatement-»
    «type.toQualifiedTypeName()»::«enumLiteral-»
«ENDDEFINE»

«DEFINE StatementDefinition FOR GetPropertyStatement-»
    «propertyGetterName»()«REM»avoid newline«ENDREM-»
«ENDDEFINE»

«DEFINE StatementDefinition FOR QueryStatement-»
    «query.name»(«parameterNames.toString(", ")»)«REM»avoid newline«ENDREM-»
«ENDDEFINE»

«DEFINE StatementDefinition FOR VariableUsageStatement-»
    «variableReference.variableName-»
«ENDDEFINE»
