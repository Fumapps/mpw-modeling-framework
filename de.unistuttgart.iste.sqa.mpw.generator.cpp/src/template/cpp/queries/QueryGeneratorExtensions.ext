import ecore;
import queryBehavior;
import behaviorsbase;

extension template::cpp::types::EmfGeneratorExtensions;
extension template::cpp::types::MetaModelGeneratorExtensions;

/*
 * Extensions related to the generation of queries.
 */

toOperatorCode(CompareOperator this) :
    switch (this) {
       case CompareOperator::EQUAL: "=="
       case CompareOperator::NOT_EQUAL: "!="
       case CompareOperator::GREATER: ">"
       case CompareOperator::SMALLER: "<"
       case CompareOperator::GREATER_EQUAL: ">="
       case CompareOperator::SMALLER_EQUAL: "<="
       default: ""
    };

toOperatorCode(CalculationOperator this) :
    switch (this) {
       case CalculationOperator::PLUS: "+"
       case CalculationOperator::MINUS: "-"
       case CalculationOperator::MULTIPLY: "*"
       case CalculationOperator::DIVIDE: "/"
       default: ""
    };

Query getQueryForOperation(EOperation operation) : 
    operation.eAnnotations.selectFirst(a|a.source == "query").contents.first();
    
constraintToViolationString(queryBehavior::Constraint this) :
    let typeName = this.metaType.name.replaceAll("queryBehavior::", "") :
    "Violation of " + typeName + 
        (if (this.documentation != null) then ": " + documentation 
        else "");

toCppType(behaviorsbase::TypedElement element) :
    toCppType(element.type.name, element.type.metaType.name, element.type.ePackage);

getDefaultValueLiteralString(Query query) :
    if (query.isOptional) then "std::nullopt"
    else if (query.type.isValueType()) then "{}"
    else query.defaultValueLiteral.toCppLiteral();

List[Parameter] findParameterList(Expression this) :
    eContainer.findParameterListOfEObject();

private List[Parameter] findParameterListOfEObject(emf::EObject object) :
    if (object == null) then null
    else if (Query.isInstance(object)) then ((Query)object).parameters
    else findParameterListOfEObject(object.eContainer);

EClassifier findContextClass(Expression this) :
    eContainer.findContextClassOfEObject();

private EClassifier findContextClassOfEObject(emf::EObject object) :
    if (object == null) then null
    else if (ExpressionalElement.isInstance(object)) then ((ExpressionalElement)object).contextClass
    else findContextClassOfEObject(object.eContainer);

isObjectReferenceAccess(Statement statement) :
    if (statement.previous.isCollection) then false
    else if (FeatureStatement.isInstance(statement.previous) && ((FeatureStatement)statement.previous).feature.isReference()) then true
    else if (SelfStatement.isInstance(statement.previous)) then true
    else false;
    
isFunctionStatement(Statement this) :
    CollectionMethodStatement.isInstance(this) && ((CollectionMethodStatement)this).methodType == CollectionMethodType::AT;
    
getFunctionStatementCall(Statement this) :
    "collectionhelpers::get_at(";
    
toCppQueryReturnType(Query this) : 
    if (this.isOptional) then "std::optional<" + toCppType() + ">"
    else toCppType();
