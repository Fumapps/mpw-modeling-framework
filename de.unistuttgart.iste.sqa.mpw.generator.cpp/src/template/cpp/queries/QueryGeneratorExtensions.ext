import ecore;
import queryBehavior;
import behaviorsbase;

extension template::cpp::types::EmfGeneratorExtensions;
extension template::cpp::types::MetaModelGeneratorExtensions;

/*
 * Extensions related to the generation of queries.
 */

toOperatorCode(CompareOperator this) :
    switch (this) {
       case CompareOperator::EQUAL: "=="
       case CompareOperator::NOT_EQUAL: "!="
       case CompareOperator::GREATER: ">"
       case CompareOperator::SMALLER: "<"
       case CompareOperator::GREATER_EQUAL: ">="
       case CompareOperator::SMALLER_EQUAL: "<="
       default: ""
    };

toOperatorCode(CalculationOperator this) :
    switch (this) {
       case CalculationOperator::PLUS: "+"
       case CalculationOperator::MINUS: "-"
       case CalculationOperator::MULTIPLY: "*"
       case CalculationOperator::DIVIDE: "/"
       default: ""
    };

Query getQueryForOperation(EOperation operation) : 
    operation.eAnnotations.selectFirst(a|a.source == "query").contents.first();
    
constraintToViolationString(queryBehavior::Constraint this) :
    let typeName = this.metaType.name.replaceAll("queryBehavior::", "") :
    "Violation of " + typeName + 
        (if (this.documentation != null) then ": " + documentation 
        else "");

toCppType(behaviorsbase::TypedElement element) :
    toCppType(element.type.name, element.type.metaType.name, element.type.ePackage);

getDefaultValueLiteralString(Query query) :
    if (query.type.isValueType()) then "{}"
    else query.defaultValueLiteral.toCppLiteral();