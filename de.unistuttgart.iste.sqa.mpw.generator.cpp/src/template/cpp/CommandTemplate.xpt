«IMPORT commandBehavior»
«IMPORT queryBehavior»

«EXTENSION template::cpp::GeneratorExtensions»

«DEFINE main FOR Transformation»
    «FILE "generated/commands/" + name.toFirstUpper() + "Command.h"»
    	
        #ifndef «this.toCppIncludeGuard()»
        #define «this.toCppIncludeGuard()»
        
        #include "CompositeCommandBase.h"
        #include "«name.toFirstUpper()»CommandParameters.h"
        «EXPAND template::cpp::types::ImportUsedTypesTemplate::CommandUsedTypeIncludeDefinitions FOR this»
    	
    	namespace «getCommandNamespace()» {
    	
    	«documentation.toCppDoc()»
		class «name.toFirstUpper()»Command final : public CompositeCommandBase {
		private:
		«REM»
            «EXPAND template::cpp::commands::CommandParametersTemplate::ParameterFieldDefinitions FOR this»
		
		public:
		
			«name.toFirstUpper()»Command(«name.toFirstUpper()»CommandParameters parameters)
			«EXPAND template::cpp::commands::CommandParametersTemplate::ConstructorParameterInitializationDefinitions("parameters.") FOR this»
            {
			}
			
			void execute() override;
		
            private:
			«EXPAND template::cpp::commands::CommandUnitTemplate::UnitDeclaration FOREACH units.excluding(mainUnit)»
            «EXPAND template::cpp::QueriesTemplate::HelperStatementDeclaration FOREACH this.eAllContents
                                                                                     .typeSelect(Constraint)
                                                                                     .eAllContents
                                                                                     .typeSelect(StatementsExpression)
                                                                                     .select(e|e.needsHelperMethod)-»
        «ENDREM»
        };
        
        }
        
        #endif //«this.toCppIncludeGuard()»

    «ENDFILE»
    «FILE "generated/commands/" + name.toFirstUpper() + "Command.cpp"»#include "«name.toFirstUpper()»Command.h"
        #include "FrameworkAssert.h"
    
        namespace «getCommandNamespace()» {
        
            «REM»«EXPAND template::cpp::commands::CommandUnitTemplate::UnitExpand FOREACH units»
            «EXPAND template::cpp::QueriesTemplate::HelperStatementDefinition FOREACH this.eAllContents
                                                                                     .typeSelect(Constraint)
                                                                                     .eAllContents
                                                                                     .typeSelect(StatementsExpression)
                                                                                     .select(e|e.needsHelperMethod)-»«ENDREM»
        }
        
    «ENDFILE»
    «FILE "generated/commands/" + name.toFirstUpper() + "CommandParameters.h"»
    
	    #ifndef «this.toCppParameterIncludeGuard()»
	    #define «this.toCppParameterIncludeGuard()»
	    
	    «EXPAND template::cpp::commands::CommandParametersTemplate::CommandParametersClassDefinition FOR this»
        
        #endif //«this.toCppParameterIncludeGuard()»

    «ENDFILE»
«ENDDEFINE»

«DEFINE CMakeLists FOR List[Transformation]»
    «FILE "generated/commands/CMakeLists.txt"-»
    
set(GEN_COMMAND_SRCS ${GEN_COMMAND_SRCS}
    «FOREACH this AS c-»
    "core/src/generated/commands/«c.name.toFirstUpper()»CommandParameters.h"
    "core/src/generated/commands/«c.name.toFirstUpper()»Command.h"
    "core/src/generated/commands/«c.name.toFirstUpper()»Command.cpp"
    «ENDFOREACH-»
    PARENT_SCOPE)
    «ENDFILE»
«ENDDEFINE»
