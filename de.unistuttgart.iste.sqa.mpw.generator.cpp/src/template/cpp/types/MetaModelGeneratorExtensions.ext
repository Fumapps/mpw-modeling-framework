import ecore;

extension template::cpp::operations::OperationGeneratorExtensions;
extension template::cpp::util::GlobalsGeneratorExtensions;
extension util::Extensions;

/*
 * Extensions related to the MPW Metamodel types.
 * Note: currently duplicated, later refactored into central place.
 */

isStereotype(EClassifier this) :
    this.isInStereotypePackage();
    
private isInStereotypePackage(EClassifier this) :
    ePackage.nsPrefix == "viewmodel" || ePackage.nsPrefix == "stereotypes";

hasStereotype(EClassifier this, String stereotype) :
    let eClass = (EClass)this :
    EClass.isInstance(this) && eClass.eAllSuperTypes.exists(t|t.isStereotype() && t.name == stereotype);

needsImplSubclass(EClassifier this) :
    let eClass = (EClass)this :
    EClass.isInstance(this) && !isViewModelType() && eClass.getManualImplementedOperations().size > 0 && !eClass.abstract;

getManualImplementedOperations(EClass this) :
    eAllOperations.reject(o|o.isGenerated());

private isGenerated(EOperation this) : true;
    //isCommand() || isQuery() || isPropertyGetter();

isViewModelType(EClassifier this) :
    EClass.isInstance(this) && ((EClass)this).eSuperTypes.exists(t|t.name == "ViewModel");

toInheritance(EClass this) :
    let filteredSuperTypes = eSuperTypes.reject(e|e.isStereotype()) :
    if (filteredSuperTypes.size > 0) then ": " + filteredSuperTypes.collect(t|"public " + toQualifiedTypeName(t)).toString(", ")
    else "";

toQualifiedTypeName(EClassifier this) :
    this.ePackage.name + "::" + this.name;

toQualifiedTypeName(String this, EPackage package) :
    package.name + "::" + this;
    
isValueType(EClassifier this) : hasStereotype("ValueType");
isDependency(EClassifier this) : hasStereotype("Dependency");
isFacade(EClassifier this) : eAnnotations.exists(a|a.source == "facade");

// TODO: resolve EClass to check stereotype
isValueType(String this) :
   this == "Location";

toCppIncludeGuard(EClassifier this) :
    getModulePackage().replaceAll("\\.", "_").toUpperCase() + "_" + this.name.toUpperCase() + "_H";
