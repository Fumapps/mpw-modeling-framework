import ecore;

extension template::cpp::operations::OperationGeneratorExtensions;
extension template::cpp::util::GlobalsGeneratorExtensions;
extension util::Extensions;

/*
 * Extensions related to the MPW Metamodel types.
 * Note: currently duplicated, later refactored into central place.
 */

isStereotype(EClassifier this) :
    this.isInStereotypePackage();
    
private isInStereotypePackage(EClassifier this) :
    ePackage.nsPrefix == "viewmodel" || ePackage.nsPrefix == "stereotypes";

hasStereotype(EClassifier this, String stereotype) :
    let eClass = (EClass)this :
    EClass.isInstance(this) && eClass.eAllSuperTypes.exists(t|t.isStereotype() && t.name == stereotype);

needsImplSubclass(EClassifier this) :
    let eClass = (EClass)this :
    EClass.isInstance(this) && !isViewModelType() && eClass.getManualImplementedOperations().size > 0 && !eClass.abstract;

getManualImplementedOperations(EClass this) :
    eAllOperations.reject(o|o.isGenerated());

private isGenerated(EOperation this) :
    isCommand() || isQuery() || isPropertyGetter();

isViewModelType(EClassifier this) :
    EClass.isInstance(this) && ((EClass)this).eSuperTypes.exists(t|t.name == "ViewModel");

isInheritedEntity(EClass this) :
    eAllSuperTypes.exists(t|t.name == "Entity");
    
toInheritance(EClass this) :
    let filteredExtends = eSuperTypes.typeSelect(EClass)
        .reject(e|e.interface) :
    let filteredInterfaces = eSuperTypes.typeSelect(EClass)
        .reject(e|e.isStereotype())
        .select(e|e.interface) :
    if (filteredExtends.size > 0 && filteredInterfaces.size > 0) then ": public " + toQualifiedTypeName(filteredExtends.get(0)) + ", public virtual " + filteredInterfaces.collect(i|toQualifiedTypeName(i)).toString(", public virtual ")
    else if (filteredExtends.size > 0) then ": public " + toQualifiedTypeName(filteredExtends.get(0))
    else if (filteredInterfaces.size > 0) then ": public " + filteredInterfaces.collect(i|toQualifiedTypeName(i)).toString(", public ")
    else "";

toInheritedAlias(EClass this) :
    let baseClass = getBaseClass() :
    if (baseClass != null) then "using inherited = " + baseClass.name + ";"
    else "";

EClass getBaseClass(EClass this) :
    let filteredSuperTypes = eSuperTypes.reject(e|e.interface) :
    if (filteredSuperTypes.size > 0) then filteredSuperTypes.first()
    else null;

toQualifiedTypeName(EClassifier this) :
    this.ePackage.name + "::" + this.name;

toQualifiedTypeName(String this, EPackage package) :
    package.name + "::" + this;
    
isValueType(EClassifier this) : hasStereotype("ValueType");
isDependency(EClassifier this) : hasStereotype("Dependency");
isFacade(EClassifier this) : eAnnotations.exists(a|a.source == "facade");
isEntity(EClassifier this) : EClass.isInstance(this) && ((EClass)this).eAllSuperTypes.exists(t|t.name == "Entity");

// TODO: resolve EClass to check stereotype
isValueType(String this) :
   this == "Location";

toCppIncludeGuard(EClassifier this) : toCppIncludeGuard(this.name);
toCppImplIncludeGuard(EClassifier this) : toCppIncludeGuard(this.name + "Impl");

toCppIncludeGuard(String this) :
    getModulePackage().replaceAll("\\.", "_").toUpperCase() + "_" + this.toUpperCase() + "_H";
