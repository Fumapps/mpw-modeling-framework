import ecore;
import behaviorsbase;
import generationAnnotations;

extension template::cpp::types::MetaModelGeneratorExtensions;

/*
 * Extensions related to EMF Metamodel types.
 * Note: currently duplicated, later refactored into central place.
 */

getter(String this) :
	"get" + this.toFirstUpper();
	
setter(String this) :
	"set" + this.toFirstUpper();
	
adder(String this) :
    "addTo" + this.toFirstUpper();
    
remover(String this) :
    "removeFrom" + this.toFirstUpper();
    
clearer(String this) :
    "clear" + this.toFirstUpper();

adderOrSetter(EStructuralFeature this) :
    if (isCollection()) then name.adder() else name.setter();

modifierParameterName(EStructuralFeature this) :
    if (isCollection()) then name.toSingleName() else name;

previousFieldName(EStructuralFeature this) :
    "previous" + modifierParameterName().toFirstUpper();
    
modifierVisibility(EStructuralFeature this) :
    if (derived) then "protected" else "public";
    
private toSingleName(String this) : 
    if (endsWith("ies")) then subString(0, length-3) + "y"
    else if (endsWith("s")) then subString(0, length-1)
    else this;
	
isCollection(ETypedElement this) :
    upperBound == -1;
    
isReference(EStructuralFeature this) :
    EReference.isInstance(this);
    
isObjectReference(EStructuralFeature this) :
    EReference.isInstance(this) && !this.eType.isValueType();
    
isObjectReference(EClassifier this) :
    !isValueType() && !isPrimitive();
	
isConstructorInjectedProperty(EStructuralFeature this) :
    !this.changeable && !this.isContainment() && !this.derived;
    
needsConstructorInstantiation(EStructuralFeature this) :
    !isConstructorInjectedProperty() && !derived &&
        (eType.isDependency() || hasInitializationAnnotation() || !isCollection() && isObjectReference() && !changeable);

isDerivedFrom(EClassifier this, String superTypeName) :
    let eClass = (EClass)this :
    EClass.isInstance(this) && eClass.eAllSuperTypes.exists(t|t.name == superTypeName);
    
isContainment(EStructuralFeature this) :
    EReference.isInstance(this) && ((EReference)this).containment;
        
toCppType(ETypedElement this) : toCppType(this.eType.name, this.eType.metaType.name, this.eType.ePackage);
toCppType(EClassifier this) : toCppType(name, metaType.name, ePackage);
    
toCppType(String this, String metaTypeName, EPackage thisPackage) :
    if (this == "EInt") then "int"
    else if (this == "EBoolean") then "bool"
    else if (this == "EDouble") then "double"
    else if (this == "EString") then "std::string"
    else if (this.isAnyTypeName()) then "Any"
    else if (this == "Semaphore") then "framework::Semaphore"
    else if (this.isValueTypeClassName(thisPackage) || metaTypeName == "ecore::EEnum") then toQualifiedTypeName(this, thisPackage)
    else if (this == "Throwable") then "std::runtime_error"
    else "std::shared_ptr<" + toQualifiedTypeName(this, thisPackage) + ">";

isValueTypeClassName(String this, EPackage thisPackage) :
   thisPackage.getEClassifier(this).isValueType();
	
isBuiltInType(EClassifier this) :
    isPrimitive() || this.name.isAnyTypeName() || this.name == "Throwable";

isPrimitive(EClassifier this) :
    (this.name == "EInt" || this.name == "EBoolean" || this.name == "EDouble" || this.name == "EString");

isAny(ETypedElement this) : this.eType.name.isAnyTypeName();
isAnyTypeName(String this) : (this == "EObject" || this == "Object");

featureToSingleCppType(EStructuralFeature this) : this.toCppType();
featureToCppType(EStructuralFeature this) : elementToCppType();
operationToCppType(EOperation this) : elementToCppType();
	
private elementToCppType(ETypedElement this) :
    if (isMarkedWithAnnotation("constructor")) then "" 
    else if (isMarkedWithAnnotation("fluent")) then this.eType.name + "&" 
    else if (this.eType == null) then "void" 
	else if (this.upperBound == -1) then (
	    if (EAttribute.isInstance(this) || this.eType.isBuiltInType()) then "std::list<" + this.toCppType() + ">"
	    else "framework::ObjectListView<" + this.eType.ePackage.name + "::" + this.eType.name + ">&" )
	else this.toCppType();

hasInitializationAnnotation(EStructuralFeature this) :
    getInitializationAnnotation() != null;

getInitializationAnnotation(EStructuralFeature this) :
    this.eAnnotations.typeSelect(InlineSimpleFieldInitializationAnnotation).first();

featureToFieldInstantiation(EStructuralFeature this) :
    if (hasInitializationAnnotation()) then "ERROR: featureToFieldInstantiation() must not be called for InlineSimpleFieldInitializationAnnotation"
    else if (this.upperBound == -1) then "{}"
    else if (this.eType.isDependency()) then "std::make_shared<" + eType.ePackage.name + "::Dummy" + this.eType.name + ">()"
    else if (this.eType.needsImplSubclass()) then "std::make_shared<" + this.eType.toQualifiedTypeName() + "Impl>()"
    else "std::make_shared<" + this.eType.toQualifiedTypeName() + ">()";

defaultValueOf(EStructuralFeature f) :
    if (f.eType.name == "EInt") then "0"
	else if (f.eType.name == "EBoolean") then "false"
	else if (f.eType.name == "EDouble") then "0.0"
	else if (f.defaultValueLiteral != null) then f.defaultValueLiteral
	else null;

List[EClassifier] getUsedTypes(EOperation this) :
    this.eParameters
        .collect(p|p.eType)
        .union({this.eType})
        .union(eAllContents.typeSelect(TypedElement).collect(e|e.type))
        .reject(t|t == null)
        .reject(t|t.name == "EObject");
    
toCppDoc(String this) :
    if (length > 0) then 
        "/** " + this + " */"
    else "";
    
toComment(String this) :
    if (length > 0) then 
        "/* " + this + " */"
    else "";

isMarkedWithAnnotation(EModelElement this, String key) : 
    eAnnotations.exists(a|a.source == key);

getAnnotationValue(EModelElement this, String key) : 
    eAnnotations.selectFirst(a|a.source == key).details.selectFirst(d|d.key == key).value;

isEnum(EClassifier this) : EEnum.isInstance(this);
isDataType(EClassifier this) : metaType.name == "ecore::EDataType"; // note: EDataType.isInstance(this) does not work

toCppLiteral(String this) :
    if (this == "null") then "nullptr"
    else this;

toDefaultValueCppLiteral(EStructuralFeature this) :
    if (defaultValueLiteral == null) then "nullptr"
    else if (eType.isEnum()) then eType.toQualifiedTypeName() + "::" + defaultValueLiteral
    else defaultValueLiteral.toCppLiteral();
    