import ecore;
import generationAnnotations;

extension template::cpp::types::MetaModelGeneratorExtensions;

/*
 * Extensions related to EMF Metamodel types.
 * Note: currently duplicated, later refactored into central place.
 */

getter(String this) :
	"get" + this.toFirstUpper();
	
setter(String this) :
	"set" + this.toFirstUpper();
	
adder(String this) :
    "addTo" + this.toFirstUpper();
    
remover(String this) :
    "removeFrom" + this.toFirstUpper();

adderOrSetter(EStructuralFeature this) :
    if (isCollection()) then name.adder() else name.setter();

modifierParameterName(EStructuralFeature this) :
    if (isCollection()) then name.toSingleName() else name;

previousFieldName(EStructuralFeature this) :
    "previous" + modifierParameterName().toFirstUpper();
    
modifierVisibility(EStructuralFeature this) :
    if (derived) then "protected" else "public";
    
private toSingleName(String this) : 
    if (endsWith("ies")) then subString(0, length-3) + "y"
    else if (endsWith("s")) then subString(0, length-1)
    else this;
	
isCollection(ETypedElement this) :
    upperBound == -1;
    
isReference(EStructuralFeature this) :
    EReference.isInstance(this);
	
isConstructorInjectedProperty(EStructuralFeature this) :
    !this.changeable && !this.isContainment() && !this.derived;

// e.g. Territory is a concrete references for derviced "stage" reference.
isStageField(EStructuralFeature this) :
    EClass.isInstance(this.eType) && ((EClass)this.eType).eSuperTypes.exists(t|t.name == "Stage");
    
isContainment(EStructuralFeature this) :
    EReference.isInstance(this) && ((EReference)this).containment;
        
toCppType(ETypedElement this) : toCppType(this.eType.name, this.eType.metaType.name, this.eType.ePackage);
    
toCppType(String this, String metaTypeName, EPackage thisPackage) :
    if (this == "EInt") then "int"
    else if (this == "EBoolean") then "bool"
    else if (this == "EString") then "std::string"
    else if (this == "EObject" || this == "Object") then "void*"
    else if (this.isValueType() || metaTypeName == "ecore::EEnum") then toQualifiedTypeName(this, thisPackage)
    else if (this == "Throwable") then "std::runtime_error"
    else "std::shared_ptr<" + toQualifiedTypeName(this, thisPackage) + ">";
	
isBuiltInType(EClassifier this) :
    isPrimitive() || this.name == "Object";

isPrimitive(EClassifier this) :
    (this.name == "EInt" || this.name == "EBoolean" || this.name == "EString");

featureToSingleCppType(EStructuralFeature this) : this.toCppType();
featureToCppType(EStructuralFeature this) : elementToCppType();
operationToCppType(EOperation this) : elementToCppType();
	
private elementToCppType(ETypedElement this) :
    if (isMarkedWithAnnotation("constructor")) then "" 
    else if (this.eType == null) then "void" 
	else if (this.upperBound == -1) then (
	    if (EAttribute.isInstance(this) || this.eType.isBuiltInType()) then "std::list<" + this.toCppType() + ">"
	    else "std::list<std::reference_wrapper<" + this.eType.ePackage.name + "::" + this.eType.name + ">>" )
	else this.toCppType();

featureToFieldInstantiation(EStructuralFeature this) :
    // TODO if (this.eAnnotations.typeSelect(InlineSimpleFieldInitializationAnnotation).size > 0) then this.eAnnotations.typeSelect(InlineSimpleFieldInitializationAnnotation).first().toInitialization()
    if (this.upperBound == -1) then "{}"
    else if (this.eType.isDependency()) then "{ std::make_shared<impl.Dummy" + this.eType.name + ">() }"
    else if (this.eType.needsImplSubclass()) then "new " + this.eType.name + "Impl()"
    else "new " + this.eType.name + "()";

defaultValueOf(EStructuralFeature f) :
    if (f.eType.name == "EInt") then "0"
	else if (f.eType.name == "EBoolean") then "false"
	else if (f.defaultValueLiteral != null) then f.defaultValueLiteral
	else null;

List[EClassifier] getUsedTypes(EOperation this) :
    this.eParameters.collect(p|p.eType).union({this.eType}.reject(r|r == null));
    
toCppDoc(String this) :
    if (length > 0) then 
        "/** " + this + " */"
    else "";
    
toComment(String this) :
    if (length > 0) then 
        "/* " + this + " */"
    else "";

isMarkedWithAnnotation(EModelElement this, String key) : 
    eAnnotations.exists(a|a.source == key);

getAnnotationValue(EModelElement this, String key) : 
    eAnnotations.selectFirst(a|a.source == key).details.selectFirst(d|d.key == key).value;

isEnum(EClassifier this) : EEnum.isInstance(this);
isDataType(EClassifier this) : metaType.name == "ecore::EDataType"; // note: EDataType.isInstance(this) does not work
    