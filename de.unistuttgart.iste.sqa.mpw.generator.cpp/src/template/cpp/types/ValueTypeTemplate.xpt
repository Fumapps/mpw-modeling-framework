«IMPORT ecore»

«EXTENSION template::cpp::GeneratorExtensions»

«DEFINE ValueTypeTemplate FOR EClass»
    «EXPAND ValueTypeTemplateHeader FOR this»
    «EXPAND ValueTypeTemplateSource FOR this»
«ENDDEFINE»

«DEFINE ValueTypeTemplateHeader FOR EClass»
    «FILE "generated/" + name + ".h"»
    
    #ifndef «this.toCppIncludeGuard()»
    #define «this.toCppIncludeGuard()»
    
    #include <cstddef>

    namespace «this.ePackage.name» {
    
    struct «this.name» final {
    
    private:
    
        «FOREACH eAttributes AS a-»
        «a.featureToCppType()» «a.name» = «defaultValueOf(a)»;
        «ENDFOREACH-»
        
    public:
    
        «name»() = default;
        
        «name»(«FOREACH eAttributes AS a SEPARATOR ", "»«a.featureToCppType()» «a.name»«ENDFOREACH»);
        
        «FOREACH eAttributes AS a-»
         inline «a.featureToCppType()» «a.name.getter()»() const {
             return this->«a.name»;
         }
         inline void «a.name.setter()»(«a.featureToCppType()» «a.name») {
             this->«a.name» = «a.name»;
         }
        «ENDFOREACH-»
        
        friend bool operator==(const «name»& lhs, const «name»& rhs);

        friend bool operator!=(const «name»& lhs, const «name»& rhs);
        
        friend std::size_t hash_value(const «name»& obj);
        
        inline static «name» from(«FOREACH eAttributes AS a SEPARATOR ", "»«a.featureToCppType()» «a.name»«ENDFOREACH») {
            return «name»(«FOREACH eAttributes AS a SEPARATOR ", "»«a.name»«ENDFOREACH»);
        }
    };
    
    }

    namespace std
    {
    template<> struct
    hash<«toQualifiedTypeName()»> {
        std::size_t operator()(const «toQualifiedTypeName()»& object) const noexcept {
            return hash_value(object);
        }
    };
    }
    
    #endif //«this.toCppIncludeGuard()»
    
    «ENDFILE»
«ENDDEFINE»

«DEFINE ValueTypeTemplateSource FOR EClass»
    «FILE "generated/" + name + ".cpp"»#include "«name».h"
    
    #include <utility>
    
    namespace «this.ePackage.name» {
    
        «name»::«name»(«FOREACH eAttributes AS a SEPARATOR ", "»«a.featureToCppType()» «a.name»«ENDFOREACH»)
          : «FOREACH eAttributes AS a SEPARATOR ","»
                «a.name»(«a.name»)
            «ENDFOREACH-» 
        {}
        
        bool operator==(const «name»& lhs, const «name»& rhs) {
            «FOREACH eAttributes AS a-»
                if (lhs.«a.name» != rhs.«a.name») {
                    return false;
                }
            «ENDFOREACH-»
            return true;
        }

        bool operator!=(const «name»& lhs, const «name»& rhs) {
            return !(lhs == rhs);
        }
        
        std::size_t hash_value(const «name»& obj) {
            std::size_t prime = 31;
            std::size_t result = 1;
            «FOREACH eAttributes AS a-»
                result = prime * result + std::hash<«a.toCppType()»>()(obj.«a.name»);
            «ENDFOREACH-»
            return result;
        }
    
    }
    
    «ENDFILE»
«ENDDEFINE»

