«IMPORT commandBehavior»
«IMPORT queryBehavior»

«EXTENSION template::cpp::GeneratorExtensions»

«DEFINE UnitDeclaration FOR Unit»
    bool «IF mainUnit»internalMainRule«ELSE»«name»«ENDIF»(«IF !mainUnit»«FOREACH parameters AS p SEPARATOR ", "»«p.toCppType()» «p.name»«ENDFOREACH»«ENDIF»);
    «EXPAND FindObjectDeclaration FOREACH eAllContents.typeSelect(ManyReferenceCondition)-»
«ENDDEFINE»

«DEFINE FindObjectDeclaration FOR ManyReferenceCondition»
    «LET (Rule)this.eContainer AS rule-»
    std::shared_ptr<«this.target.instanceType.toQualifiedTypeName()»> «rule.name.toFirstLower()»_find«this.target.variableName.toFirstUpper()»(«source.toFindParameterTypeName()» source);
    «ENDLET-»
«ENDDEFINE»

«DEFINE UnitExpand FOR Unit»
    «IF mainUnit-»
    void «getParentTransformation().name.toFirstUpper()»Command::execute() {
        «EXPAND PreconditionsDefinition FOR this»
        «EXPAND OldValueVariablesDefinition FOR this»

	    «IF getParentTransformation().isActorCommand()-»
	        gameLog.write(self, "«getParentTransformation().toLogMessage()»");
	    «ENDIF-»
	    
        if (!internalMainRule()) {
            throw std::runtime_error("Transformation was not successfully executed: «getParentTransformation().name»");
        }

        «EXPAND PostconditionsDefinition FOR this»
    }
    «ENDIF-»
    bool «getParentTransformation().name.toFirstUpper()»Command::«IF mainUnit»internalMainRule«ELSE»«name»«ENDIF»(«IF !mainUnit»«FOREACH parameters AS p SEPARATOR ", "»«p.toCppType()» «p.name»«ENDFOREACH»«ENDIF») {
        «EXPAND UnitExpandBody FOR this»
    }
    «EXPAND PostUnitExpand FOR this»
«ENDDEFINE»

«DEFINE UnitExpandBody FOR Unit»«ENDDEFINE»

«DEFINE UnitExpandBody FOR IfElseUnit»
    if («EXPAND InvocationCall FOR ifInvocation») {
        return «EXPAND InvocationCall FOR thenInvocation»;
    }
    return «EXPAND InvocationCall FOR elseInvocation»;
«ENDDEFINE»

«DEFINE UnitExpandBody FOR PriorityChainUnit»
    if«FOREACH conditionalInvocations AS i SEPARATOR " else if "-»
    («EXPAND InvocationCall FOR i») {
        return true;
    }
    «ENDFOREACH»
    return false;
«ENDDEFINE»

«DEFINE UnitExpandBody FOR SequentialUnit»
    «FOREACH targetInvocations AS i-»
    if (!«EXPAND InvocationCall FOR i») {
        return false;
    }
    «ENDFOREACH-»
    return true;
«ENDDEFINE»

«DEFINE UnitExpandBody FOR IteratedUnit»
    for (int i = 0; i < static_cast<int>(«repeat»); i++) {
        if (!«EXPAND InvocationCall FOR targetInvocation») {
            return false;
        }
    }
    return true;
«ENDDEFINE»

«DEFINE InvocationCall FOR Invocation»
    «targetMethodName»(«FOREACH mappedParameters AS p SEPARATOR ", "»«p.name»«ENDFOREACH»)
«ENDDEFINE»

«DEFINE UnitExpandBody FOR Rule»
    «EXPAND VariableDefinition FOREACH variables»
    «EXPAND InstanceDefinition FOREACH instanceConditions»
    «EXPAND ReferenceDefinition FOREACH referenceConditions»
    «EXPAND VariableAssignmentDefinition FOREACH variableAssignments»
    «EXPAND AttributeDefinition FOREACH attributeConditions»
    «EXPAND RemoveModificationDefinition FOREACH modifications.select(m|m.action == Action::DELETE)»
    «EXPAND ClearModificationDefinition FOREACH modifications.select(m|m.action == Action::CLEAR)»
    «EXPAND CreateModificationDefinition FOREACH modifications.select(m|m.action == Action::CREATE)»
    «EXPAND AttributeModificationDefinition FOREACH modifications.select(m|m.action == Action::MODIFY)»
    return true;
«ENDDEFINE»

«DEFINE PostUnitExpand FOR Unit»«ENDDEFINE»

«DEFINE PostUnitExpand FOR Rule»
    «EXPAND FindObjectDefinition FOREACH referenceConditions.typeSelect(ManyReferenceCondition).select(r|!r.isCreate)»
«ENDDEFINE»

«DEFINE ThisInstanceDefinition FOR InstanceCondition»
    // this: «this.variableName»:«this.instanceType.name»
«ENDDEFINE»

«DEFINE InstanceDefinition FOR InstanceCondition»
    «IF isCreate»
        // new instance: «this.variableName»:«this.instanceType.name»
        «this.instanceType.toCppType()» «this.variableName»«IF !this.instanceType.isValueType()» = std::make_shared<«this.instanceType.toQualifiedTypeName()»>()«ENDIF»;
    «ENDIF»
«ENDDEFINE»

«DEFINE VariableDefinition FOR VariableDeclaration»
    // new variable «this.variableName»: «this.variableType.name»
    «this.variableType.toCppType()» «this.variableName»;
«ENDDEFINE»

«DEFINE ReferenceDefinition FOR ReferenceCondition»
    «IF this.metaType == SingleReferenceCondition»
      «EXPAND SingleReferenceDefinition FOR (SingleReferenceCondition)this»
    «ELSEIF this.metaType == ManyReferenceCondition»
      «EXPAND ManyReferenceDefinition FOR (ManyReferenceCondition)this»
    «ENDIF»
«ENDDEFINE»

«DEFINE SingleReferenceDefinition FOR SingleReferenceCondition»
    «IF !this.isCreate && !this.isForbid»
        // new variable from reference: «this.source.variableName»:«this.source.instanceType.name» -> «this.referenceName» -> «this.target.variableName»:«this.target.instanceType.name»
        «this.target.instanceType.toCppType()» «this.target.variableName» = «this.source.variableName»«accessor()»«getter(this.referenceName)»();
        «IF !this.target.instanceType.isValueType()-»
            if («this.target.variableName».get() == nullptr) {
                return false;
            }
        «ENDIF-»
    «ENDIF»
«ENDDEFINE»

«DEFINE ManyReferenceDefinition FOR ManyReferenceCondition»
    «IF !this.isCreate»
        // find new variable from many-reference: «this.source.variableName»:«this.source.instanceType.name» -> «this.referenceName» -> «this.target.variableName»:«this.target.instanceType.name»
        «LET (Rule)this.eContainer AS rule»
        «this.target.instanceType.toCppType()» «this.target.variableName» = «rule.name.toFirstLower()»_find«this.target.variableName.toFirstUpper()»(*«source.variableName»);
        if («this.target.variableName» == nullptr) {
            return false;
        }
        «ENDLET»
    «ENDIF»
«ENDDEFINE»

«DEFINE VariableAssignmentDefinition FOR VariableAssignment»
    «variableName» = «EXPAND template::cpp::QueriesTemplate::ExpressionDefinition FOR value»;
«ENDDEFINE»

«DEFINE AttributeDefinition FOR AttributeCondition»
    «IF this.isCreate»
        «IF instance.instanceType.isValueType()-»
            // set attribute condition «instance.variableName».«attributeName» := «attributeValueLiteral»
            «instance.variableName»«accessor()»«attributeName.setter()»(«EXPAND template::cpp::QueriesTemplate::ExpressionDefinition FOR attributeValue»);
        «ELSE»
            // set value type field «instance.variableName».«attributeName» := «attributeValueLiteral»
            «commandSetter(this.attributeValue.type)»(«instance.variableName», «attributeName.toFeatureKeyAccess(instance.instanceType)», «instance.variableName»«accessor()»«attributeName.getter()»(), «EXPAND template::cpp::QueriesTemplate::ExpressionDefinition FOR attributeValue»);
        «ENDIF-»
    «ELSE»  
        // assert condition: «instance.variableName».«attributeName» == «attributeValueLiteral»
        if («instance.variableName»«instance.accessor()»«attributeName.getter()»() != «EXPAND template::cpp::QueriesTemplate::ExpressionDefinition FOR attributeValue») {
            return false;
        }
    «ENDIF»
«ENDDEFINE»

«DEFINE RemoveModificationDefinition FOR Modification»
    «IF this.instance != null»
    // remove instance: «this.action» «this.instance.variableName» «this.instance.instanceType.name»
    «ENDIF»
    «IF this.reference != null»
    // remove reference: «this.action» «this.reference.source.variableName»:«this.reference.source.instanceType.name» -> «this.reference.referenceName» -> «this.reference.target.variableName»:«this.reference.target.instanceType.name»
    «IF this.reference.metaType == SingleReferenceCondition»
        «commandSetter(this.reference.source.instanceType)»(«this.reference.source.variableName», «this.reference.referenceName.toFeatureKeyAccess(reference.source.instanceType)», «this.reference.source.variableName»«this.reference.accessor()»«this.reference.referenceName.getter()»(), nullptr);
    «ELSE»
        «commandRemover()»(«this.reference.source.variableName», «this.reference.referenceName.toFeatureKeyAccess(reference.source.instanceType)», «this.reference.target.variableName»);
    «ENDIF»
    «ENDIF»
«ENDDEFINE»

«DEFINE ClearModificationDefinition FOR Modification»
    «IF this.reference.metaType == ClearReferenceCondition»
        // clear references: «this.reference.source.variableName»:«this.reference.source.instanceType.name» -> «this.reference.referenceName» -> «this.reference.target.variableName»:«this.reference.target.instanceType.name»
        while («this.reference.source.variableName»«this.reference.accessor()»«this.reference.referenceName.getter()»().size() > 0) {
            «commandRemover()»(«this.reference.source.variableName», «this.reference.referenceName.toFeatureKeyAccess(reference.source.instanceType)», «this.reference.source.variableName»«this.reference.accessor()»«this.reference.referenceName.getter()»().front());
        }
    «ENDIF»
«ENDDEFINE»

«DEFINE CreateModificationDefinition FOR Modification»
    «IF this.instance != null»
    // create instance: «this.action» «this.instance.variableName» «this.instance.instanceType.name»
    «ENDIF»
    «IF this.reference != null»
    // create reference: «this.action» «this.reference.source.variableName»:«this.reference.source.instanceType.name» -> «this.reference.referenceName» -> «this.reference.target.variableName»:«this.reference.target.instanceType.name»
    «IF this.reference.metaType == SingleReferenceCondition»
        «commandSetter(this.reference.target.instanceType)»(«this.reference.source.variableName», «this.reference.referenceName.toFeatureKeyAccess(reference.source.instanceType)», «this.reference.source.variableName»«this.reference.accessor()»«this.reference.referenceName.getter()»(), «this.reference.target.variableName»);
    «ELSE»
        «commandAdder()»(«this.reference.source.variableName», «this.reference.referenceName.toFeatureKeyAccess(reference.source.instanceType)», «this.reference.target.variableName»);
    «ENDIF»
    «ENDIF»
«ENDDEFINE»

«DEFINE AttributeModificationDefinition FOR Modification»
    // set attribute: «this.attribute.instance.variableName».«this.attribute.attributeName» := «this.newAttributeValue»
    «commandSetter(this.attribute.attributeValue.type)»(«this.attribute.instance.variableName», «this.attribute.attributeName.toFeatureKeyAccess(attribute.instance.instanceType)», «this.attribute.instance.variableName»«this.attribute.accessor()»«this.attribute.attributeName.getter()»(), «this.toNewAttributeValueCppString()»);
«ENDDEFINE»

«DEFINE FindObjectDefinition FOR ManyReferenceCondition»
    «LET (Rule)this.eContainer AS rule»
    
    std::shared_ptr<«this.target.instanceType.toQualifiedTypeName()»> «rule.getParentTransformation().name.toFirstUpper()»Command::«rule.name.toFirstLower()»_find«this.target.variableName.toFirstUpper()»(«source.toFindParameterTypeName()» source) {
        «this.target.instanceType.toCppType()» result = nullptr;
        
        for (auto& «getVariableNameForFindReference()» : source.«getter(this.referenceName)»()) {
            «IF isPolymorphic()»
                «this.target.instanceType.toCppType()» «this.target.variableName» = std::dynamic_pointer_cast<«this.target.instanceType.toQualifiedTypeName()»>(«getVariableNameForFindReference()»);
                if («this.target.variableName» == nullptr) {
                    continue;
                }
            «ENDIF»
            «EXPAND AttributeConditionsForFindObjectDefinition FOREACH rule.attributeConditions.select(e|!e.isCreate && e.instance == this.target)»
            «EXPAND ReferenceConditionsForFindObjectDefinition FOREACH rule.referenceConditions.typeSelect(SingleReferenceCondition).select(e|!e.isCreate && e.source == this.target && e.source.instanceType.isObjectReference())»
            
            result = «this.target.variableName»;
            break;
        }
        return result;
    }
    
    «ENDLET»
«ENDDEFINE»

«DEFINE AttributeConditionsForFindObjectDefinition FOR AttributeCondition»
    // attribute check: «instance.variableName»: «this.attributeName»
    if («instance.variableName»«instance.accessor()»«this.attributeName.getter()»() != «EXPAND template::cpp::QueriesTemplate::ExpressionDefinition FOR attributeValue») {
        continue;
    }
«ENDDEFINE»

«DEFINE ReferenceConditionsForFindObjectDefinition FOR SingleReferenceCondition»
    // reference check: «source.variableName»: «this.referenceName»
    «IF this.isForbid-»
    if («source.variableName»«accessor()»«getter(this.referenceName)»() != nullptr) {
        continue;
    }
    «ELSE-»
    «target.instanceType.toCppType()» «target.variableName» = «source.variableName»«accessor()»«getter(this.referenceName)»();
        «IF target.instanceType.isObjectReference()-»
        if («target.variableName» == nullptr) {
            continue;
        }
        «ENDIF-»
    «ENDIF-»
    
    «LET (Rule)this.eContainer AS rule»
    «EXPAND AttributeConditionsForFindObjectDefinition FOREACH rule.attributeConditions.select(e|!e.isCreate && e.instance == this.target)»
    «EXPAND ReferenceConditionsForFindObjectDefinition FOREACH rule.referenceConditions.typeSelect(SingleReferenceCondition).select(e|!e.isCreate && e.source == this.target)»
    «ENDLET»
«ENDDEFINE»

«DEFINE PreconditionsDefinition FOR Unit»
    «LET (Transformation)this.eContainer AS transformation-»
    «EXPAND ConstraintDefinition FOREACH transformation.constraints.typeSelect(Precondition)-»
    «IF !transformation.isInit-»
        «EXPAND ConstraintDefinition FOREACH transformation.constraints.typeSelect(ClassInvariant)-»
    «ENDIF-»
    «ENDLET-»
«ENDDEFINE»

«DEFINE OldValueVariablesDefinition FOR Unit»
    «LET (Transformation)this.eContainer AS transformation-»
    «EXPAND template::cpp::QueriesTemplate::ExpressionDefinition FOREACH transformation.constraints.typeSelect(Postcondition).collect(c|c.oldValueVariableExpressions).flatten()-»
    «ENDLET-»
«ENDDEFINE»

«DEFINE PostconditionsDefinition FOR Unit»
    «LET (Transformation)this.eContainer AS transformation-»
    «EXPAND ConstraintDefinition FOREACH transformation.constraints.typeSelect(Postcondition)-»
    «EXPAND ConstraintDefinition FOREACH transformation.constraints.typeSelect(ClassInvariant)-»
    «ENDLET-»
«ENDDEFINE»

«DEFINE ConstraintDefinition FOR Constraint»
    «documentation.toComment()»
    if ((«EXPAND template::cpp::QueriesTemplate::ExpressionDefinition FOR this.mainExpression-») == false) {
        throw CommandConstraintException("«constraintToViolationString()»");
    }
«ENDDEFINE»
