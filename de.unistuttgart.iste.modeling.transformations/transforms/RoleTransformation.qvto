modeltype Ecore uses ecore('http://www.eclipse.org/emf/2002/Ecore');
modeltype Commandgt uses commandgt('http://www.mpw.uni-stuttgart.de/commandgt');

transformation RoleTransformation(inout ecore: Ecore);

configuration property Queries: List(String);
configuration property Commands: List(Commandgt::Transformation);

main() {
  ecore.rootObjects()[EPackage]->map transformClasses();
}

mapping Ecore::EPackage::transformClasses() {
  var classes := self.eClassifiers[EClass];
  classes[isRelevantType()]->map transformToRoles();
}

helper Ecore::EClass::isRelevantType() : Boolean {
  return self.eAllSuperTypes->exists(t|t.name = "Actor" or t.name = "Stage");
}

mapping inout Ecore::EClass::transformToRoles() {
  var baseName := self.name;
  self.name := "Concrete" + baseName;
  
  self._abstract := true;
  
  var readOnlyRole := object EClass {
  	name := "ReadOnly" + baseName;
  	_abstract := true;
  	interface := true;
  };
  readOnlyRole.eOperations += self.eAllStructuralFeatures->map transformFeatureToGetterOperation();
  readOnlyRole.eOperations += Queries->select(q|q.startsWith(baseName))->map transformQueryToOperation();
  self.ePackage.eClassifiers += readOnlyRole;
  
  var gameRole := object EClass {
  	name := "Game" + baseName;
  	_abstract := true;
  	interface := true;
  };
  gameRole.eSuperTypes += readOnlyRole;
  gameRole.eOperations += Commands->select(c|c.roleName = "game" and c.targetClassName = baseName)->map transformCommandToOperation();
  self.ePackage.eClassifiers += gameRole;
  
  var editorRole := object EClass {
  	name := "Editor" + baseName;
  	_abstract := true;
  	interface := true;
  };
  editorRole.eSuperTypes += readOnlyRole;
  editorRole.eOperations += Commands->select(c|c.roleName = "editor" and c.targetClassName = baseName)->map transformCommandToOperation();
  self.ePackage.eClassifiers += editorRole;
  
  self.eSuperTypes += gameRole;
  self.eSuperTypes += editorRole;
}

mapping String::transformQueryToOperation() : EOperation {
	name := self.substringAfter("|");
	eType := EBoolean.oclAsType(EClassifier);
}

mapping EStructuralFeature::transformFeatureToGetterOperation() : EOperation {
	name := self.name;
	eType := self.eType;
	upperBound := self.upperBound;
	eAnnotations += object EAnnotation {
	  details += object EStringToStringMapEntry {
	  	  key := "isFeature";
	  };
	};
}

mapping Commandgt::Transformation::transformCommandToOperation() : EOperation {
	name := self.name;
}

